
Charger_Gen2_V5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b088  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800b198  0800b198  0001b198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8b8  0800b8b8  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8b8  0800b8b8  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8b8  0800b8b8  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8b8  0800b8b8  0001b8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8bc  0800b8bc  0001b8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800b8c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000208  0800bac8  00020208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  0800bac8  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001523c  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037b7  00000000  00000000  0003546d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  00038c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001310  00000000  00000000  0003a120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001906b  00000000  00000000  0003b430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123b3  00000000  00000000  0005449b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000821f9  00000000  00000000  0006684e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8a47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000680c  00000000  00000000  000e8ac4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b180 	.word	0x0800b180

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800b180 	.word	0x0800b180

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_ADC1_Init+0x74>)
 8001082:	4a19      	ldr	r2, [pc, #100]	; (80010e8 <MX_ADC1_Init+0x78>)
 8001084:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_ADC1_Init+0x74>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_ADC1_Init+0x74>)
 800108e:	2201      	movs	r2, #1
 8001090:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_ADC1_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_ADC1_Init+0x74>)
 800109a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800109e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_ADC1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_ADC1_Init+0x74>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <MX_ADC1_Init+0x74>)
 80010ae:	f003 fc53 	bl	8004958 <HAL_ADC_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010b8:	f002 fff4 	bl	80040a4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80010c4:	2302      	movs	r3, #2
 80010c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_ADC1_Init+0x74>)
 80010ce:	f003 fecf 	bl	8004e70 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010d8:	f002 ffe4 	bl	80040a4 <Error_Handler>
  }

}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000029c 	.word	0x2000029c
 80010e8:	40012400 	.word	0x40012400

080010ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a14      	ldr	r2, [pc, #80]	; (8001158 <HAL_ADC_MspInit+0x6c>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d121      	bne.n	8001150 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_ADC_MspInit+0x70>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a12      	ldr	r2, [pc, #72]	; (800115c <HAL_ADC_MspInit+0x70>)
 8001112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <HAL_ADC_MspInit+0x70>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <HAL_ADC_MspInit+0x70>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a0c      	ldr	r2, [pc, #48]	; (800115c <HAL_ADC_MspInit+0x70>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_ADC_MspInit+0x70>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800113c:	2301      	movs	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001140:	2303      	movs	r3, #3
 8001142:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <HAL_ADC_MspInit+0x74>)
 800114c:	f004 ff3c 	bl	8005fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40012400 	.word	0x40012400
 800115c:	40021000 	.word	0x40021000
 8001160:	40010800 	.word	0x40010800

08001164 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_CAN_Init+0x64>)
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <MX_CAN_Init+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800116e:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_CAN_Init+0x64>)
 8001170:	2209      	movs	r2, #9
 8001172:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <MX_CAN_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_CAN_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_CAN_Init+0x64>)
 8001182:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001186:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_CAN_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_CAN_Init+0x64>)
 8001190:	2200      	movs	r2, #0
 8001192:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_CAN_Init+0x64>)
 8001196:	2200      	movs	r2, #0
 8001198:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_CAN_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_CAN_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_CAN_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_CAN_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_CAN_Init+0x64>)
 80011b4:	f003 ffe0 	bl	8005178 <HAL_CAN_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80011be:	f002 ff71 	bl	80040a4 <Error_Handler>
  }

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200002cc 	.word	0x200002cc
 80011cc:	40006400 	.word	0x40006400

080011d0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a25      	ldr	r2, [pc, #148]	; (8001280 <HAL_CAN_MspInit+0xb0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d143      	bne.n	8001278 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <HAL_CAN_MspInit+0xb4>)
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	4a23      	ldr	r2, [pc, #140]	; (8001284 <HAL_CAN_MspInit+0xb4>)
 80011f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011fa:	61d3      	str	r3, [r2, #28]
 80011fc:	4b21      	ldr	r3, [pc, #132]	; (8001284 <HAL_CAN_MspInit+0xb4>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <HAL_CAN_MspInit+0xb4>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_CAN_MspInit+0xb4>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <HAL_CAN_MspInit+0xb4>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4814      	ldr	r0, [pc, #80]	; (8001288 <HAL_CAN_MspInit+0xb8>)
 8001236:	f004 fec7 	bl	8005fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800123a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	480e      	ldr	r0, [pc, #56]	; (8001288 <HAL_CAN_MspInit+0xb8>)
 8001250:	f004 feba 	bl	8005fc8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_CAN_MspInit+0xbc>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
 8001272:	4a06      	ldr	r2, [pc, #24]	; (800128c <HAL_CAN_MspInit+0xbc>)
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40006400 	.word	0x40006400
 8001284:	40021000 	.word	0x40021000
 8001288:	40010c00 	.word	0x40010c00
 800128c:	40010000 	.word	0x40010000

08001290 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8001296:	2306      	movs	r3, #6
 8001298:	847b      	strh	r3, [r7, #34]	; 0x22
 800129a:	2306      	movs	r3, #6
 800129c:	843b      	strh	r3, [r7, #32]
  uint16_t varidx = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	83fb      	strh	r3, [r7, #30]
 80012a6:	2300      	movs	r3, #0
 80012a8:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80012aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ae:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  flashstatus;
  uint32_t page_error = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef s_eraseinit;


  /* Get Page0 status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80012b4:	4b9e      	ldr	r3, [pc, #632]	; (8001530 <EE_Init+0x2a0>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80012ba:	4b9e      	ldr	r3, [pc, #632]	; (8001534 <EE_Init+0x2a4>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	843b      	strh	r3, [r7, #32]

  /* Fill EraseInit structure*/
  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
  s_eraseinit.PageAddress = PAGE0_ID;
 80012c4:	4b9a      	ldr	r3, [pc, #616]	; (8001530 <EE_Init+0x2a0>)
 80012c6:	60fb      	str	r3, [r7, #12]
  s_eraseinit.NbPages     = 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (pagestatus0)
 80012cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012ce:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d057      	beq.n	8001386 <EE_Init+0xf6>
 80012d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012da:	4293      	cmp	r3, r2
 80012dc:	d003      	beq.n	80012e6 <EE_Init+0x56>
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f000 80f4 	beq.w	80014cc <EE_Init+0x23c>
 80012e4:	e18d      	b.n	8001602 <EE_Init+0x372>
  {
    case ERASED:
      if (pagestatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80012e6:	8c3b      	ldrh	r3, [r7, #32]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d116      	bne.n	800131a <EE_Init+0x8a>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80012ec:	4890      	ldr	r0, [pc, #576]	; (8001530 <EE_Init+0x2a0>)
 80012ee:	f000 f9a9 	bl	8001644 <EE_VerifyPageFullyErased>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f040 818e 	bne.w	8001616 <EE_Init+0x386>
        {
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80012fa:	f107 0214 	add.w	r2, r7, #20
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f004 fdb8 	bl	8005e78 <HAL_FLASHEx_Erase>
 8001308:	4603      	mov	r3, r0
 800130a:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800130c:	7efb      	ldrb	r3, [r7, #27]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8181 	beq.w	8001616 <EE_Init+0x386>
          {
            return flashstatus;
 8001314:	7efb      	ldrb	r3, [r7, #27]
 8001316:	b29b      	uxth	r3, r3
 8001318:	e185      	b.n	8001626 <EE_Init+0x396>
          }
        }
      }
      else if (pagestatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800131a:	8c3b      	ldrh	r3, [r7, #32]
 800131c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001320:	4293      	cmp	r3, r2
 8001322:	d125      	bne.n	8001370 <EE_Init+0xe0>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001324:	4882      	ldr	r0, [pc, #520]	; (8001530 <EE_Init+0x2a0>)
 8001326:	f000 f98d 	bl	8001644 <EE_VerifyPageFullyErased>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10e      	bne.n	800134e <EE_Init+0xbe>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001330:	f107 0214 	add.w	r2, r7, #20
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f004 fd9d 	bl	8005e78 <HAL_FLASHEx_Erase>
 800133e:	4603      	mov	r3, r0
 8001340:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001342:	7efb      	ldrb	r3, [r7, #27]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <EE_Init+0xbe>
          {
            return flashstatus;
 8001348:	7efb      	ldrb	r3, [r7, #27]
 800134a:	b29b      	uxth	r3, r3
 800134c:	e16b      	b.n	8001626 <EE_Init+0x396>
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	4977      	ldr	r1, [pc, #476]	; (8001534 <EE_Init+0x2a4>)
 8001358:	2001      	movs	r0, #1
 800135a:	f004 fc35 	bl	8005bc8 <HAL_FLASH_Program>
 800135e:	4603      	mov	r3, r0
 8001360:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001362:	7efb      	ldrb	r3, [r7, #27]
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 8156 	beq.w	8001616 <EE_Init+0x386>
        {
          return flashstatus;
 800136a:	7efb      	ldrb	r3, [r7, #27]
 800136c:	b29b      	uxth	r3, r3
 800136e:	e15a      	b.n	8001626 <EE_Init+0x396>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 8001370:	f000 f9fa 	bl	8001768 <EE_Format>
 8001374:	4603      	mov	r3, r0
 8001376:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 8001378:	7efb      	ldrb	r3, [r7, #27]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 814b 	beq.w	8001616 <EE_Init+0x386>
        {
          return flashstatus;
 8001380:	7efb      	ldrb	r3, [r7, #27]
 8001382:	b29b      	uxth	r3, r3
 8001384:	e14f      	b.n	8001626 <EE_Init+0x396>
        }
      }
      break;

    case RECEIVE_DATA:
      if (pagestatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001386:	8c3b      	ldrh	r3, [r7, #32]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d163      	bne.n	8001454 <EE_Init+0x1c4>
      {
        /* Transfer data from Page1 to Page0 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 800138c:	2300      	movs	r3, #0
 800138e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001390:	e030      	b.n	80013f4 <EE_Init+0x164>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8001392:	4b69      	ldr	r3, [pc, #420]	; (8001538 <EE_Init+0x2a8>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	b29a      	uxth	r2, r3
 8001398:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800139a:	4968      	ldr	r1, [pc, #416]	; (800153c <EE_Init+0x2ac>)
 800139c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d101      	bne.n	80013a8 <EE_Init+0x118>
          {
            x = varidx;
 80013a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013a6:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 80013a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80013aa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d01d      	beq.n	80013ee <EE_Init+0x15e>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 80013b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013b4:	4a61      	ldr	r2, [pc, #388]	; (800153c <EE_Init+0x2ac>)
 80013b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ba:	4961      	ldr	r1, [pc, #388]	; (8001540 <EE_Init+0x2b0>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f967 	bl	8001690 <EE_ReadVariable>
 80013c2:	4603      	mov	r3, r0
 80013c4:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 80013c6:	8bbb      	ldrh	r3, [r7, #28]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d010      	beq.n	80013ee <EE_Init+0x15e>
            {
              /* Transfer the variable to the Page0 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 80013cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013ce:	4a5b      	ldr	r2, [pc, #364]	; (800153c <EE_Init+0x2ac>)
 80013d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80013d4:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <EE_Init+0x2b0>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	4610      	mov	r0, r2
 80013dc:	f000 fa58 	bl	8001890 <EE_VerifyPageFullWriteVariable>
 80013e0:	4603      	mov	r3, r0
 80013e2:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 80013e4:	8bfb      	ldrh	r3, [r7, #30]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <EE_Init+0x15e>
              {
                return eepromstatus;
 80013ea:	8bfb      	ldrh	r3, [r7, #30]
 80013ec:	e11b      	b.n	8001626 <EE_Init+0x396>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80013ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013f0:	3301      	adds	r3, #1
 80013f2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80013f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d9cb      	bls.n	8001392 <EE_Init+0x102>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	494b      	ldr	r1, [pc, #300]	; (8001530 <EE_Init+0x2a0>)
 8001404:	2001      	movs	r0, #1
 8001406:	f004 fbdf 	bl	8005bc8 <HAL_FLASH_Program>
 800140a:	4603      	mov	r3, r0
 800140c:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 800140e:	7efb      	ldrb	r3, [r7, #27]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <EE_Init+0x18a>
        {
          return flashstatus;
 8001414:	7efb      	ldrb	r3, [r7, #27]
 8001416:	b29b      	uxth	r3, r3
 8001418:	e105      	b.n	8001626 <EE_Init+0x396>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 800141e:	4b45      	ldr	r3, [pc, #276]	; (8001534 <EE_Init+0x2a4>)
 8001420:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001426:	4843      	ldr	r0, [pc, #268]	; (8001534 <EE_Init+0x2a4>)
 8001428:	f000 f90c 	bl	8001644 <EE_VerifyPageFullyErased>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	f040 80f3 	bne.w	800161a <EE_Init+0x38a>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001434:	f107 0214 	add.w	r2, r7, #20
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f004 fd1b 	bl	8005e78 <HAL_FLASHEx_Erase>
 8001442:	4603      	mov	r3, r0
 8001444:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001446:	7efb      	ldrb	r3, [r7, #27]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80e6 	beq.w	800161a <EE_Init+0x38a>
          {
            return flashstatus;
 800144e:	7efb      	ldrb	r3, [r7, #27]
 8001450:	b29b      	uxth	r3, r3
 8001452:	e0e8      	b.n	8001626 <EE_Init+0x396>
          }
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 receive, Page1 erased */
 8001454:	8c3b      	ldrh	r3, [r7, #32]
 8001456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145a:	4293      	cmp	r3, r2
 800145c:	d12b      	bne.n	80014b6 <EE_Init+0x226>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 8001462:	4b34      	ldr	r3, [pc, #208]	; (8001534 <EE_Init+0x2a4>)
 8001464:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 8001466:	2301      	movs	r3, #1
 8001468:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800146a:	4832      	ldr	r0, [pc, #200]	; (8001534 <EE_Init+0x2a4>)
 800146c:	f000 f8ea 	bl	8001644 <EE_VerifyPageFullyErased>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10e      	bne.n	8001494 <EE_Init+0x204>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8001476:	f107 0214 	add.w	r2, r7, #20
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fcfa 	bl	8005e78 <HAL_FLASHEx_Erase>
 8001484:	4603      	mov	r3, r0
 8001486:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 8001488:	7efb      	ldrb	r3, [r7, #27]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d002      	beq.n	8001494 <EE_Init+0x204>
          {
            return flashstatus;
 800148e:	7efb      	ldrb	r3, [r7, #27]
 8001490:	b29b      	uxth	r3, r3
 8001492:	e0c8      	b.n	8001626 <EE_Init+0x396>
          }
        }
        /* Mark Page0 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	f04f 0300 	mov.w	r3, #0
 800149c:	4924      	ldr	r1, [pc, #144]	; (8001530 <EE_Init+0x2a0>)
 800149e:	2001      	movs	r0, #1
 80014a0:	f004 fb92 	bl	8005bc8 <HAL_FLASH_Program>
 80014a4:	4603      	mov	r3, r0
 80014a6:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80014a8:	7efb      	ldrb	r3, [r7, #27]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80b5 	beq.w	800161a <EE_Init+0x38a>
        {
          return flashstatus;
 80014b0:	7efb      	ldrb	r3, [r7, #27]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	e0b7      	b.n	8001626 <EE_Init+0x396>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 80014b6:	f000 f957 	bl	8001768 <EE_Format>
 80014ba:	4603      	mov	r3, r0
 80014bc:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80014be:	7efb      	ldrb	r3, [r7, #27]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80aa 	beq.w	800161a <EE_Init+0x38a>
        {
          return flashstatus;
 80014c6:	7efb      	ldrb	r3, [r7, #27]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	e0ac      	b.n	8001626 <EE_Init+0x396>
        }
      }
      break;

    case VALID_PAGE:
      if (pagestatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80014cc:	8c3b      	ldrh	r3, [r7, #32]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10a      	bne.n	80014e8 <EE_Init+0x258>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        flashstatus = EE_Format();
 80014d2:	f000 f949 	bl	8001768 <EE_Format>
 80014d6:	4603      	mov	r3, r0
 80014d8:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80014da:	7efb      	ldrb	r3, [r7, #27]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 809e 	beq.w	800161e <EE_Init+0x38e>
        {
          return flashstatus;
 80014e2:	7efb      	ldrb	r3, [r7, #27]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	e09e      	b.n	8001626 <EE_Init+0x396>
        }
      }
      else if (pagestatus1 == ERASED) /* Page0 valid, Page1 erased */
 80014e8:	8c3b      	ldrh	r3, [r7, #32]
 80014ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d11b      	bne.n	800152a <EE_Init+0x29a>
      {
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE1_ID;
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <EE_Init+0x2a4>)
 80014f8:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80014fa:	2301      	movs	r3, #1
 80014fc:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <EE_Init+0x2a4>)
 8001500:	f000 f8a0 	bl	8001644 <EE_VerifyPageFullyErased>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 8089 	bne.w	800161e <EE_Init+0x38e>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 800150c:	f107 0214 	add.w	r2, r7, #20
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f004 fcaf 	bl	8005e78 <HAL_FLASHEx_Erase>
 800151a:	4603      	mov	r3, r0
 800151c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 800151e:	7efb      	ldrb	r3, [r7, #27]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d07c      	beq.n	800161e <EE_Init+0x38e>
          {
            return flashstatus;
 8001524:	7efb      	ldrb	r3, [r7, #27]
 8001526:	b29b      	uxth	r3, r3
 8001528:	e07d      	b.n	8001626 <EE_Init+0x396>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 800152a:	2300      	movs	r3, #0
 800152c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800152e:	e03a      	b.n	80015a6 <EE_Init+0x316>
 8001530:	08008000 	.word	0x08008000
 8001534:	08018000 	.word	0x08018000
 8001538:	08008006 	.word	0x08008006
 800153c:	20000010 	.word	0x20000010
 8001540:	20000224 	.word	0x20000224
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[varidx])
 8001544:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <EE_Init+0x3a0>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	b29a      	uxth	r2, r3
 800154a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800154c:	4939      	ldr	r1, [pc, #228]	; (8001634 <EE_Init+0x3a4>)
 800154e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001552:	429a      	cmp	r2, r3
 8001554:	d101      	bne.n	800155a <EE_Init+0x2ca>
          {
            x = varidx;
 8001556:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001558:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (varidx != x)
 800155a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800155c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001560:	429a      	cmp	r2, r3
 8001562:	d01d      	beq.n	80015a0 <EE_Init+0x310>
          {
            /* Read the last variables' updates */
            readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8001564:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001566:	4a33      	ldr	r2, [pc, #204]	; (8001634 <EE_Init+0x3a4>)
 8001568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800156c:	4932      	ldr	r1, [pc, #200]	; (8001638 <EE_Init+0x3a8>)
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f88e 	bl	8001690 <EE_ReadVariable>
 8001574:	4603      	mov	r3, r0
 8001576:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (readstatus != 0x1)
 8001578:	8bbb      	ldrh	r3, [r7, #28]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d010      	beq.n	80015a0 <EE_Init+0x310>
            {
              /* Transfer the variable to the Page1 */
              eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 800157e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001580:	4a2c      	ldr	r2, [pc, #176]	; (8001634 <EE_Init+0x3a4>)
 8001582:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001586:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <EE_Init+0x3a8>)
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	4610      	mov	r0, r2
 800158e:	f000 f97f 	bl	8001890 <EE_VerifyPageFullWriteVariable>
 8001592:	4603      	mov	r3, r0
 8001594:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (eepromstatus != HAL_OK)
 8001596:	8bfb      	ldrh	r3, [r7, #30]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <EE_Init+0x310>
              {
                return eepromstatus;
 800159c:	8bfb      	ldrh	r3, [r7, #30]
 800159e:	e042      	b.n	8001626 <EE_Init+0x396>
        for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80015a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015a2:	3301      	adds	r3, #1
 80015a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80015a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d9cb      	bls.n	8001544 <EE_Init+0x2b4>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	4921      	ldr	r1, [pc, #132]	; (800163c <EE_Init+0x3ac>)
 80015b6:	2001      	movs	r0, #1
 80015b8:	f004 fb06 	bl	8005bc8 <HAL_FLASH_Program>
 80015bc:	4603      	mov	r3, r0
 80015be:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (flashstatus != HAL_OK)
 80015c0:	7efb      	ldrb	r3, [r7, #27]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <EE_Init+0x33c>
        {
          return flashstatus;
 80015c6:	7efb      	ldrb	r3, [r7, #27]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	e02c      	b.n	8001626 <EE_Init+0x396>
        }
        s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
        s_eraseinit.PageAddress = PAGE0_ID;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <EE_Init+0x3b0>)
 80015d2:	60fb      	str	r3, [r7, #12]
        s_eraseinit.NbPages     = 1;
 80015d4:	2301      	movs	r3, #1
 80015d6:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015d8:	4819      	ldr	r0, [pc, #100]	; (8001640 <EE_Init+0x3b0>)
 80015da:	f000 f833 	bl	8001644 <EE_VerifyPageFullyErased>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d11c      	bne.n	800161e <EE_Init+0x38e>
        { 
          flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80015e4:	f107 0214 	add.w	r2, r7, #20
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f004 fc43 	bl	8005e78 <HAL_FLASHEx_Erase>
 80015f2:	4603      	mov	r3, r0
 80015f4:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (flashstatus != HAL_OK)
 80015f6:	7efb      	ldrb	r3, [r7, #27]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d010      	beq.n	800161e <EE_Init+0x38e>
          {
            return flashstatus;
 80015fc:	7efb      	ldrb	r3, [r7, #27]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	e011      	b.n	8001626 <EE_Init+0x396>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      flashstatus = EE_Format();
 8001602:	f000 f8b1 	bl	8001768 <EE_Format>
 8001606:	4603      	mov	r3, r0
 8001608:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 800160a:	7efb      	ldrb	r3, [r7, #27]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d008      	beq.n	8001622 <EE_Init+0x392>
      {
        return flashstatus;
 8001610:	7efb      	ldrb	r3, [r7, #27]
 8001612:	b29b      	uxth	r3, r3
 8001614:	e007      	b.n	8001626 <EE_Init+0x396>
      break;
 8001616:	bf00      	nop
 8001618:	e004      	b.n	8001624 <EE_Init+0x394>
      break;
 800161a:	bf00      	nop
 800161c:	e002      	b.n	8001624 <EE_Init+0x394>
      break;
 800161e:	bf00      	nop
 8001620:	e000      	b.n	8001624 <EE_Init+0x394>
      }
      break;
 8001622:	bf00      	nop
  }

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3728      	adds	r7, #40	; 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	08018006 	.word	0x08018006
 8001634:	20000010 	.word	0x20000010
 8001638:	20000224 	.word	0x20000224
 800163c:	08018000 	.word	0x08018000
 8001640:	08008000 	.word	0x08008000

08001644 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t readstatus = 1;
 800164c:	2301      	movs	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
  uint16_t addressvalue = 0x5555;
 8001650:	f245 5355 	movw	r3, #21845	; 0x5555
 8001654:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 8001656:	e00d      	b.n	8001674 <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)Address);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (addressvalue != ERASED)
 800165e:	897b      	ldrh	r3, [r7, #10]
 8001660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001664:	4293      	cmp	r3, r2
 8001666:	d002      	beq.n	800166e <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]

      break;
 800166c:	e006      	b.n	800167c <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3304      	adds	r3, #4
 8001672:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <EE_VerifyPageFullyErased+0x48>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d9ed      	bls.n	8001658 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return readstatus value: (0: Page not erased, 1: Page erased) */
  return readstatus;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	b29b      	uxth	r3, r3
}
 8001680:	4618      	mov	r0, r3
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	080083ff 	.word	0x080083ff

08001690 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	80fb      	strh	r3, [r7, #6]
  uint16_t validpage = PAGE0;
 800169c:	2300      	movs	r3, #0
 800169e:	81fb      	strh	r3, [r7, #14]
  uint16_t addressvalue = 0x5555, readstatus = 1;
 80016a0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016a4:	81bb      	strh	r3, [r7, #12]
 80016a6:	2301      	movs	r3, #1
 80016a8:	82fb      	strh	r3, [r7, #22]
  uint32_t address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <EE_ReadVariable+0x8c>)
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <EE_ReadVariable+0x8c>)
 80016b0:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 f8a8 	bl	8001808 <EE_FindValidPage>
 80016b8:	4603      	mov	r3, r0
 80016ba:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	2bab      	cmp	r3, #171	; 0xab
 80016c0:	d101      	bne.n	80016c6 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80016c2:	23ab      	movs	r3, #171	; 0xab
 80016c4:	e025      	b.n	8001712 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80016cc:	3320      	adds	r3, #32
 80016ce:	029b      	lsls	r3, r3, #10
 80016d0:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + validpage) * PAGE_SIZE));
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	3301      	adds	r3, #1
 80016d6:	029a      	lsls	r2, r3, #10
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <EE_ReadVariable+0x90>)
 80016da:	4413      	add	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (address > (PageStartAddress + 2))
 80016de:	e012      	b.n	8001706 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    addressvalue = (*(__IO uint16_t*)address);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (addressvalue == VirtAddress)
 80016e6:	89ba      	ldrh	r2, [r7, #12]
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d108      	bne.n	8001700 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(address - 2));
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	3b02      	subs	r3, #2
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset readstatus flag */
      readstatus = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	82fb      	strh	r3, [r7, #22]

      break;
 80016fe:	e007      	b.n	8001710 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      address = address - 4;
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	3b04      	subs	r3, #4
 8001704:	613b      	str	r3, [r7, #16]
  while (address > (PageStartAddress + 2))
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3302      	adds	r3, #2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d8e7      	bhi.n	80016e0 <EE_ReadVariable+0x50>
    }
  }

  /* Return readstatus value: (0: variable exist, 1: variable doesn't exist) */
  return readstatus;
 8001710:	8afb      	ldrh	r3, [r7, #22]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	08008000 	.word	0x08008000
 8001720:	08007ffe 	.word	0x08007ffe

08001724 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	460a      	mov	r2, r1
 800172e:	80fb      	strh	r3, [r7, #6]
 8001730:	4613      	mov	r3, r2
 8001732:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001738:	88ba      	ldrh	r2, [r7, #4]
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f8a6 	bl	8001890 <EE_VerifyPageFullWriteVariable>
 8001744:	4603      	mov	r3, r0
 8001746:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	2b80      	cmp	r3, #128	; 0x80
 800174c:	d107      	bne.n	800175e <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800174e:	88ba      	ldrh	r2, [r7, #4]
 8001750:	88fb      	ldrh	r3, [r7, #6]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f8f9 	bl	800194c <EE_PageTransfer>
 800175a:	4603      	mov	r3, r0
 800175c:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800175e:	89fb      	ldrh	r3, [r7, #14]
}
 8001760:	4618      	mov	r0, r3
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef flashstatus = HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
  uint32_t page_error = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
  s_eraseinit.PageAddress = PAGE0_ID;
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <EE_Format+0x98>)
 800177c:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = 1;
 800177e:	2301      	movs	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8001782:	481f      	ldr	r0, [pc, #124]	; (8001800 <EE_Format+0x98>)
 8001784:	f7ff ff5e 	bl	8001644 <EE_VerifyPageFullyErased>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10d      	bne.n	80017aa <EE_Format+0x42>
  {
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 800178e:	f107 0210 	add.w	r2, r7, #16
 8001792:	463b      	mov	r3, r7
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f004 fb6e 	bl	8005e78 <HAL_FLASHEx_Erase>
 800179c:	4603      	mov	r3, r0
 800179e:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <EE_Format+0x42>
    {
      return flashstatus;
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	e025      	b.n	80017f6 <EE_Format+0x8e>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	4913      	ldr	r1, [pc, #76]	; (8001800 <EE_Format+0x98>)
 80017b4:	2001      	movs	r0, #1
 80017b6:	f004 fa07 	bl	8005bc8 <HAL_FLASH_Program>
 80017ba:	4603      	mov	r3, r0
 80017bc:	75fb      	strb	r3, [r7, #23]
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <EE_Format+0x60>
  {
    return flashstatus;
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	e016      	b.n	80017f6 <EE_Format+0x8e>
  }

  s_eraseinit.PageAddress = PAGE1_ID;
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <EE_Format+0x9c>)
 80017ca:	60bb      	str	r3, [r7, #8]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <EE_Format+0x9c>)
 80017ce:	f7ff ff39 	bl	8001644 <EE_VerifyPageFullyErased>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10d      	bne.n	80017f4 <EE_Format+0x8c>
  {  
    flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error); 
 80017d8:	f107 0210 	add.w	r2, r7, #16
 80017dc:	463b      	mov	r3, r7
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f004 fb49 	bl	8005e78 <HAL_FLASHEx_Erase>
 80017e6:	4603      	mov	r3, r0
 80017e8:	75fb      	strb	r3, [r7, #23]
    /* If erase operation was failed, a Flash error code is returned */
    if (flashstatus != HAL_OK)
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <EE_Format+0x8c>
    {
      return flashstatus;
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	e000      	b.n	80017f6 <EE_Format+0x8e>
    }
  }
  
  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	08008000 	.word	0x08008000
 8001804:	08018000 	.word	0x08018000

08001808 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  uint16_t pagestatus0 = 6, pagestatus1 = 6;
 8001812:	2306      	movs	r3, #6
 8001814:	81fb      	strh	r3, [r7, #14]
 8001816:	2306      	movs	r3, #6
 8001818:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  pagestatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <EE_FindValidPage+0x80>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  pagestatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <EE_FindValidPage+0x84>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01b      	beq.n	8001864 <EE_FindValidPage+0x5c>
 800182c:	2b01      	cmp	r3, #1
 800182e:	d125      	bne.n	800187c <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (pagestatus1 == VALID_PAGE)
 8001830:	89bb      	ldrh	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d108      	bne.n	8001848 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (pagestatus0 == RECEIVE_DATA)
 8001836:	89fb      	ldrh	r3, [r7, #14]
 8001838:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 800183c:	4293      	cmp	r3, r2
 800183e:	d101      	bne.n	8001844 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001840:	2300      	movs	r3, #0
 8001842:	e01c      	b.n	800187e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001844:	2340      	movs	r3, #64	; 0x40
 8001846:	e01a      	b.n	800187e <EE_FindValidPage+0x76>
        }
      }
      else if (pagestatus0 == VALID_PAGE)
 8001848:	89fb      	ldrh	r3, [r7, #14]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d108      	bne.n	8001860 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (pagestatus1 == RECEIVE_DATA)
 800184e:	89bb      	ldrh	r3, [r7, #12]
 8001850:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001858:	2340      	movs	r3, #64	; 0x40
 800185a:	e010      	b.n	800187e <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800185c:	2300      	movs	r3, #0
 800185e:	e00e      	b.n	800187e <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001860:	23ab      	movs	r3, #171	; 0xab
 8001862:	e00c      	b.n	800187e <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (pagestatus0 == VALID_PAGE)
 8001864:	89fb      	ldrh	r3, [r7, #14]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800186a:	2300      	movs	r3, #0
 800186c:	e007      	b.n	800187e <EE_FindValidPage+0x76>
      }
      else if (pagestatus1 == VALID_PAGE)
 800186e:	89bb      	ldrh	r3, [r7, #12]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001874:	2340      	movs	r3, #64	; 0x40
 8001876:	e002      	b.n	800187e <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001878:	23ab      	movs	r3, #171	; 0xab
 800187a:	e000      	b.n	800187e <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800187c:	2300      	movs	r3, #0
  }
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	08008000 	.word	0x08008000
 800188c:	08018000 	.word	0x08018000

08001890 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	80fb      	strh	r3, [r7, #6]
 800189c:	4613      	mov	r3, r2
 800189e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	74fb      	strb	r3, [r7, #19]
  uint16_t validpage = PAGE0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	823b      	strh	r3, [r7, #16]
  uint32_t address = EEPROM_START_ADDRESS, pageendaddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <EE_VerifyPageFullWriteVariable+0xb0>)
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <EE_VerifyPageFullWriteVariable+0xb4>)
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  validpage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 80018b0:	2001      	movs	r0, #1
 80018b2:	f7ff ffa9 	bl	8001808 <EE_FindValidPage>
 80018b6:	4603      	mov	r3, r0
 80018b8:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (validpage == NO_VALID_PAGE)
 80018ba:	8a3b      	ldrh	r3, [r7, #16]
 80018bc:	2bab      	cmp	r3, #171	; 0xab
 80018be:	d101      	bne.n	80018c4 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 80018c0:	23ab      	movs	r3, #171	; 0xab
 80018c2:	e039      	b.n	8001938 <EE_VerifyPageFullWriteVariable+0xa8>
  }

  /* Get the valid Page start address */
  address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(validpage * PAGE_SIZE));
 80018c4:	8a3b      	ldrh	r3, [r7, #16]
 80018c6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80018ca:	3320      	adds	r3, #32
 80018cc:	029b      	lsls	r3, r3, #10
 80018ce:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end address */
  pageendaddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((validpage + 1) * PAGE_SIZE));
 80018d0:	8a3b      	ldrh	r3, [r7, #16]
 80018d2:	3301      	adds	r3, #1
 80018d4:	029a      	lsls	r2, r3, #10
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <EE_VerifyPageFullWriteVariable+0xb8>)
 80018d8:	4413      	add	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (address < pageendaddress)
 80018dc:	e027      	b.n	800192e <EE_VerifyPageFullWriteVariable+0x9e>
  {
    /* Verify if address and address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)address) == 0xFFFFFFFF)
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e6:	d11f      	bne.n	8001928 <EE_VerifyPageFullWriteVariable+0x98>
    {
      /* Set variable data */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, Data);       
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	f04f 0400 	mov.w	r4, #0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4623      	mov	r3, r4
 80018f2:	6979      	ldr	r1, [r7, #20]
 80018f4:	2001      	movs	r0, #1
 80018f6:	f004 f967 	bl	8005bc8 <HAL_FLASH_Program>
 80018fa:	4603      	mov	r3, r0
 80018fc:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (flashstatus != HAL_OK)
 80018fe:	7cfb      	ldrb	r3, [r7, #19]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <EE_VerifyPageFullWriteVariable+0x7a>
      {
        return flashstatus;
 8001904:	7cfb      	ldrb	r3, [r7, #19]
 8001906:	b29b      	uxth	r3, r3
 8001908:	e016      	b.n	8001938 <EE_VerifyPageFullWriteVariable+0xa8>
      }
      /* Set variable virtual address */
      flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, VirtAddress);       
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	1c99      	adds	r1, r3, #2
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	f04f 0400 	mov.w	r4, #0
 8001914:	461a      	mov	r2, r3
 8001916:	4623      	mov	r3, r4
 8001918:	2001      	movs	r0, #1
 800191a:	f004 f955 	bl	8005bc8 <HAL_FLASH_Program>
 800191e:	4603      	mov	r3, r0
 8001920:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return flashstatus;
 8001922:	7cfb      	ldrb	r3, [r7, #19]
 8001924:	b29b      	uxth	r3, r3
 8001926:	e007      	b.n	8001938 <EE_VerifyPageFullWriteVariable+0xa8>
    }
    else
    {
      /* Next address location */
      address = address + 4;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3304      	adds	r3, #4
 800192c:	617b      	str	r3, [r7, #20]
  while (address < pageendaddress)
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	429a      	cmp	r2, r3
 8001934:	d3d3      	bcc.n	80018de <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001936:	2380      	movs	r3, #128	; 0x80
}
 8001938:	4618      	mov	r0, r3
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}
 8001940:	08008000 	.word	0x08008000
 8001944:	08008400 	.word	0x08008400
 8001948:	08007fff 	.word	0x08007fff

0800194c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	460a      	mov	r2, r1
 8001956:	80fb      	strh	r3, [r7, #6]
 8001958:	4613      	mov	r3, r2
 800195a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef flashstatus = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t newpageaddress = EEPROM_START_ADDRESS;
 8001962:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <EE_PageTransfer+0x164>)
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t oldpageid = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t validpage = PAGE0, varidx = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	847b      	strh	r3, [r7, #34]	; 0x22
 800196e:	2300      	movs	r3, #0
 8001970:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t eepromstatus = 0, readstatus = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	843b      	strh	r3, [r7, #32]
 8001976:	2300      	movs	r3, #0
 8001978:	83fb      	strh	r3, [r7, #30]
  uint32_t page_error = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef s_eraseinit;

  /* Get active Page for read operation */
  validpage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800197e:	2000      	movs	r0, #0
 8001980:	f7ff ff42 	bl	8001808 <EE_FindValidPage>
 8001984:	4603      	mov	r3, r0
 8001986:	847b      	strh	r3, [r7, #34]	; 0x22

  if (validpage == PAGE1)       /* Page1 valid */
 8001988:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800198a:	2b40      	cmp	r3, #64	; 0x40
 800198c:	d104      	bne.n	8001998 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    newpageaddress = PAGE0_BASE_ADDRESS;
 800198e:	4b48      	ldr	r3, [pc, #288]	; (8001ab0 <EE_PageTransfer+0x164>)
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE1_ID;
 8001992:	4b48      	ldr	r3, [pc, #288]	; (8001ab4 <EE_PageTransfer+0x168>)
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
 8001996:	e009      	b.n	80019ac <EE_PageTransfer+0x60>
  }
  else if (validpage == PAGE0)  /* Page0 valid */
 8001998:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800199a:	2b00      	cmp	r3, #0
 800199c:	d104      	bne.n	80019a8 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    newpageaddress = PAGE1_BASE_ADDRESS;
 800199e:	4b45      	ldr	r3, [pc, #276]	; (8001ab4 <EE_PageTransfer+0x168>)
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    oldpageid = PAGE0_ID;
 80019a2:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <EE_PageTransfer+0x164>)
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a6:	e001      	b.n	80019ac <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 80019a8:	23ab      	movs	r3, #171	; 0xab
 80019aa:	e07c      	b.n	8001aa6 <EE_PageTransfer+0x15a>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, RECEIVE_DATA);  
 80019ac:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019b6:	2001      	movs	r0, #1
 80019b8:	f004 f906 	bl	8005bc8 <HAL_FLASH_Program>
 80019bc:	4603      	mov	r3, r0
 80019be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 80019c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <EE_PageTransfer+0x86>
  {
    return flashstatus;
 80019ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	e069      	b.n	8001aa6 <EE_PageTransfer+0x15a>
  }
  
  /* Write the variable passed as parameter in the new active page */
  eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80019d2:	88ba      	ldrh	r2, [r7, #4]
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff59 	bl	8001890 <EE_VerifyPageFullWriteVariable>
 80019de:	4603      	mov	r3, r0
 80019e0:	843b      	strh	r3, [r7, #32]
  /* If program operation was failed, a Flash error code is returned */
  if (eepromstatus != HAL_OK)
 80019e2:	8c3b      	ldrh	r3, [r7, #32]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <EE_PageTransfer+0xa0>
  {
    return eepromstatus;
 80019e8:	8c3b      	ldrh	r3, [r7, #32]
 80019ea:	e05c      	b.n	8001aa6 <EE_PageTransfer+0x15a>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 80019ec:	2300      	movs	r3, #0
 80019ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80019f0:	e027      	b.n	8001a42 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[varidx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 80019f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019f4:	4a30      	ldr	r2, [pc, #192]	; (8001ab8 <EE_PageTransfer+0x16c>)
 80019f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019fa:	88fa      	ldrh	r2, [r7, #6]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d01d      	beq.n	8001a3c <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      readstatus = EE_ReadVariable(VirtAddVarTab[varidx], &DataVar);
 8001a00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a02:	4a2d      	ldr	r2, [pc, #180]	; (8001ab8 <EE_PageTransfer+0x16c>)
 8001a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a08:	492c      	ldr	r1, [pc, #176]	; (8001abc <EE_PageTransfer+0x170>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fe40 	bl	8001690 <EE_ReadVariable>
 8001a10:	4603      	mov	r3, r0
 8001a12:	83fb      	strh	r3, [r7, #30]
      /* In case variable corresponding to the virtual address was found */
      if (readstatus != 0x1)
 8001a14:	8bfb      	ldrh	r3, [r7, #30]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d010      	beq.n	8001a3c <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        eepromstatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[varidx], DataVar);
 8001a1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a1c:	4a26      	ldr	r2, [pc, #152]	; (8001ab8 <EE_PageTransfer+0x16c>)
 8001a1e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <EE_PageTransfer+0x170>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	4619      	mov	r1, r3
 8001a28:	4610      	mov	r0, r2
 8001a2a:	f7ff ff31 	bl	8001890 <EE_VerifyPageFullWriteVariable>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	843b      	strh	r3, [r7, #32]
        /* If program operation was failed, a Flash error code is returned */
        if (eepromstatus != HAL_OK)
 8001a32:	8c3b      	ldrh	r3, [r7, #32]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <EE_PageTransfer+0xf0>
        {
          return eepromstatus;
 8001a38:	8c3b      	ldrh	r3, [r7, #32]
 8001a3a:	e034      	b.n	8001aa6 <EE_PageTransfer+0x15a>
  for (varidx = 0; varidx < NB_OF_VAR; varidx++)
 8001a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a3e:	3301      	adds	r3, #1
 8001a40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d9d4      	bls.n	80019f2 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
  s_eraseinit.PageAddress = oldpageid;
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4e:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = 1;
 8001a50:	2301      	movs	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  flashstatus = HAL_FLASHEx_Erase(&s_eraseinit, &page_error);  
 8001a54:	f107 0218 	add.w	r2, r7, #24
 8001a58:	f107 0308 	add.w	r3, r7, #8
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f004 fa0a 	bl	8005e78 <HAL_FLASHEx_Erase>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If erase operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8001a6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <EE_PageTransfer+0x12e>
  {
    return flashstatus;
 8001a72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	e015      	b.n	8001aa6 <EE_PageTransfer+0x15a>
  }

  /* Set new Page status to VALID_PAGE status */
  flashstatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, newpageaddress, VALID_PAGE);   
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a84:	2001      	movs	r0, #1
 8001a86:	f004 f89f 	bl	8005bc8 <HAL_FLASH_Program>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  /* If program operation was failed, a Flash error code is returned */
  if (flashstatus != HAL_OK)
 8001a90:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <EE_PageTransfer+0x154>
  {
    return flashstatus;
 8001a98:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	e002      	b.n	8001aa6 <EE_PageTransfer+0x15a>
  }
  
  

  /* Return last operation flash status */
  return flashstatus;
 8001aa0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001aa4:	b29b      	uxth	r3, r3
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3730      	adds	r7, #48	; 0x30
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	08008000 	.word	0x08008000
 8001ab4:	08018000 	.word	0x08018000
 8001ab8:	20000010 	.word	0x20000010
 8001abc:	20000224 	.word	0x20000224

08001ac0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad4:	4b48      	ldr	r3, [pc, #288]	; (8001bf8 <MX_GPIO_Init+0x138>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a47      	ldr	r2, [pc, #284]	; (8001bf8 <MX_GPIO_Init+0x138>)
 8001ada:	f043 0310 	orr.w	r3, r3, #16
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b45      	ldr	r3, [pc, #276]	; (8001bf8 <MX_GPIO_Init+0x138>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aec:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <MX_GPIO_Init+0x138>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a41      	ldr	r2, [pc, #260]	; (8001bf8 <MX_GPIO_Init+0x138>)
 8001af2:	f043 0320 	orr.w	r3, r3, #32
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <MX_GPIO_Init+0x138>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0320 	and.w	r3, r3, #32
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <MX_GPIO_Init+0x138>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a3b      	ldr	r2, [pc, #236]	; (8001bf8 <MX_GPIO_Init+0x138>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <MX_GPIO_Init+0x138>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <MX_GPIO_Init+0x138>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	4a35      	ldr	r2, [pc, #212]	; (8001bf8 <MX_GPIO_Init+0x138>)
 8001b22:	f043 0308 	orr.w	r3, r3, #8
 8001b26:	6193      	str	r3, [r2, #24]
 8001b28:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <MX_GPIO_Init+0x138>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3a:	4830      	ldr	r0, [pc, #192]	; (8001bfc <MX_GPIO_Init+0x13c>)
 8001b3c:	f004 fbb5 	bl	80062aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIG_OUT_1_Pin|DIG_OUT_2_Pin|DIG_OUT_3_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	211c      	movs	r1, #28
 8001b44:	482e      	ldr	r0, [pc, #184]	; (8001c00 <MX_GPIO_Init+0x140>)
 8001b46:	f004 fbb0 	bl	80062aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGER3_ENABLE_Pin|CHARGER2_ENABLE_Pin|CHARGER1_ENABLE_Pin|EVSE_ACTIVATE_Pin 
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f24f 01e0 	movw	r1, #61664	; 0xf0e0
 8001b50:	482c      	ldr	r0, [pc, #176]	; (8001c04 <MX_GPIO_Init+0x144>)
 8001b52:	f004 fbaa 	bl	80062aa <HAL_GPIO_WritePin>
                          |CHARGER1_ACTIVATE_Pin|CHARGER2_ACTIVATE_Pin|CHARGER3_ACTIVATE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8001b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 0310 	add.w	r3, r7, #16
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4823      	ldr	r0, [pc, #140]	; (8001bfc <MX_GPIO_Init+0x13c>)
 8001b70:	f004 fa2a 	bl	8005fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DIG_OUT_1_Pin|DIG_OUT_2_Pin|DIG_OUT_3_Pin;
 8001b74:	231c      	movs	r3, #28
 8001b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4619      	mov	r1, r3
 8001b8a:	481d      	ldr	r0, [pc, #116]	; (8001c00 <MX_GPIO_Init+0x140>)
 8001b8c:	f004 fa1c 	bl	8005fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EVSE_PILOT_Pin;
 8001b90:	2340      	movs	r3, #64	; 0x40
 8001b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <MX_GPIO_Init+0x148>)
 8001b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EVSE_PILOT_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4817      	ldr	r0, [pc, #92]	; (8001c00 <MX_GPIO_Init+0x140>)
 8001ba4:	f004 fa10 	bl	8005fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CHARGER3_ENABLE_Pin|CHARGER2_ENABLE_Pin|CHARGER1_ENABLE_Pin|EVSE_ACTIVATE_Pin 
 8001ba8:	f24f 03e0 	movw	r3, #61664	; 0xf0e0
 8001bac:	613b      	str	r3, [r7, #16]
                          |CHARGER1_ACTIVATE_Pin|CHARGER2_ACTIVATE_Pin|CHARGER3_ACTIVATE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4810      	ldr	r0, [pc, #64]	; (8001c04 <MX_GPIO_Init+0x144>)
 8001bc2:	f004 fa01 	bl	8005fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIG_IN_1_Pin|DIG_IN_2_Pin;
 8001bc6:	2318      	movs	r3, #24
 8001bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	f107 0310 	add.w	r3, r7, #16
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480a      	ldr	r0, [pc, #40]	; (8001c04 <MX_GPIO_Init+0x144>)
 8001bda:	f004 f9f5 	bl	8005fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	2017      	movs	r0, #23
 8001be4:	f003 ffb9 	bl	8005b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001be8:	2017      	movs	r0, #23
 8001bea:	f003 ffd2 	bl	8005b92 <HAL_NVIC_EnableIRQ>

}
 8001bee:	bf00      	nop
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	40010800 	.word	0x40010800
 8001c04:	40010c00 	.word	0x40010c00
 8001c08:	10310000 	.word	0x10310000

08001c0c <main>:
void DCcurrentlimit(void);
void ACcurrentlimit(void);


int main(void)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0

	dcaclim = maxaccur;
 8001c12:	4bb9      	ldr	r3, [pc, #740]	; (8001ef8 <main+0x2ec>)
 8001c14:	881a      	ldrh	r2, [r3, #0]
 8001c16:	4bb9      	ldr	r3, [pc, #740]	; (8001efc <main+0x2f0>)
 8001c18:	801a      	strh	r2, [r3, #0]
	bChargerEnabled = false; //are we supposed to command the charger to charge?
 8001c1a:	4bb9      	ldr	r3, [pc, #740]	; (8001f00 <main+0x2f4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c20:	f002 fe16 	bl	8004850 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001c24:	f000 fcc0 	bl	80025a8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c28:	f7ff ff4a 	bl	8001ac0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001c2c:	f7ff fa20 	bl	8001070 <MX_ADC1_Init>
  MX_CAN_Init();
 8001c30:	f7ff fa98 	bl	8001164 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001c34:	f002 fcca 	bl	80045cc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c38:	f002 fcf2 	bl	8004620 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8001c3c:	f002 fda2 	bl	8004784 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8001c40:	f002 fa36 	bl	80040b0 <MX_RTC_Init>
  MX_TIM3_Init();
 8001c44:	f002 fbe4 	bl	8004410 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c48:	f002 fc30 	bl	80044ac <MX_TIM4_Init>
  EE_Init();
 8001c4c:	f7ff fb20 	bl	8001290 <EE_Init>
  EEPROM_Read(&parameters);
 8001c50:	48ac      	ldr	r0, [pc, #688]	; (8001f04 <main+0x2f8>)
 8001c52:	f000 fe91 	bl	8002978 <EEPROM_Read>
  if (parameters.version != EEPROM_VERSION)
 8001c56:	4bab      	ldr	r3, [pc, #684]	; (8001f04 <main+0x2f8>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b0b      	cmp	r3, #11
 8001c5c:	d029      	beq.n	8001cb2 <main+0xa6>
  {
	  parameters.version = EEPROM_VERSION;
 8001c5e:	4ba9      	ldr	r3, [pc, #676]	; (8001f04 <main+0x2f8>)
 8001c60:	220b      	movs	r2, #11
 8001c62:	701a      	strb	r2, [r3, #0]
	  parameters.currReq = 0; //max input limit per module 1500 = 1A
 8001c64:	4ba7      	ldr	r3, [pc, #668]	; (8001f04 <main+0x2f8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	819a      	strh	r2, [r3, #12]
	  parameters.enabledChargers = 123; // enable per phase - 123 is all phases - 3 is just phase 3
 8001c6a:	4ba6      	ldr	r3, [pc, #664]	; (8001f04 <main+0x2f8>)
 8001c6c:	227b      	movs	r2, #123	; 0x7b
 8001c6e:	705a      	strb	r2, [r3, #1]
	  parameters.can0Speed = 500000;
 8001c70:	4ba4      	ldr	r3, [pc, #656]	; (8001f04 <main+0x2f8>)
 8001c72:	4aa5      	ldr	r2, [pc, #660]	; (8001f08 <main+0x2fc>)
 8001c74:	611a      	str	r2, [r3, #16]
	  parameters.mainsRelay = 48;
 8001c76:	4ba3      	ldr	r3, [pc, #652]	; (8001f04 <main+0x2f8>)
 8001c78:	2230      	movs	r2, #48	; 0x30
 8001c7a:	709a      	strb	r2, [r3, #2]
	  parameters.voltSet = 32000; //1 = 0.01V
 8001c7c:	4ba1      	ldr	r3, [pc, #644]	; (8001f04 <main+0x2f8>)
 8001c7e:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001c82:	811a      	strh	r2, [r3, #8]
	  parameters.tVolt = 34000;//1 = 0.01V
 8001c84:	4b9f      	ldr	r3, [pc, #636]	; (8001f04 <main+0x2f8>)
 8001c86:	f248 42d0 	movw	r2, #34000	; 0x84d0
 8001c8a:	815a      	strh	r2, [r3, #10]
	  parameters.autoEnableCharger = 0; //disable auto start, proximity and pilot control
 8001c8c:	4b9d      	ldr	r3, [pc, #628]	; (8001f04 <main+0x2f8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	70da      	strb	r2, [r3, #3]
	  parameters.canControl = 0; //0 disabled can control, 1 master, 3 slave
 8001c92:	4b9c      	ldr	r3, [pc, #624]	; (8001f04 <main+0x2f8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	711a      	strb	r2, [r3, #4]
	  parameters.dcdcsetpoint = 14000; //voltage setpoint for dcdc in mv
 8001c98:	4b9a      	ldr	r3, [pc, #616]	; (8001f04 <main+0x2f8>)
 8001c9a:	f243 62b0 	movw	r2, #14000	; 0x36b0
 8001c9e:	829a      	strh	r2, [r3, #20]
	  parameters.phaseconfig = Threephase; //AC input configuration
 8001ca0:	4b98      	ldr	r3, [pc, #608]	; (8001f04 <main+0x2f8>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	719a      	strb	r2, [r3, #6]
	  parameters.type = 2; //Socket type1 or 2
 8001ca6:	4b97      	ldr	r3, [pc, #604]	; (8001f04 <main+0x2f8>)
 8001ca8:	2202      	movs	r2, #2
 8001caa:	715a      	strb	r2, [r3, #5]
	  EEPROM_Write(&parameters);
 8001cac:	4895      	ldr	r0, [pc, #596]	; (8001f04 <main+0x2f8>)
 8001cae:	f000 fedf 	bl	8002a70 <EEPROM_Write>
  }
  if(Can_Init()){
 8001cb2:	f000 ff65 	bl	8002b80 <Can_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <main+0xb8>
	  printf("Using CAN - initialization completed.\r\n");
 8001cbc:	4893      	ldr	r0, [pc, #588]	; (8001f0c <main+0x300>)
 8001cbe:	f007 f915 	bl	8008eec <puts>
 8001cc2:	e002      	b.n	8001cca <main+0xbe>
  }
  else{
	  printf("CAN initialization (sync) ERROR\r\n");
 8001cc4:	4892      	ldr	r0, [pc, #584]	; (8001f10 <main+0x304>)
 8001cc6:	f007 f911 	bl	8008eec <puts>
  }
  HAL_ADC_Start(&hadc1);
 8001cca:	4892      	ldr	r0, [pc, #584]	; (8001f14 <main+0x308>)
 8001ccc:	f002 ff1c 	bl	8004b08 <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001cd0:	4891      	ldr	r0, [pc, #580]	; (8001f18 <main+0x30c>)
 8001cd2:	f005 fd50 	bl	8007776 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  while (1)
  {
	if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) >= 1)
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4890      	ldr	r0, [pc, #576]	; (8001f1c <main+0x310>)
 8001cda:	f003 fe40 	bl	800595e <HAL_CAN_GetRxFifoFillLevel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <main+0xec>
	{
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &myRxMessage, CanRxData);
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <main+0x314>)
 8001ce6:	4a8f      	ldr	r2, [pc, #572]	; (8001f24 <main+0x318>)
 8001ce8:	2100      	movs	r1, #0
 8001cea:	488c      	ldr	r0, [pc, #560]	; (8001f1c <main+0x310>)
 8001cec:	f003 fd26 	bl	800573c <HAL_CAN_GetRxMessage>
		candecode(&myRxMessage,CanRxData);
 8001cf0:	498b      	ldr	r1, [pc, #556]	; (8001f20 <main+0x314>)
 8001cf2:	488c      	ldr	r0, [pc, #560]	; (8001f24 <main+0x318>)
 8001cf4:	f000 ffa8 	bl	8002c48 <candecode>
	}
	if(HAL_UART_Receive(&huart1, &incomingByte, 1, 5)==HAL_OK){
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	498a      	ldr	r1, [pc, #552]	; (8001f28 <main+0x31c>)
 8001cfe:	488b      	ldr	r0, [pc, #556]	; (8001f2c <main+0x320>)
 8001d00:	f006 f99e 	bl	8008040 <HAL_UART_Receive>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <main+0x102>
		menu();
 8001d0a:	f001 fa95 	bl	8003238 <menu>
	}
	if (parameters.canControl > 1)
 8001d0e:	4b7d      	ldr	r3, [pc, #500]	; (8001f04 <main+0x2f8>)
 8001d10:	791b      	ldrb	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d912      	bls.n	8001d3c <main+0x130>
	{
		if (state != 0)
 8001d16:	4b86      	ldr	r3, [pc, #536]	; (8001f30 <main+0x324>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00e      	beq.n	8001d3c <main+0x130>
	    {
			if (millis() - tcan > 2000)
 8001d1e:	f001 fe41 	bl	80039a4 <millis>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b83      	ldr	r3, [pc, #524]	; (8001f34 <main+0x328>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d2e:	d905      	bls.n	8001d3c <main+0x130>
			{
				state = 0;
 8001d30:	4b7f      	ldr	r3, [pc, #508]	; (8001f30 <main+0x324>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
				printf("CAN time-out\r\n");
 8001d36:	4880      	ldr	r0, [pc, #512]	; (8001f38 <main+0x32c>)
 8001d38:	f007 f8d8 	bl	8008eec <puts>
	      }
	    }
	}
	if(HAL_GPIO_ReadPin(DIG_IN_1_GPIO_Port, DIG_IN_1_Pin)==GPIO_PIN_RESET){
 8001d3c:	2108      	movs	r1, #8
 8001d3e:	487f      	ldr	r0, [pc, #508]	; (8001f3c <main+0x330>)
 8001d40:	f004 fa9c 	bl	800627c <HAL_GPIO_ReadPin>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d102      	bne.n	8001d50 <main+0x144>
		state = 0;
 8001d4a:	4b79      	ldr	r3, [pc, #484]	; (8001f30 <main+0x324>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
	}
	switch (state)
 8001d50:	4b77      	ldr	r3, [pc, #476]	; (8001f30 <main+0x324>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d041      	beq.n	8001ddc <main+0x1d0>
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	f000 80fe 	beq.w	8001f5a <main+0x34e>
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d000      	beq.n	8001d64 <main+0x158>
	            state = 1;
	        }
	        break;
	        default:
	          // if nothing else matches, do the default
	        	break;
 8001d62:	e175      	b.n	8002050 <main+0x444>
			HAL_TIM_Base_Stop_IT(&htim3);
 8001d64:	4876      	ldr	r0, [pc, #472]	; (8001f40 <main+0x334>)
 8001d66:	f005 fd29 	bl	80077bc <HAL_TIM_Base_Stop_IT>
			if (bChargerEnabled == true)
 8001d6a:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <main+0x2f4>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <main+0x16c>
			bChargerEnabled = false;
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <main+0x2f4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DIG_OUT_1_GPIO_Port, DIG_OUT_1_Pin, GPIO_PIN_RESET);//HV OFF
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4871      	ldr	r0, [pc, #452]	; (8001f44 <main+0x338>)
 8001d7e:	f004 fa94 	bl	80062aa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EVSE_ACTIVATE_GPIO_Port, EVSE_ACTIVATE_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d88:	486c      	ldr	r0, [pc, #432]	; (8001f3c <main+0x330>)
 8001d8a:	f004 fa8e 	bl	80062aa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DIG_OUT_2_GPIO_Port, DIG_OUT_2_Pin, GPIO_PIN_RESET);//AC OFF when in manual mode.
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2108      	movs	r1, #8
 8001d92:	486c      	ldr	r0, [pc, #432]	; (8001f44 <main+0x338>)
 8001d94:	f004 fa89 	bl	80062aa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CHARGER1_ACTIVATE_GPIO_Port, CHARGER1_ACTIVATE_Pin, GPIO_PIN_RESET);//chargeph1 deactivate
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2120      	movs	r1, #32
 8001d9c:	4867      	ldr	r0, [pc, #412]	; (8001f3c <main+0x330>)
 8001d9e:	f004 fa84 	bl	80062aa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CHARGER2_ACTIVATE_GPIO_Port, CHARGER2_ACTIVATE_Pin, GPIO_PIN_RESET);//chargeph2 deactivate
 8001da2:	2200      	movs	r2, #0
 8001da4:	2140      	movs	r1, #64	; 0x40
 8001da6:	4865      	ldr	r0, [pc, #404]	; (8001f3c <main+0x330>)
 8001da8:	f004 fa7f 	bl	80062aa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CHARGER3_ACTIVATE_GPIO_Port, CHARGER3_ACTIVATE_Pin, GPIO_PIN_RESET);//chargeph3 deactivate
 8001dac:	2200      	movs	r2, #0
 8001dae:	2180      	movs	r1, #128	; 0x80
 8001db0:	4862      	ldr	r0, [pc, #392]	; (8001f3c <main+0x330>)
 8001db2:	f004 fa7a 	bl	80062aa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CHARGER1_ENABLE_GPIO_Port, CHARGER1_ENABLE_Pin, GPIO_PIN_RESET);//disable phase 1 power module
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dbc:	485f      	ldr	r0, [pc, #380]	; (8001f3c <main+0x330>)
 8001dbe:	f004 fa74 	bl	80062aa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CHARGER2_ENABLE_GPIO_Port, CHARGER2_ENABLE_Pin, GPIO_PIN_RESET);//disable phase 2 power module
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc8:	485c      	ldr	r0, [pc, #368]	; (8001f3c <main+0x330>)
 8001dca:	f004 fa6e 	bl	80062aa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CHARGER3_ENABLE_GPIO_Port, CHARGER3_ENABLE_Pin, GPIO_PIN_RESET);//disable phase 3 power module
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dd4:	4859      	ldr	r0, [pc, #356]	; (8001f3c <main+0x330>)
 8001dd6:	f004 fa68 	bl	80062aa <HAL_GPIO_WritePin>
			break;
 8001dda:	e139      	b.n	8002050 <main+0x444>
	    	if(HAL_GPIO_ReadPin(DIG_IN_1_GPIO_Port, DIG_IN_1_Pin)==GPIO_PIN_SET)
 8001ddc:	2108      	movs	r1, #8
 8001dde:	4857      	ldr	r0, [pc, #348]	; (8001f3c <main+0x330>)
 8001de0:	f004 fa4c 	bl	800627c <HAL_GPIO_ReadPin>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	f040 80b0 	bne.w	8001f4c <main+0x340>
	            if (bChargerEnabled == false)
 8001dec:	4b44      	ldr	r3, [pc, #272]	; (8001f00 <main+0x2f4>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	f083 0301 	eor.w	r3, r3, #1
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8127 	beq.w	800204a <main+0x43e>
	              bChargerEnabled = true;
 8001dfc:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <main+0x2f4>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
	              switch (parameters.enabledChargers)
 8001e02:	4b40      	ldr	r3, [pc, #256]	; (8001f04 <main+0x2f8>)
 8001e04:	785b      	ldrb	r3, [r3, #1]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d02a      	beq.n	8001e60 <main+0x254>
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	dc06      	bgt.n	8001e1c <main+0x210>
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d014      	beq.n	8001e3c <main+0x230>
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d01b      	beq.n	8001e4e <main+0x242>
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d007      	beq.n	8001e2a <main+0x21e>
	                	break;
 8001e1a:	e05e      	b.n	8001eda <main+0x2ce>
	              switch (parameters.enabledChargers)
 8001e1c:	2b17      	cmp	r3, #23
 8001e1e:	d04e      	beq.n	8001ebe <main+0x2b2>
 8001e20:	2b7b      	cmp	r3, #123	; 0x7b
 8001e22:	d039      	beq.n	8001e98 <main+0x28c>
 8001e24:	2b0d      	cmp	r3, #13
 8001e26:	d029      	beq.n	8001e7c <main+0x270>
	                	break;
 8001e28:	e057      	b.n	8001eda <main+0x2ce>
	                	HAL_GPIO_WritePin(CHARGER1_ACTIVATE_GPIO_Port, CHARGER1_ACTIVATE_Pin, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	4843      	ldr	r0, [pc, #268]	; (8001f3c <main+0x330>)
 8001e30:	f004 fa3b 	bl	80062aa <HAL_GPIO_WritePin>
	                	activemodules = 1;
 8001e34:	4b44      	ldr	r3, [pc, #272]	; (8001f48 <main+0x33c>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
	                	break;
 8001e3a:	e04e      	b.n	8001eda <main+0x2ce>
	                	HAL_GPIO_WritePin(CHARGER2_ACTIVATE_GPIO_Port, CHARGER2_ACTIVATE_Pin, GPIO_PIN_SET);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2140      	movs	r1, #64	; 0x40
 8001e40:	483e      	ldr	r0, [pc, #248]	; (8001f3c <main+0x330>)
 8001e42:	f004 fa32 	bl	80062aa <HAL_GPIO_WritePin>
	                	activemodules = 1;
 8001e46:	4b40      	ldr	r3, [pc, #256]	; (8001f48 <main+0x33c>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
	                	break;
 8001e4c:	e045      	b.n	8001eda <main+0x2ce>
	                	HAL_GPIO_WritePin(CHARGER3_ACTIVATE_GPIO_Port, CHARGER3_ACTIVATE_Pin, GPIO_PIN_SET);
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2180      	movs	r1, #128	; 0x80
 8001e52:	483a      	ldr	r0, [pc, #232]	; (8001f3c <main+0x330>)
 8001e54:	f004 fa29 	bl	80062aa <HAL_GPIO_WritePin>
	                	activemodules = 1;
 8001e58:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <main+0x33c>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
	                 	break;
 8001e5e:	e03c      	b.n	8001eda <main+0x2ce>
	                	HAL_GPIO_WritePin(CHARGER1_ACTIVATE_GPIO_Port, CHARGER1_ACTIVATE_Pin, GPIO_PIN_SET);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2120      	movs	r1, #32
 8001e64:	4835      	ldr	r0, [pc, #212]	; (8001f3c <main+0x330>)
 8001e66:	f004 fa20 	bl	80062aa <HAL_GPIO_WritePin>
	                	HAL_GPIO_WritePin(CHARGER2_ACTIVATE_GPIO_Port, CHARGER2_ACTIVATE_Pin, GPIO_PIN_SET);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2140      	movs	r1, #64	; 0x40
 8001e6e:	4833      	ldr	r0, [pc, #204]	; (8001f3c <main+0x330>)
 8001e70:	f004 fa1b 	bl	80062aa <HAL_GPIO_WritePin>
	                	activemodules = 2;
 8001e74:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <main+0x33c>)
 8001e76:	2202      	movs	r2, #2
 8001e78:	601a      	str	r2, [r3, #0]
	                	break;
 8001e7a:	e02e      	b.n	8001eda <main+0x2ce>
	                	HAL_GPIO_WritePin(CHARGER1_ACTIVATE_GPIO_Port, CHARGER1_ACTIVATE_Pin, GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	2120      	movs	r1, #32
 8001e80:	482e      	ldr	r0, [pc, #184]	; (8001f3c <main+0x330>)
 8001e82:	f004 fa12 	bl	80062aa <HAL_GPIO_WritePin>
	                	HAL_GPIO_WritePin(CHARGER3_ACTIVATE_GPIO_Port, CHARGER3_ACTIVATE_Pin, GPIO_PIN_SET);
 8001e86:	2201      	movs	r2, #1
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	482c      	ldr	r0, [pc, #176]	; (8001f3c <main+0x330>)
 8001e8c:	f004 fa0d 	bl	80062aa <HAL_GPIO_WritePin>
	                	activemodules = 2;
 8001e90:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <main+0x33c>)
 8001e92:	2202      	movs	r2, #2
 8001e94:	601a      	str	r2, [r3, #0]
	                	break;
 8001e96:	e020      	b.n	8001eda <main+0x2ce>
	                	HAL_GPIO_WritePin(CHARGER1_ACTIVATE_GPIO_Port, CHARGER1_ACTIVATE_Pin, GPIO_PIN_SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2120      	movs	r1, #32
 8001e9c:	4827      	ldr	r0, [pc, #156]	; (8001f3c <main+0x330>)
 8001e9e:	f004 fa04 	bl	80062aa <HAL_GPIO_WritePin>
	                	HAL_GPIO_WritePin(CHARGER2_ACTIVATE_GPIO_Port, CHARGER2_ACTIVATE_Pin, GPIO_PIN_SET);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2140      	movs	r1, #64	; 0x40
 8001ea6:	4825      	ldr	r0, [pc, #148]	; (8001f3c <main+0x330>)
 8001ea8:	f004 f9ff 	bl	80062aa <HAL_GPIO_WritePin>
	                	HAL_GPIO_WritePin(CHARGER3_ACTIVATE_GPIO_Port, CHARGER3_ACTIVATE_Pin, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	4822      	ldr	r0, [pc, #136]	; (8001f3c <main+0x330>)
 8001eb2:	f004 f9fa 	bl	80062aa <HAL_GPIO_WritePin>
	                	activemodules = 3;
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <main+0x33c>)
 8001eb8:	2203      	movs	r2, #3
 8001eba:	601a      	str	r2, [r3, #0]
	                	break;
 8001ebc:	e00d      	b.n	8001eda <main+0x2ce>
	                	HAL_GPIO_WritePin(CHARGER2_ACTIVATE_GPIO_Port, CHARGER2_ACTIVATE_Pin, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2140      	movs	r1, #64	; 0x40
 8001ec2:	481e      	ldr	r0, [pc, #120]	; (8001f3c <main+0x330>)
 8001ec4:	f004 f9f1 	bl	80062aa <HAL_GPIO_WritePin>
	                	HAL_GPIO_WritePin(CHARGER3_ACTIVATE_GPIO_Port, CHARGER3_ACTIVATE_Pin, GPIO_PIN_SET);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2180      	movs	r1, #128	; 0x80
 8001ecc:	481b      	ldr	r0, [pc, #108]	; (8001f3c <main+0x330>)
 8001ece:	f004 f9ec 	bl	80062aa <HAL_GPIO_WritePin>
	                	activemodules = 2;
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <main+0x33c>)
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	601a      	str	r2, [r3, #0]
	                	break;
 8001ed8:	bf00      	nop
	              delay(100);
 8001eda:	2064      	movs	r0, #100	; 0x64
 8001edc:	f001 fd8a 	bl	80039f4 <delay>
	              HAL_GPIO_WritePin(EVSE_ACTIVATE_GPIO_Port, EVSE_ACTIVATE_Pin, GPIO_PIN_SET);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ee6:	4815      	ldr	r0, [pc, #84]	; (8001f3c <main+0x330>)
 8001ee8:	f004 f9df 	bl	80062aa <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(DIG_OUT_2_GPIO_Port, DIG_IN_2_Pin, GPIO_PIN_SET);
 8001eec:	2201      	movs	r2, #1
 8001eee:	2110      	movs	r1, #16
 8001ef0:	4814      	ldr	r0, [pc, #80]	; (8001f44 <main+0x338>)
 8001ef2:	f004 f9da 	bl	80062aa <HAL_GPIO_WritePin>
		  break;
 8001ef6:	e0a8      	b.n	800204a <main+0x43e>
 8001ef8:	2000000a 	.word	0x2000000a
 8001efc:	2000023a 	.word	0x2000023a
 8001f00:	2000035a 	.word	0x2000035a
 8001f04:	2000033c 	.word	0x2000033c
 8001f08:	0007a120 	.word	0x0007a120
 8001f0c:	0800b1b4 	.word	0x0800b1b4
 8001f10:	0800b1dc 	.word	0x0800b1dc
 8001f14:	2000029c 	.word	0x2000029c
 8001f18:	200003dc 	.word	0x200003dc
 8001f1c:	200002cc 	.word	0x200002cc
 8001f20:	2000036c 	.word	0x2000036c
 8001f24:	20000304 	.word	0x20000304
 8001f28:	20000226 	.word	0x20000226
 8001f2c:	2000049c 	.word	0x2000049c
 8001f30:	200002fc 	.word	0x200002fc
 8001f34:	20000354 	.word	0x20000354
 8001f38:	0800b200 	.word	0x0800b200
 8001f3c:	40010c00 	.word	0x40010c00
 8001f40:	2000041c 	.word	0x2000041c
 8001f44:	40010800 	.word	0x40010800
 8001f48:	200002f4 	.word	0x200002f4
	    		bChargerEnabled = false;
 8001f4c:	4b72      	ldr	r3, [pc, #456]	; (8002118 <main+0x50c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
	            state = 0;
 8001f52:	4b72      	ldr	r3, [pc, #456]	; (800211c <main+0x510>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
		  break;
 8001f58:	e077      	b.n	800204a <main+0x43e>
            HAL_GPIO_WritePin(DIG_OUT_1_GPIO_Port, DIG_OUT_1_Pin, GPIO_PIN_SET);//HV ON
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	4870      	ldr	r0, [pc, #448]	; (8002120 <main+0x514>)
 8001f60:	f004 f9a3 	bl	80062aa <HAL_GPIO_WritePin>
            HAL_TIM_Base_Start_IT(&htim3);
 8001f64:	486f      	ldr	r0, [pc, #444]	; (8002124 <main+0x518>)
 8001f66:	f005 fc06 	bl	8007776 <HAL_TIM_Base_Start_IT>
	        switch (parameters.enabledChargers)
 8001f6a:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <main+0x51c>)
 8001f6c:	785b      	ldrb	r3, [r3, #1]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d024      	beq.n	8001fbc <main+0x3b0>
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	dc06      	bgt.n	8001f84 <main+0x378>
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d012      	beq.n	8001fa0 <main+0x394>
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d017      	beq.n	8001fae <main+0x3a2>
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d007      	beq.n	8001f92 <main+0x386>
	            	break;
 8001f82:	e055      	b.n	8002030 <main+0x424>
	        switch (parameters.enabledChargers)
 8001f84:	2b17      	cmp	r3, #23
 8001f86:	d046      	beq.n	8002016 <main+0x40a>
 8001f88:	2b7b      	cmp	r3, #123	; 0x7b
 8001f8a:	d031      	beq.n	8001ff0 <main+0x3e4>
 8001f8c:	2b0d      	cmp	r3, #13
 8001f8e:	d022      	beq.n	8001fd6 <main+0x3ca>
	            	break;
 8001f90:	e04e      	b.n	8002030 <main+0x424>
                	HAL_GPIO_WritePin(CHARGER1_ENABLE_GPIO_Port, CHARGER1_ENABLE_Pin, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f98:	4864      	ldr	r0, [pc, #400]	; (800212c <main+0x520>)
 8001f9a:	f004 f986 	bl	80062aa <HAL_GPIO_WritePin>
                	break;
 8001f9e:	e047      	b.n	8002030 <main+0x424>
                	HAL_GPIO_WritePin(CHARGER2_ENABLE_GPIO_Port, CHARGER2_ENABLE_Pin, GPIO_PIN_SET);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fa6:	4861      	ldr	r0, [pc, #388]	; (800212c <main+0x520>)
 8001fa8:	f004 f97f 	bl	80062aa <HAL_GPIO_WritePin>
                	break;
 8001fac:	e040      	b.n	8002030 <main+0x424>
                	HAL_GPIO_WritePin(CHARGER3_ENABLE_GPIO_Port, CHARGER3_ENABLE_Pin, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	485d      	ldr	r0, [pc, #372]	; (800212c <main+0x520>)
 8001fb6:	f004 f978 	bl	80062aa <HAL_GPIO_WritePin>
                	break;
 8001fba:	e039      	b.n	8002030 <main+0x424>
                	HAL_GPIO_WritePin(CHARGER1_ENABLE_GPIO_Port, CHARGER1_ENABLE_Pin, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fc2:	485a      	ldr	r0, [pc, #360]	; (800212c <main+0x520>)
 8001fc4:	f004 f971 	bl	80062aa <HAL_GPIO_WritePin>
                	HAL_GPIO_WritePin(CHARGER2_ENABLE_GPIO_Port, CHARGER2_ENABLE_Pin, GPIO_PIN_SET);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fce:	4857      	ldr	r0, [pc, #348]	; (800212c <main+0x520>)
 8001fd0:	f004 f96b 	bl	80062aa <HAL_GPIO_WritePin>
                	break;
 8001fd4:	e02c      	b.n	8002030 <main+0x424>
                	HAL_GPIO_WritePin(CHARGER1_ENABLE_GPIO_Port, CHARGER1_ENABLE_Pin, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fdc:	4853      	ldr	r0, [pc, #332]	; (800212c <main+0x520>)
 8001fde:	f004 f964 	bl	80062aa <HAL_GPIO_WritePin>
                	HAL_GPIO_WritePin(CHARGER3_ENABLE_GPIO_Port, CHARGER3_ENABLE_Pin, GPIO_PIN_SET);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe8:	4850      	ldr	r0, [pc, #320]	; (800212c <main+0x520>)
 8001fea:	f004 f95e 	bl	80062aa <HAL_GPIO_WritePin>
                	break;
 8001fee:	e01f      	b.n	8002030 <main+0x424>
                	HAL_GPIO_WritePin(CHARGER1_ENABLE_GPIO_Port, CHARGER1_ENABLE_Pin, GPIO_PIN_SET);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ff6:	484d      	ldr	r0, [pc, #308]	; (800212c <main+0x520>)
 8001ff8:	f004 f957 	bl	80062aa <HAL_GPIO_WritePin>
                	HAL_GPIO_WritePin(CHARGER2_ENABLE_GPIO_Port, CHARGER2_ENABLE_Pin, GPIO_PIN_SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002002:	484a      	ldr	r0, [pc, #296]	; (800212c <main+0x520>)
 8002004:	f004 f951 	bl	80062aa <HAL_GPIO_WritePin>
                	HAL_GPIO_WritePin(CHARGER3_ENABLE_GPIO_Port, CHARGER3_ENABLE_Pin, GPIO_PIN_SET);
 8002008:	2201      	movs	r2, #1
 800200a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200e:	4847      	ldr	r0, [pc, #284]	; (800212c <main+0x520>)
 8002010:	f004 f94b 	bl	80062aa <HAL_GPIO_WritePin>
                	break;
 8002014:	e00c      	b.n	8002030 <main+0x424>
                	HAL_GPIO_WritePin(CHARGER2_ENABLE_GPIO_Port, CHARGER2_ENABLE_Pin, GPIO_PIN_SET);
 8002016:	2201      	movs	r2, #1
 8002018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800201c:	4843      	ldr	r0, [pc, #268]	; (800212c <main+0x520>)
 800201e:	f004 f944 	bl	80062aa <HAL_GPIO_WritePin>
                	HAL_GPIO_WritePin(CHARGER3_ENABLE_GPIO_Port, CHARGER3_ENABLE_Pin, GPIO_PIN_SET);
 8002022:	2201      	movs	r2, #1
 8002024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002028:	4840      	ldr	r0, [pc, #256]	; (800212c <main+0x520>)
 800202a:	f004 f93e 	bl	80062aa <HAL_GPIO_WritePin>
                	break;
 800202e:	bf00      	nop
	        if (tboot <  (millis() - 10)) //delay in ms before moving to state 1.
 8002030:	f001 fcb8 	bl	80039a4 <millis>
 8002034:	4603      	mov	r3, r0
 8002036:	f1a3 020a 	sub.w	r2, r3, #10
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <main+0x524>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d905      	bls.n	800204e <main+0x442>
	            state = 1;
 8002042:	4b36      	ldr	r3, [pc, #216]	; (800211c <main+0x510>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]
	        break;
 8002048:	e001      	b.n	800204e <main+0x442>
		  break;
 800204a:	bf00      	nop
 800204c:	e000      	b.n	8002050 <main+0x444>
	        break;
 800204e:	bf00      	nop
	  }
	  if (tlast <  (millis() - 500))
 8002050:	f001 fca8 	bl	80039a4 <millis>
 8002054:	4603      	mov	r3, r0
 8002056:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 800205a:	4b36      	ldr	r3, [pc, #216]	; (8002134 <main+0x528>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	f240 822b 	bls.w	80024ba <main+0x8ae>
	  {
	    tlast = millis();
 8002064:	f001 fc9e 	bl	80039a4 <millis>
 8002068:	4602      	mov	r2, r0
 800206a:	4b32      	ldr	r3, [pc, #200]	; (8002134 <main+0x528>)
 800206c:	601a      	str	r2, [r3, #0]

	    evseread();
 800206e:	f000 fc0d 	bl	800288c <evseread>
	    autoShutdown();
 8002072:	f000 fb77 	bl	8002764 <autoShutdown>

	    manualMode();
 8002076:	f000 fbcf 	bl	8002818 <manualMode>

	    if (debug != 0)
 800207a:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <main+0x52c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8132 	beq.w	80022e8 <main+0x6dc>
	    {
	      printf("\r\n");
 8002084:	482d      	ldr	r0, [pc, #180]	; (800213c <main+0x530>)
 8002086:	f006 ff31 	bl	8008eec <puts>
	      printf("%ld",millis());
 800208a:	f001 fc8b 	bl	80039a4 <millis>
 800208e:	4603      	mov	r3, r0
 8002090:	4619      	mov	r1, r3
 8002092:	482b      	ldr	r0, [pc, #172]	; (8002140 <main+0x534>)
 8002094:	f006 fea2 	bl	8008ddc <iprintf>
	      printf(" State: ");
 8002098:	482a      	ldr	r0, [pc, #168]	; (8002144 <main+0x538>)
 800209a:	f006 fe9f 	bl	8008ddc <iprintf>
	      printf("%d",state);
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <main+0x510>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4619      	mov	r1, r3
 80020a4:	4828      	ldr	r0, [pc, #160]	; (8002148 <main+0x53c>)
 80020a6:	f006 fe99 	bl	8008ddc <iprintf>
	      printf(" Phases : ");
 80020aa:	4828      	ldr	r0, [pc, #160]	; (800214c <main+0x540>)
 80020ac:	f006 fe96 	bl	8008ddc <iprintf>
	      printf("%d",parameters.phaseconfig);
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <main+0x51c>)
 80020b2:	799b      	ldrb	r3, [r3, #6]
 80020b4:	4619      	mov	r1, r3
 80020b6:	4824      	ldr	r0, [pc, #144]	; (8002148 <main+0x53c>)
 80020b8:	f006 fe90 	bl	8008ddc <iprintf>
	      printf(" Modules Avtive : ");
 80020bc:	4824      	ldr	r0, [pc, #144]	; (8002150 <main+0x544>)
 80020be:	f006 fe8d 	bl	8008ddc <iprintf>
	      printf("%d",activemodules);
 80020c2:	4b24      	ldr	r3, [pc, #144]	; (8002154 <main+0x548>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4619      	mov	r1, r3
 80020c8:	481f      	ldr	r0, [pc, #124]	; (8002148 <main+0x53c>)
 80020ca:	f006 fe87 	bl	8008ddc <iprintf>
	      if (bChargerEnabled)
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <main+0x50c>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <main+0x4d2>
	      {
	        printf(" ON  ");
 80020d6:	4820      	ldr	r0, [pc, #128]	; (8002158 <main+0x54c>)
 80020d8:	f006 fe80 	bl	8008ddc <iprintf>
 80020dc:	e002      	b.n	80020e4 <main+0x4d8>
	      }
	      else
	      {
	        printf(" OFF ");
 80020de:	481f      	ldr	r0, [pc, #124]	; (800215c <main+0x550>)
 80020e0:	f006 fe7c 	bl	8008ddc <iprintf>
	      }
	      if (HAL_GPIO_ReadPin(DIG_IN_1_GPIO_Port, DIG_IN_1_Pin)==GPIO_PIN_SET)
 80020e4:	2108      	movs	r1, #8
 80020e6:	4811      	ldr	r0, [pc, #68]	; (800212c <main+0x520>)
 80020e8:	f004 f8c8 	bl	800627c <HAL_GPIO_ReadPin>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d103      	bne.n	80020fa <main+0x4ee>
	      {
	        printf(" D1 H");
 80020f2:	481b      	ldr	r0, [pc, #108]	; (8002160 <main+0x554>)
 80020f4:	f006 fe72 	bl	8008ddc <iprintf>
 80020f8:	e002      	b.n	8002100 <main+0x4f4>
	      }
	      else
	      {
	        printf(" D1 L");
 80020fa:	481a      	ldr	r0, [pc, #104]	; (8002164 <main+0x558>)
 80020fc:	f006 fe6e 	bl	8008ddc <iprintf>
	      }


	      if (bChargerEnabled)
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <main+0x50c>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80e6 	beq.w	80022d6 <main+0x6ca>
	      {
	        printf("\r\n");
 800210a:	480c      	ldr	r0, [pc, #48]	; (800213c <main+0x530>)
 800210c:	f006 feee 	bl	8008eec <puts>
	        for (int x = 0; x < 3; x++)
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	e0da      	b.n	80022cc <main+0x6c0>
 8002116:	bf00      	nop
 8002118:	2000035a 	.word	0x2000035a
 800211c:	200002fc 	.word	0x200002fc
 8002120:	40010800 	.word	0x40010800
 8002124:	2000041c 	.word	0x2000041c
 8002128:	2000033c 	.word	0x2000033c
 800212c:	40010c00 	.word	0x40010c00
 8002130:	20000228 	.word	0x20000228
 8002134:	200002f8 	.word	0x200002f8
 8002138:	20000004 	.word	0x20000004
 800213c:	0800b210 	.word	0x0800b210
 8002140:	0800b214 	.word	0x0800b214
 8002144:	0800b218 	.word	0x0800b218
 8002148:	0800b224 	.word	0x0800b224
 800214c:	0800b228 	.word	0x0800b228
 8002150:	0800b234 	.word	0x0800b234
 8002154:	200002f4 	.word	0x200002f4
 8002158:	0800b248 	.word	0x0800b248
 800215c:	0800b250 	.word	0x0800b250
 8002160:	0800b258 	.word	0x0800b258
 8002164:	0800b260 	.word	0x0800b260
	        {
	          printf("  Phase ");
 8002168:	486f      	ldr	r0, [pc, #444]	; (8002328 <main+0x71c>)
 800216a:	f006 fe37 	bl	8008ddc <iprintf>
	          printf("%d",x + 1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3301      	adds	r3, #1
 8002172:	4619      	mov	r1, r3
 8002174:	486d      	ldr	r0, [pc, #436]	; (800232c <main+0x720>)
 8002176:	f006 fe31 	bl	8008ddc <iprintf>
	          printf(" Feebback //  AC present: ");
 800217a:	486d      	ldr	r0, [pc, #436]	; (8002330 <main+0x724>)
 800217c:	f006 fe2e 	bl	8008ddc <iprintf>
	          printf("%d",ACpres[x]);
 8002180:	4a6c      	ldr	r2, [pc, #432]	; (8002334 <main+0x728>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	4868      	ldr	r0, [pc, #416]	; (800232c <main+0x720>)
 800218c:	f006 fe26 	bl	8008ddc <iprintf>
	          printf("  AC volt: ");
 8002190:	4869      	ldr	r0, [pc, #420]	; (8002338 <main+0x72c>)
 8002192:	f006 fe23 	bl	8008ddc <iprintf>
	          printf("%d",acvolt[x]);
 8002196:	4a69      	ldr	r2, [pc, #420]	; (800233c <main+0x730>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800219e:	4619      	mov	r1, r3
 80021a0:	4862      	ldr	r0, [pc, #392]	; (800232c <main+0x720>)
 80021a2:	f006 fe1b 	bl	8008ddc <iprintf>
	          printf("  AC cur: ");
 80021a6:	4866      	ldr	r0, [pc, #408]	; (8002340 <main+0x734>)
 80021a8:	f006 fe18 	bl	8008ddc <iprintf>
	          printf("%.2f",accur[x] * 0.06666f);
 80021ac:	4a65      	ldr	r2, [pc, #404]	; (8002344 <main+0x738>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fd41 	bl	8000c3c <__aeabi_i2f>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4962      	ldr	r1, [pc, #392]	; (8002348 <main+0x73c>)
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fd90 	bl	8000ce4 <__aeabi_fmul>
 80021c4:	4603      	mov	r3, r0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f92e 	bl	8000428 <__aeabi_f2d>
 80021cc:	4603      	mov	r3, r0
 80021ce:	460c      	mov	r4, r1
 80021d0:	461a      	mov	r2, r3
 80021d2:	4623      	mov	r3, r4
 80021d4:	485d      	ldr	r0, [pc, #372]	; (800234c <main+0x740>)
 80021d6:	f006 fe01 	bl	8008ddc <iprintf>
	          //printf("  ");
	          ///printf(accur[x], HEX); ///not needed since current fixed
	          printf("  DC volt: ");
 80021da:	485d      	ldr	r0, [pc, #372]	; (8002350 <main+0x744>)
 80021dc:	f006 fdfe 	bl	8008ddc <iprintf>
	          printf("%d",dcvolt[x]);
 80021e0:	4a5c      	ldr	r2, [pc, #368]	; (8002354 <main+0x748>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021e8:	4619      	mov	r1, r3
 80021ea:	4850      	ldr	r0, [pc, #320]	; (800232c <main+0x720>)
 80021ec:	f006 fdf6 	bl	8008ddc <iprintf>
	          printf("  DC cur: ");
 80021f0:	4859      	ldr	r0, [pc, #356]	; (8002358 <main+0x74c>)
 80021f2:	f006 fdf3 	bl	8008ddc <iprintf>
	          printf("%0.2f",dccur[x] * 0.000839233f);
 80021f6:	4a59      	ldr	r2, [pc, #356]	; (800235c <main+0x750>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fd1c 	bl	8000c3c <__aeabi_i2f>
 8002204:	4603      	mov	r3, r0
 8002206:	4956      	ldr	r1, [pc, #344]	; (8002360 <main+0x754>)
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe fd6b 	bl	8000ce4 <__aeabi_fmul>
 800220e:	4603      	mov	r3, r0
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f909 	bl	8000428 <__aeabi_f2d>
 8002216:	4603      	mov	r3, r0
 8002218:	460c      	mov	r4, r1
 800221a:	461a      	mov	r2, r3
 800221c:	4623      	mov	r3, r4
 800221e:	4851      	ldr	r0, [pc, #324]	; (8002364 <main+0x758>)
 8002220:	f006 fddc 	bl	8008ddc <iprintf>
	          printf("  Inlet Targ: ");
 8002224:	4850      	ldr	r0, [pc, #320]	; (8002368 <main+0x75c>)
 8002226:	f006 fdd9 	bl	8008ddc <iprintf>
	          printf("%d",inlettarg[x]);
 800222a:	4a50      	ldr	r2, [pc, #320]	; (800236c <main+0x760>)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	4619      	mov	r1, r3
 8002234:	483d      	ldr	r0, [pc, #244]	; (800232c <main+0x720>)
 8002236:	f006 fdd1 	bl	8008ddc <iprintf>
	          printf("  Temp Lim Cur: ");
 800223a:	484d      	ldr	r0, [pc, #308]	; (8002370 <main+0x764>)
 800223c:	f006 fdce 	bl	8008ddc <iprintf>
	          printf("%d",curtemplim[x]);
 8002240:	4a4c      	ldr	r2, [pc, #304]	; (8002374 <main+0x768>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4413      	add	r3, r2
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	4838      	ldr	r0, [pc, #224]	; (800232c <main+0x720>)
 800224c:	f006 fdc6 	bl	8008ddc <iprintf>
	          printf("  ");
 8002250:	4849      	ldr	r0, [pc, #292]	; (8002378 <main+0x76c>)
 8002252:	f006 fdc3 	bl	8008ddc <iprintf>
	          printf("%d",templeg[0][x]);
 8002256:	4a49      	ldr	r2, [pc, #292]	; (800237c <main+0x770>)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	4832      	ldr	r0, [pc, #200]	; (800232c <main+0x720>)
 8002262:	f006 fdbb 	bl	8008ddc <iprintf>
	          printf("  ");
 8002266:	4844      	ldr	r0, [pc, #272]	; (8002378 <main+0x76c>)
 8002268:	f006 fdb8 	bl	8008ddc <iprintf>
	          printf("%d",templeg[1][x]);
 800226c:	4a43      	ldr	r2, [pc, #268]	; (800237c <main+0x770>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	3303      	adds	r3, #3
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4619      	mov	r1, r3
 8002278:	482c      	ldr	r0, [pc, #176]	; (800232c <main+0x720>)
 800227a:	f006 fdaf 	bl	8008ddc <iprintf>
	          printf(" EN:");
 800227e:	4840      	ldr	r0, [pc, #256]	; (8002380 <main+0x774>)
 8002280:	f006 fdac 	bl	8008ddc <iprintf>
	          printf("%d",ModEn[x]);
 8002284:	4a3f      	ldr	r2, [pc, #252]	; (8002384 <main+0x778>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	4827      	ldr	r0, [pc, #156]	; (800232c <main+0x720>)
 8002290:	f006 fda4 	bl	8008ddc <iprintf>
	          printf(" Flt:");
 8002294:	483c      	ldr	r0, [pc, #240]	; (8002388 <main+0x77c>)
 8002296:	f006 fda1 	bl	8008ddc <iprintf>
	          printf("%d",ModFlt[x]);
 800229a:	4a3c      	ldr	r2, [pc, #240]	; (800238c <main+0x780>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4821      	ldr	r0, [pc, #132]	; (800232c <main+0x720>)
 80022a6:	f006 fd99 	bl	8008ddc <iprintf>
	          printf(" Stat:");
 80022aa:	4839      	ldr	r0, [pc, #228]	; (8002390 <main+0x784>)
 80022ac:	f006 fd96 	bl	8008ddc <iprintf>
	          printf("%d",ModStat[x]);
 80022b0:	4a38      	ldr	r2, [pc, #224]	; (8002394 <main+0x788>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	481c      	ldr	r0, [pc, #112]	; (800232c <main+0x720>)
 80022bc:	f006 fd8e 	bl	8008ddc <iprintf>
	          printf("\r\n");
 80022c0:	4835      	ldr	r0, [pc, #212]	; (8002398 <main+0x78c>)
 80022c2:	f006 fe13 	bl	8008eec <puts>
	        for (int x = 0; x < 3; x++)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3301      	adds	r3, #1
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	f77f af4a 	ble.w	8002168 <main+0x55c>
 80022d4:	e008      	b.n	80022e8 <main+0x6dc>
	        }
	      }
	      else
	      {
	        printf("\r\n");
 80022d6:	4830      	ldr	r0, [pc, #192]	; (8002398 <main+0x78c>)
 80022d8:	f006 fe08 	bl	8008eec <puts>
	        printf("Modules Turned OFF");
 80022dc:	482f      	ldr	r0, [pc, #188]	; (800239c <main+0x790>)
 80022de:	f006 fd7d 	bl	8008ddc <iprintf>
	        printf("\r\n");
 80022e2:	482d      	ldr	r0, [pc, #180]	; (8002398 <main+0x78c>)
 80022e4:	f006 fe02 	bl	8008eec <puts>
	      }
	    }
	    if (debug == 1)
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <main+0x794>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	f040 80e4 	bne.w	80024ba <main+0x8ae>
	    {
	      if (evsedebug != 0)
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <main+0x798>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80df 	beq.w	80024ba <main+0x8ae>
	      {
	        printf("\r\n");
 80022fc:	4826      	ldr	r0, [pc, #152]	; (8002398 <main+0x78c>)
 80022fe:	f006 fdf5 	bl	8008eec <puts>
	        printf("  Proximity Status : ");
 8002302:	4829      	ldr	r0, [pc, #164]	; (80023a8 <main+0x79c>)
 8002304:	f006 fd6a 	bl	8008ddc <iprintf>
	        switch (Proximity)
 8002308:	4b28      	ldr	r3, [pc, #160]	; (80023ac <main+0x7a0>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d007      	beq.n	8002320 <main+0x714>
 8002310:	2b02      	cmp	r3, #2
 8002312:	d051      	beq.n	80023b8 <main+0x7ac>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d153      	bne.n	80023c0 <main+0x7b4>
	        {
	          case Unconnected:
	            printf("Unconnected");
 8002318:	4825      	ldr	r0, [pc, #148]	; (80023b0 <main+0x7a4>)
 800231a:	f006 fd5f 	bl	8008ddc <iprintf>
	            break;
 800231e:	e04f      	b.n	80023c0 <main+0x7b4>
	          case Buttonpress:
	            printf("Button Pressed");
 8002320:	4824      	ldr	r0, [pc, #144]	; (80023b4 <main+0x7a8>)
 8002322:	f006 fd5b 	bl	8008ddc <iprintf>
	            break;
 8002326:	e04b      	b.n	80023c0 <main+0x7b4>
 8002328:	0800b268 	.word	0x0800b268
 800232c:	0800b224 	.word	0x0800b224
 8002330:	0800b274 	.word	0x0800b274
 8002334:	20000270 	.word	0x20000270
 8002338:	0800b290 	.word	0x0800b290
 800233c:	20000250 	.word	0x20000250
 8002340:	0800b29c 	.word	0x0800b29c
 8002344:	20000258 	.word	0x20000258
 8002348:	3d88850a 	.word	0x3d88850a
 800234c:	0800b2a8 	.word	0x0800b2a8
 8002350:	0800b2b0 	.word	0x0800b2b0
 8002354:	20000240 	.word	0x20000240
 8002358:	0800b2bc 	.word	0x0800b2bc
 800235c:	20000248 	.word	0x20000248
 8002360:	3a5bfff9 	.word	0x3a5bfff9
 8002364:	0800b2c8 	.word	0x0800b2c8
 8002368:	0800b2d0 	.word	0x0800b2d0
 800236c:	20000260 	.word	0x20000260
 8002370:	0800b2e0 	.word	0x0800b2e0
 8002374:	20000264 	.word	0x20000264
 8002378:	0800b2f4 	.word	0x0800b2f4
 800237c:	20000268 	.word	0x20000268
 8002380:	0800b2f8 	.word	0x0800b2f8
 8002384:	20000274 	.word	0x20000274
 8002388:	0800b300 	.word	0x0800b300
 800238c:	20000278 	.word	0x20000278
 8002390:	0800b308 	.word	0x0800b308
 8002394:	2000027c 	.word	0x2000027c
 8002398:	0800b210 	.word	0x0800b210
 800239c:	0800b310 	.word	0x0800b310
 80023a0:	20000004 	.word	0x20000004
 80023a4:	20000000 	.word	0x20000000
 80023a8:	0800b324 	.word	0x0800b324
 80023ac:	2000022c 	.word	0x2000022c
 80023b0:	0800b33c 	.word	0x0800b33c
 80023b4:	0800b348 	.word	0x0800b348
	          case Connected:
	            printf("Connected");
 80023b8:	4862      	ldr	r0, [pc, #392]	; (8002544 <main+0x938>)
 80023ba:	f006 fd0f 	bl	8008ddc <iprintf>
	            break;
 80023be:	bf00      	nop

	        }
	        printf(" AC limit : ");
 80023c0:	4861      	ldr	r0, [pc, #388]	; (8002548 <main+0x93c>)
 80023c2:	f006 fd0b 	bl	8008ddc <iprintf>
	        printf("%d",accurlim);
 80023c6:	4b61      	ldr	r3, [pc, #388]	; (800254c <main+0x940>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	4619      	mov	r1, r3
 80023ce:	4860      	ldr	r0, [pc, #384]	; (8002550 <main+0x944>)
 80023d0:	f006 fd04 	bl	8008ddc <iprintf>
	        printf(" /Cable Limit: ");
 80023d4:	485f      	ldr	r0, [pc, #380]	; (8002554 <main+0x948>)
 80023d6:	f006 fd01 	bl	8008ddc <iprintf>
	        printf("%d",cablelim);
 80023da:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <main+0x94c>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	4619      	mov	r1, r3
 80023e0:	485b      	ldr	r0, [pc, #364]	; (8002550 <main+0x944>)
 80023e2:	f006 fcfb 	bl	8008ddc <iprintf>
	        printf(" /Module Cur Request: ");
 80023e6:	485d      	ldr	r0, [pc, #372]	; (800255c <main+0x950>)
 80023e8:	f006 fcf8 	bl	8008ddc <iprintf>
	        printf("%.0f",modulelimcur / 1.5f);
 80023ec:	4b5c      	ldr	r3, [pc, #368]	; (8002560 <main+0x954>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fe fc23 	bl	8000c3c <__aeabi_i2f>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fd25 	bl	8000e4c <__aeabi_fdiv>
 8002402:	4603      	mov	r3, r0
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f80f 	bl	8000428 <__aeabi_f2d>
 800240a:	4603      	mov	r3, r0
 800240c:	460c      	mov	r4, r1
 800240e:	461a      	mov	r2, r3
 8002410:	4623      	mov	r3, r4
 8002412:	4854      	ldr	r0, [pc, #336]	; (8002564 <main+0x958>)
 8002414:	f006 fce2 	bl	8008ddc <iprintf>
	        printf(" /DC total Cur:");
 8002418:	4853      	ldr	r0, [pc, #332]	; (8002568 <main+0x95c>)
 800241a:	f006 fcdf 	bl	8008ddc <iprintf>
	        printf("%.2f",totdccur * 0.005f);
 800241e:	4b53      	ldr	r3, [pc, #332]	; (800256c <main+0x960>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fc0a 	bl	8000c3c <__aeabi_i2f>
 8002428:	4603      	mov	r3, r0
 800242a:	4951      	ldr	r1, [pc, #324]	; (8002570 <main+0x964>)
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fc59 	bl	8000ce4 <__aeabi_fmul>
 8002432:	4603      	mov	r3, r0
 8002434:	4618      	mov	r0, r3
 8002436:	f7fd fff7 	bl	8000428 <__aeabi_f2d>
 800243a:	4603      	mov	r3, r0
 800243c:	460c      	mov	r4, r1
 800243e:	461a      	mov	r2, r3
 8002440:	4623      	mov	r3, r4
 8002442:	484c      	ldr	r0, [pc, #304]	; (8002574 <main+0x968>)
 8002444:	f006 fcca 	bl	8008ddc <iprintf>
	        printf(" /DC Setpoint:");
 8002448:	484b      	ldr	r0, [pc, #300]	; (8002578 <main+0x96c>)
 800244a:	f006 fcc7 	bl	8008ddc <iprintf>
	        printf("%.0f",parameters.voltSet * 0.01f);
 800244e:	4b4b      	ldr	r3, [pc, #300]	; (800257c <main+0x970>)
 8002450:	891b      	ldrh	r3, [r3, #8]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fbf2 	bl	8000c3c <__aeabi_i2f>
 8002458:	4603      	mov	r3, r0
 800245a:	4949      	ldr	r1, [pc, #292]	; (8002580 <main+0x974>)
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe fc41 	bl	8000ce4 <__aeabi_fmul>
 8002462:	4603      	mov	r3, r0
 8002464:	4618      	mov	r0, r3
 8002466:	f7fd ffdf 	bl	8000428 <__aeabi_f2d>
 800246a:	4603      	mov	r3, r0
 800246c:	460c      	mov	r4, r1
 800246e:	461a      	mov	r2, r3
 8002470:	4623      	mov	r3, r4
 8002472:	483c      	ldr	r0, [pc, #240]	; (8002564 <main+0x958>)
 8002474:	f006 fcb2 	bl	8008ddc <iprintf>
	        printf(" /DC tVolt:");
 8002478:	4842      	ldr	r0, [pc, #264]	; (8002584 <main+0x978>)
 800247a:	f006 fcaf 	bl	8008ddc <iprintf>
	        printf("%.0f",parameters.tVolt*0.01f);
 800247e:	4b3f      	ldr	r3, [pc, #252]	; (800257c <main+0x970>)
 8002480:	895b      	ldrh	r3, [r3, #10]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fbda 	bl	8000c3c <__aeabi_i2f>
 8002488:	4603      	mov	r3, r0
 800248a:	493d      	ldr	r1, [pc, #244]	; (8002580 <main+0x974>)
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fc29 	bl	8000ce4 <__aeabi_fmul>
 8002492:	4603      	mov	r3, r0
 8002494:	4618      	mov	r0, r3
 8002496:	f7fd ffc7 	bl	8000428 <__aeabi_f2d>
 800249a:	4603      	mov	r3, r0
 800249c:	460c      	mov	r4, r1
 800249e:	461a      	mov	r2, r3
 80024a0:	4623      	mov	r3, r4
 80024a2:	4830      	ldr	r0, [pc, #192]	; (8002564 <main+0x958>)
 80024a4:	f006 fc9a 	bl	8008ddc <iprintf>
	        printf(" /DC driven AC Cur Lim: ");
 80024a8:	4837      	ldr	r0, [pc, #220]	; (8002588 <main+0x97c>)
 80024aa:	f006 fc97 	bl	8008ddc <iprintf>
	        printf("%d",dcaclim);
 80024ae:	4b37      	ldr	r3, [pc, #220]	; (800258c <main+0x980>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	4826      	ldr	r0, [pc, #152]	; (8002550 <main+0x944>)
 80024b6:	f006 fc91 	bl	8008ddc <iprintf>
	      }
	    }
	  }
	  DCcurrentlimit();
 80024ba:	f001 fce9 	bl	8003e90 <DCcurrentlimit>
	  ACcurrentlimit();
 80024be:	f001 fbab 	bl	8003c18 <ACcurrentlimit>
	  resetFaults();
 80024c2:	f000 f8d3 	bl	800266c <resetFaults>
	  if (parameters.autoEnableCharger == 1)
 80024c6:	4b2d      	ldr	r3, [pc, #180]	; (800257c <main+0x970>)
 80024c8:	78db      	ldrb	r3, [r3, #3]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	f47f ac03 	bne.w	8001cd6 <main+0xca>
	  {
	    if ((Proximity == Connected)&&(LockOut==false)) //check if plugged in and not locked out
 80024d0:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <main+0x984>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d125      	bne.n	8002524 <main+0x918>
 80024d8:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <main+0x988>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01e      	beq.n	8002524 <main+0x918>
	    {
	      //digitalWrite(EVSE_ACTIVATE, HIGH);//pull pilot low to indicate ready - NOT WORKING freezes PWM reading
	      if (accurlim > 1400) // one amp or more active modules
 80024e6:	4b19      	ldr	r3, [pc, #100]	; (800254c <main+0x940>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80024f0:	d912      	bls.n	8002518 <main+0x90c>
	      {
	        if (state == 0)
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <main+0x98c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10e      	bne.n	8002518 <main+0x90c>
	        {
	          if (HAL_GPIO_ReadPin(DIG_IN_1_GPIO_Port, DIG_IN_1_Pin)==GPIO_PIN_SET)
 80024fa:	2108      	movs	r1, #8
 80024fc:	4827      	ldr	r0, [pc, #156]	; (800259c <main+0x990>)
 80024fe:	f003 febd 	bl	800627c <HAL_GPIO_ReadPin>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d107      	bne.n	8002518 <main+0x90c>
	          {
	            state = 2;// initialize modules
 8002508:	4b23      	ldr	r3, [pc, #140]	; (8002598 <main+0x98c>)
 800250a:	2202      	movs	r2, #2
 800250c:	601a      	str	r2, [r3, #0]
	            tboot = millis();
 800250e:	f001 fa49 	bl	80039a4 <millis>
 8002512:	4602      	mov	r2, r0
 8002514:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <main+0x994>)
 8002516:	601a      	str	r2, [r3, #0]
	          }
	        }
	      }
	      HAL_GPIO_WritePin(DIG_OUT_2_GPIO_Port, DIG_OUT_2_Pin, GPIO_PIN_SET); //enable AC present indication
 8002518:	2201      	movs	r2, #1
 800251a:	2108      	movs	r1, #8
 800251c:	4821      	ldr	r0, [pc, #132]	; (80025a4 <main+0x998>)
 800251e:	f003 fec4 	bl	80062aa <HAL_GPIO_WritePin>
 8002522:	e00d      	b.n	8002540 <main+0x934>
	    }
	    else // unplugged or buton pressed stop charging
	    {
	      state = 0;
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <main+0x98c>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
	      HAL_GPIO_WritePin(DIG_OUT_2_GPIO_Port, DIG_OUT_2_Pin, GPIO_PIN_RESET); //disable AC present indication
 800252a:	2200      	movs	r2, #0
 800252c:	2108      	movs	r1, #8
 800252e:	481d      	ldr	r0, [pc, #116]	; (80025a4 <main+0x998>)
 8002530:	f003 febb 	bl	80062aa <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(EVSE_ACTIVATE_GPIO_Port, EVSE_ACTIVATE_Pin, GPIO_PIN_SET);
 8002534:	2201      	movs	r2, #1
 8002536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800253a:	4818      	ldr	r0, [pc, #96]	; (800259c <main+0x990>)
 800253c:	f003 feb5 	bl	80062aa <HAL_GPIO_WritePin>
	if(HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) >= 1)
 8002540:	f7ff bbc9 	b.w	8001cd6 <main+0xca>
 8002544:	0800b358 	.word	0x0800b358
 8002548:	0800b364 	.word	0x0800b364
 800254c:	20000236 	.word	0x20000236
 8002550:	0800b224 	.word	0x0800b224
 8002554:	0800b374 	.word	0x0800b374
 8002558:	20000238 	.word	0x20000238
 800255c:	0800b384 	.word	0x0800b384
 8002560:	20000368 	.word	0x20000368
 8002564:	0800b39c 	.word	0x0800b39c
 8002568:	0800b3a4 	.word	0x0800b3a4
 800256c:	2000024e 	.word	0x2000024e
 8002570:	3ba3d70a 	.word	0x3ba3d70a
 8002574:	0800b2a8 	.word	0x0800b2a8
 8002578:	0800b3b4 	.word	0x0800b3b4
 800257c:	2000033c 	.word	0x2000033c
 8002580:	3c23d70a 	.word	0x3c23d70a
 8002584:	0800b3c4 	.word	0x0800b3c4
 8002588:	0800b3d0 	.word	0x0800b3d0
 800258c:	2000023a 	.word	0x2000023a
 8002590:	2000022c 	.word	0x2000022c
 8002594:	2000027b 	.word	0x2000027b
 8002598:	200002fc 	.word	0x200002fc
 800259c:	40010c00 	.word	0x40010c00
 80025a0:	20000228 	.word	0x20000228
 80025a4:	40010800 	.word	0x40010800

080025a8 <SystemClock_Config>:
  }
/************END OF LOOP****************/
}

void SystemClock_Config(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b094      	sub	sp, #80	; 0x50
 80025ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b2:	2228      	movs	r2, #40	; 0x28
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f005 ffb8 	bl	800852c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80025d8:	2309      	movs	r3, #9
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025e2:	2300      	movs	r3, #0
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e6:	2301      	movs	r3, #1
 80025e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80025ea:	2301      	movs	r3, #1
 80025ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ee:	2302      	movs	r3, #2
 80025f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80025f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80025fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002602:	4618      	mov	r0, r3
 8002604:	f003 ff70 	bl	80064e8 <HAL_RCC_OscConfig>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800260e:	f001 fd49 	bl	80040a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002612:	230f      	movs	r3, #15
 8002614:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002616:	2302      	movs	r3, #2
 8002618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800261e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002622:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	2102      	movs	r1, #2
 800262e:	4618      	mov	r0, r3
 8002630:	f004 f9da 	bl	80069e8 <HAL_RCC_ClockConfig>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800263a:	f001 fd33 	bl	80040a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 800263e:	2313      	movs	r3, #19
 8002640:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002646:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002648:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800264c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	4618      	mov	r0, r3
 8002656:	f004 fb63 	bl	8006d20 <HAL_RCCEx_PeriphCLKConfig>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002660:	f001 fd20 	bl	80040a4 <Error_Handler>
  }
}
 8002664:	bf00      	nop
 8002666:	3750      	adds	r7, #80	; 0x50
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <resetFaults>:


void resetFaults(void){
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
if ((bChargerEnabled == true) && (ACpres[0] == true) && (ModFlt[0] ==true) && ((parameters.enabledChargers == 1) || (parameters.enabledChargers == 12) || (parameters.enabledChargers == 13) || (parameters.enabledChargers == 123)))
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <resetFaults+0xe0>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01f      	beq.n	80026b8 <resetFaults+0x4c>
 8002678:	4b35      	ldr	r3, [pc, #212]	; (8002750 <resetFaults+0xe4>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01b      	beq.n	80026b8 <resetFaults+0x4c>
 8002680:	4b34      	ldr	r3, [pc, #208]	; (8002754 <resetFaults+0xe8>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d017      	beq.n	80026b8 <resetFaults+0x4c>
 8002688:	4b33      	ldr	r3, [pc, #204]	; (8002758 <resetFaults+0xec>)
 800268a:	785b      	ldrb	r3, [r3, #1]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d00b      	beq.n	80026a8 <resetFaults+0x3c>
 8002690:	4b31      	ldr	r3, [pc, #196]	; (8002758 <resetFaults+0xec>)
 8002692:	785b      	ldrb	r3, [r3, #1]
 8002694:	2b0c      	cmp	r3, #12
 8002696:	d007      	beq.n	80026a8 <resetFaults+0x3c>
 8002698:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <resetFaults+0xec>)
 800269a:	785b      	ldrb	r3, [r3, #1]
 800269c:	2b0d      	cmp	r3, #13
 800269e:	d003      	beq.n	80026a8 <resetFaults+0x3c>
 80026a0:	4b2d      	ldr	r3, [pc, #180]	; (8002758 <resetFaults+0xec>)
 80026a2:	785b      	ldrb	r3, [r3, #1]
 80026a4:	2b7b      	cmp	r3, #123	; 0x7b
 80026a6:	d107      	bne.n	80026b8 <resetFaults+0x4c>
    {
      //if these conditions are met then phase one is enabled, has ac present and has entered a fault state so we want to reset.
		state = 0;
 80026a8:	4b2c      	ldr	r3, [pc, #176]	; (800275c <resetFaults+0xf0>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(DIG_OUT_2_GPIO_Port, DIG_OUT_2_Pin, GPIO_PIN_RESET); //disable AC present indication;
 80026ae:	2200      	movs	r2, #0
 80026b0:	2108      	movs	r1, #8
 80026b2:	482b      	ldr	r0, [pc, #172]	; (8002760 <resetFaults+0xf4>)
 80026b4:	f003 fdf9 	bl	80062aa <HAL_GPIO_WritePin>
          //  digitalWrite(EVSE_ACTIVATE, LOW);
    }
  if ((bChargerEnabled == true) && (ACpres[1] == true) && (ModFlt[1] ==true) && ((parameters.enabledChargers == 2) || (parameters.enabledChargers == 12) || (parameters.enabledChargers == 23) || (parameters.enabledChargers == 123)))
 80026b8:	4b24      	ldr	r3, [pc, #144]	; (800274c <resetFaults+0xe0>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01f      	beq.n	8002700 <resetFaults+0x94>
 80026c0:	4b23      	ldr	r3, [pc, #140]	; (8002750 <resetFaults+0xe4>)
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01b      	beq.n	8002700 <resetFaults+0x94>
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <resetFaults+0xe8>)
 80026ca:	785b      	ldrb	r3, [r3, #1]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d017      	beq.n	8002700 <resetFaults+0x94>
 80026d0:	4b21      	ldr	r3, [pc, #132]	; (8002758 <resetFaults+0xec>)
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d00b      	beq.n	80026f0 <resetFaults+0x84>
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <resetFaults+0xec>)
 80026da:	785b      	ldrb	r3, [r3, #1]
 80026dc:	2b0c      	cmp	r3, #12
 80026de:	d007      	beq.n	80026f0 <resetFaults+0x84>
 80026e0:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <resetFaults+0xec>)
 80026e2:	785b      	ldrb	r3, [r3, #1]
 80026e4:	2b17      	cmp	r3, #23
 80026e6:	d003      	beq.n	80026f0 <resetFaults+0x84>
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <resetFaults+0xec>)
 80026ea:	785b      	ldrb	r3, [r3, #1]
 80026ec:	2b7b      	cmp	r3, #123	; 0x7b
 80026ee:	d107      	bne.n	8002700 <resetFaults+0x94>
    {
      //if these conditions are met then phase two is enabled, has ac present and has entered a fault state so we want to reset.
		state = 0;
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <resetFaults+0xf0>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(DIG_OUT_2_GPIO_Port, DIG_OUT_2_Pin, GPIO_PIN_RESET); //disable AC present indication;
 80026f6:	2200      	movs	r2, #0
 80026f8:	2108      	movs	r1, #8
 80026fa:	4819      	ldr	r0, [pc, #100]	; (8002760 <resetFaults+0xf4>)
 80026fc:	f003 fdd5 	bl	80062aa <HAL_GPIO_WritePin>
            //digitalWrite(EVSE_ACTIVATE, LOW);
    }
 if ((bChargerEnabled == true) && (ACpres[2] == true) && (ModFlt[2] ==true) && ((parameters.enabledChargers == 3) || (parameters.enabledChargers == 13) || (parameters.enabledChargers == 23) || (parameters.enabledChargers == 123)))
 8002700:	4b12      	ldr	r3, [pc, #72]	; (800274c <resetFaults+0xe0>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01f      	beq.n	8002748 <resetFaults+0xdc>
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <resetFaults+0xe4>)
 800270a:	789b      	ldrb	r3, [r3, #2]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <resetFaults+0xdc>
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <resetFaults+0xe8>)
 8002712:	789b      	ldrb	r3, [r3, #2]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d017      	beq.n	8002748 <resetFaults+0xdc>
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <resetFaults+0xec>)
 800271a:	785b      	ldrb	r3, [r3, #1]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d00b      	beq.n	8002738 <resetFaults+0xcc>
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <resetFaults+0xec>)
 8002722:	785b      	ldrb	r3, [r3, #1]
 8002724:	2b0d      	cmp	r3, #13
 8002726:	d007      	beq.n	8002738 <resetFaults+0xcc>
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <resetFaults+0xec>)
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	2b17      	cmp	r3, #23
 800272e:	d003      	beq.n	8002738 <resetFaults+0xcc>
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <resetFaults+0xec>)
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	2b7b      	cmp	r3, #123	; 0x7b
 8002736:	d107      	bne.n	8002748 <resetFaults+0xdc>
    {
      //if these conditions are met then phase three is enabled, has ac present and has entered a fault state so we want to reset.
		state = 0;
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <resetFaults+0xf0>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(DIG_OUT_2_GPIO_Port, DIG_OUT_2_Pin, GPIO_PIN_RESET); //disable AC present indication;
 800273e:	2200      	movs	r2, #0
 8002740:	2108      	movs	r1, #8
 8002742:	4807      	ldr	r0, [pc, #28]	; (8002760 <resetFaults+0xf4>)
 8002744:	f003 fdb1 	bl	80062aa <HAL_GPIO_WritePin>
            //digitalWrite(EVSE_ACTIVATE, LOW);
    }
 }
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}
 800274c:	2000035a 	.word	0x2000035a
 8002750:	20000270 	.word	0x20000270
 8002754:	20000278 	.word	0x20000278
 8002758:	2000033c 	.word	0x2000033c
 800275c:	200002fc 	.word	0x200002fc
 8002760:	40010800 	.word	0x40010800

08002764 <autoShutdown>:
//If the HV voltage exceeds the tVolt setpoint we want to shut down the charger and not re enable until the charge plug
//is removed and re connected. For now we just read the voltage on phase module one.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void autoShutdown(void){
 8002764:	b598      	push	{r3, r4, r7, lr}
 8002766:	af00      	add	r7, sp, #0
  if ((bChargerEnabled ==true)&&(LockOut==false)) //if charger is running and we are not locked out ...
 8002768:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <autoShutdown+0x94>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d028      	beq.n	80027c2 <autoShutdown+0x5e>
 8002770:	4b22      	ldr	r3, [pc, #136]	; (80027fc <autoShutdown+0x98>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	f083 0301 	eor.w	r3, r3, #1
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d021      	beq.n	80027c2 <autoShutdown+0x5e>
  {
    if (dcvolt[0]>(parameters.tVolt*0.01f)) //and if we exceed tVolt...
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <autoShutdown+0x9c>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe fa5a 	bl	8000c3c <__aeabi_i2f>
 8002788:	4604      	mov	r4, r0
 800278a:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <autoShutdown+0xa0>)
 800278c:	895b      	ldrh	r3, [r3, #10]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fa54 	bl	8000c3c <__aeabi_i2f>
 8002794:	4603      	mov	r3, r0
 8002796:	491c      	ldr	r1, [pc, #112]	; (8002808 <autoShutdown+0xa4>)
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe faa3 	bl	8000ce4 <__aeabi_fmul>
 800279e:	4603      	mov	r3, r0
 80027a0:	4619      	mov	r1, r3
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7fe fc5a 	bl	800105c <__aeabi_fcmpgt>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <autoShutdown+0x58>
    {
        LockOutCnt++; //increment the lockout counter
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <autoShutdown+0xa8>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <autoShutdown+0xa8>)
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	e002      	b.n	80027c2 <autoShutdown+0x5e>
//      LockOut=true; //lockout and shutdown
  //    state=0;
  }
  else
  {
    LockOutCnt=0; //other wise we reset the lockout counter
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <autoShutdown+0xa8>)
 80027be:	2200      	movs	r2, #0
 80027c0:	801a      	strh	r2, [r3, #0]
  }

  }
  if (Proximity == Unconnected&&(parameters.autoEnableCharger == 1)) LockOut=false;  //re set the lockout flag when the evse plug is pulled only if we are in evse mode.
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <autoShutdown+0xac>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <autoShutdown+0x74>
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <autoShutdown+0xa0>)
 80027cc:	78db      	ldrb	r3, [r3, #3]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d102      	bne.n	80027d8 <autoShutdown+0x74>
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <autoShutdown+0x98>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]

  if (LockOutCnt>10)
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <autoShutdown+0xa8>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	2b0a      	cmp	r3, #10
 80027de:	d908      	bls.n	80027f2 <autoShutdown+0x8e>
  {
  state=0; //if we are above our shutdown targer for 10 consecutive counts we lockout
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <autoShutdown+0xb0>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
  LockOut=true; //lockout and shutdown
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <autoShutdown+0x98>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
  LockOutCnt=0;
 80027ec:	4b07      	ldr	r3, [pc, #28]	; (800280c <autoShutdown+0xa8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	801a      	strh	r2, [r3, #0]
  }
}
 80027f2:	bf00      	nop
 80027f4:	bd98      	pop	{r3, r4, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000035a 	.word	0x2000035a
 80027fc:	2000027b 	.word	0x2000027b
 8002800:	20000240 	.word	0x20000240
 8002804:	2000033c 	.word	0x2000033c
 8002808:	3c23d70a 	.word	0x3c23d70a
 800280c:	20000284 	.word	0x20000284
 8002810:	2000022c 	.word	0x2000022c
 8002814:	200002fc 	.word	0x200002fc

08002818 <manualMode>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///Manual control mode via Digital input 1. Special case for A.Rish.
/////////////////////////////////////////////////////////////////////////////////////
void manualMode(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0

  if (parameters.autoEnableCharger == 0)//if we are not in auto mode ...
 800281c:	4b16      	ldr	r3, [pc, #88]	; (8002878 <manualMode+0x60>)
 800281e:	78db      	ldrb	r3, [r3, #3]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d126      	bne.n	8002872 <manualMode+0x5a>
  {
	if (state == 0)//....and if we are currently turned off....
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <manualMode+0x64>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d115      	bne.n	8002858 <manualMode+0x40>
	{
	  if ((HAL_GPIO_ReadPin(DIG_IN_1_GPIO_Port, DIG_IN_1_Pin)==GPIO_PIN_SET)&&(LockOut==false))//...and if digital one is high....
 800282c:	2108      	movs	r1, #8
 800282e:	4814      	ldr	r0, [pc, #80]	; (8002880 <manualMode+0x68>)
 8002830:	f003 fd24 	bl	800627c <HAL_GPIO_ReadPin>
 8002834:	4603      	mov	r3, r0
 8002836:	2b01      	cmp	r3, #1
 8002838:	d10e      	bne.n	8002858 <manualMode+0x40>
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <manualMode+0x6c>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	f083 0301 	eor.w	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <manualMode+0x40>
	  {
		state = 2;// initialize modules. Fire up the charger.
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <manualMode+0x64>)
 800284a:	2202      	movs	r2, #2
 800284c:	601a      	str	r2, [r3, #0]
		tboot = millis();
 800284e:	f001 f8a9 	bl	80039a4 <millis>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <manualMode+0x70>)
 8002856:	601a      	str	r2, [r3, #0]
	  }
	}
	if (HAL_GPIO_ReadPin(DIG_IN_1_GPIO_Port, DIG_IN_1_Pin)==GPIO_PIN_RESET)//...if brought low then we shutoff the charger.
 8002858:	2108      	movs	r1, #8
 800285a:	4809      	ldr	r0, [pc, #36]	; (8002880 <manualMode+0x68>)
 800285c:	f003 fd0e 	bl	800627c <HAL_GPIO_ReadPin>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d105      	bne.n	8002872 <manualMode+0x5a>
	{
	state = 0;//
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <manualMode+0x64>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
	LockOut=false;//release lockout when dig 1 in is brought low.
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <manualMode+0x6c>)
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
	}
  }
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000033c 	.word	0x2000033c
 800287c:	200002fc 	.word	0x200002fc
 8002880:	40010c00 	.word	0x40010c00
 8002884:	2000027b 	.word	0x2000027b
 8002888:	20000228 	.word	0x20000228

0800288c <evseread>:
void evseread()
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
  uint16_t val=0;
 8002892:	2300      	movs	r3, #0
 8002894:	80fb      	strh	r3, [r7, #6]
  if(HAL_ADC_PollForConversion(&hadc1, 5)){
 8002896:	2105      	movs	r1, #5
 8002898:	4833      	ldr	r0, [pc, #204]	; (8002968 <evseread+0xdc>)
 800289a:	f002 f9e3 	bl	8004c64 <HAL_ADC_PollForConversion>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d004      	beq.n	80028ae <evseread+0x22>
	  val=HAL_ADC_GetValue(&hadc1);
 80028a4:	4830      	ldr	r0, [pc, #192]	; (8002968 <evseread+0xdc>)
 80028a6:	f002 fad7 	bl	8004e58 <HAL_ADC_GetValue>
 80028aa:	4603      	mov	r3, r0
 80028ac:	80fb      	strh	r3, [r7, #6]
  }

  if ( parameters.type == 2)
 80028ae:	4b2f      	ldr	r3, [pc, #188]	; (800296c <evseread+0xe0>)
 80028b0:	795b      	ldrb	r3, [r3, #5]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d13b      	bne.n	800292e <evseread+0xa2>
  {
    if ( val > 950)
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80028bc:	4293      	cmp	r3, r2
 80028be:	d903      	bls.n	80028c8 <evseread+0x3c>
    {
      Proximity = Unconnected;
 80028c0:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <evseread+0xe4>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e032      	b.n	800292e <evseread+0xa2>
    }
    else
    {
      Proximity = Connected;
 80028c8:	4b29      	ldr	r3, [pc, #164]	; (8002970 <evseread+0xe4>)
 80028ca:	2202      	movs	r2, #2
 80028cc:	701a      	strb	r2, [r3, #0]
      if ( val < 950 && val > 800)
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	f240 32b5 	movw	r2, #949	; 0x3b5
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d807      	bhi.n	80028e8 <evseread+0x5c>
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80028de:	d903      	bls.n	80028e8 <evseread+0x5c>
      {
        cablelim = 13000;
 80028e0:	4b24      	ldr	r3, [pc, #144]	; (8002974 <evseread+0xe8>)
 80028e2:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80028e6:	801a      	strh	r2, [r3, #0]
      }
      if ( val < 800 && val > 700)
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80028ee:	d207      	bcs.n	8002900 <evseread+0x74>
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80028f6:	d903      	bls.n	8002900 <evseread+0x74>
      {
        cablelim = 20000;
 80028f8:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <evseread+0xe8>)
 80028fa:	f644 6220 	movw	r2, #20000	; 0x4e20
 80028fe:	801a      	strh	r2, [r3, #0]
      }
      if ( val < 600 && val > 450)
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002906:	d207      	bcs.n	8002918 <evseread+0x8c>
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800290e:	d903      	bls.n	8002918 <evseread+0x8c>
      {
        cablelim = 32000;
 8002910:	4b18      	ldr	r3, [pc, #96]	; (8002974 <evseread+0xe8>)
 8002912:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002916:	801a      	strh	r2, [r3, #0]
      }
      if ( val < 400 && val > 250)
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800291e:	d206      	bcs.n	800292e <evseread+0xa2>
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	2bfa      	cmp	r3, #250	; 0xfa
 8002924:	d903      	bls.n	800292e <evseread+0xa2>
      {
        cablelim = 63000;
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <evseread+0xe8>)
 8002928:	f24f 6218 	movw	r2, #63000	; 0xf618
 800292c:	801a      	strh	r2, [r3, #0]
      }
    }
  }

  if ( parameters.type == 1)
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <evseread+0xe0>)
 8002930:	795b      	ldrb	r3, [r3, #5]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d113      	bne.n	800295e <evseread+0xd2>
  {
    if ( val > 800)
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800293c:	d903      	bls.n	8002946 <evseread+0xba>
    {
      Proximity = Unconnected;
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <evseread+0xe4>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
      {
        Proximity = Connected;
      }
    }
  }
}
 8002944:	e00b      	b.n	800295e <evseread+0xd2>
      if ( val > 550)
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	f240 2226 	movw	r2, #550	; 0x226
 800294c:	4293      	cmp	r3, r2
 800294e:	d903      	bls.n	8002958 <evseread+0xcc>
        Proximity = Buttonpress;
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <evseread+0xe4>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
}
 8002956:	e002      	b.n	800295e <evseread+0xd2>
        Proximity = Connected;
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <evseread+0xe4>)
 800295a:	2202      	movs	r2, #2
 800295c:	701a      	strb	r2, [r3, #0]
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	2000029c 	.word	0x2000029c
 800296c:	2000033c 	.word	0x2000033c
 8002970:	2000022c 	.word	0x2000022c
 8002974:	20000238 	.word	0x20000238

08002978 <EEPROM_Read>:
void EEPROM_Read(ChargerParams *tempparams){
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8002980:	f003 f992 	bl	8005ca8 <HAL_FLASH_Unlock>
	EE_ReadVariable(VirtAddVarTab[0], (uint16_t*)&tempparams->version);
 8002984:	4b39      	ldr	r3, [pc, #228]	; (8002a6c <EEPROM_Read+0xf4>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fe7f 	bl	8001690 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[1], (uint16_t*)&tempparams->enabledChargers);
 8002992:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <EEPROM_Read+0xf4>)
 8002994:	885a      	ldrh	r2, [r3, #2]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3301      	adds	r3, #1
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f7fe fe77 	bl	8001690 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[2], (uint16_t*)&tempparams->mainsRelay);
 80029a2:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <EEPROM_Read+0xf4>)
 80029a4:	889a      	ldrh	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3302      	adds	r3, #2
 80029aa:	4619      	mov	r1, r3
 80029ac:	4610      	mov	r0, r2
 80029ae:	f7fe fe6f 	bl	8001690 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[3], (uint16_t*)&tempparams->autoEnableCharger);
 80029b2:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <EEPROM_Read+0xf4>)
 80029b4:	88da      	ldrh	r2, [r3, #6]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3303      	adds	r3, #3
 80029ba:	4619      	mov	r1, r3
 80029bc:	4610      	mov	r0, r2
 80029be:	f7fe fe67 	bl	8001690 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[4], (uint16_t*)&tempparams->canControl);
 80029c2:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <EEPROM_Read+0xf4>)
 80029c4:	891a      	ldrh	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3304      	adds	r3, #4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4610      	mov	r0, r2
 80029ce:	f7fe fe5f 	bl	8001690 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[5], (uint16_t*)&tempparams->type);
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <EEPROM_Read+0xf4>)
 80029d4:	895a      	ldrh	r2, [r3, #10]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3305      	adds	r3, #5
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f7fe fe57 	bl	8001690 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[6], (uint16_t*)&tempparams->phaseconfig);
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <EEPROM_Read+0xf4>)
 80029e4:	899a      	ldrh	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3306      	adds	r3, #6
 80029ea:	4619      	mov	r1, r3
 80029ec:	4610      	mov	r0, r2
 80029ee:	f7fe fe4f 	bl	8001690 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[7], &tempparams->voltSet);
 80029f2:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <EEPROM_Read+0xf4>)
 80029f4:	89da      	ldrh	r2, [r3, #14]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3308      	adds	r3, #8
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7fe fe47 	bl	8001690 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[8], &tempparams->tVolt);
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <EEPROM_Read+0xf4>)
 8002a04:	8a1a      	ldrh	r2, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	330a      	adds	r3, #10
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	f7fe fe3f 	bl	8001690 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[9], &tempparams->currReq);
 8002a12:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <EEPROM_Read+0xf4>)
 8002a14:	8a5a      	ldrh	r2, [r3, #18]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	330c      	adds	r3, #12
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	f7fe fe37 	bl	8001690 <EE_ReadVariable>
	uint16_t can0Speedpart1;
	uint16_t can0Speedpart2;
	EE_ReadVariable(VirtAddVarTab[10], &can0Speedpart1);
 8002a22:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <EEPROM_Read+0xf4>)
 8002a24:	8a9b      	ldrh	r3, [r3, #20]
 8002a26:	f107 020e 	add.w	r2, r7, #14
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fe fe2f 	bl	8001690 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[11], &can0Speedpart2);
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <EEPROM_Read+0xf4>)
 8002a34:	8adb      	ldrh	r3, [r3, #22]
 8002a36:	f107 020c 	add.w	r2, r7, #12
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe fe27 	bl	8001690 <EE_ReadVariable>
	EE_ReadVariable(VirtAddVarTab[12], &tempparams->dcdcsetpoint);
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <EEPROM_Read+0xf4>)
 8002a44:	8b1a      	ldrh	r2, [r3, #24]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3314      	adds	r3, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	f7fe fe1f 	bl	8001690 <EE_ReadVariable>
	tempparams->can0Speed=((uint32_t)can0Speedpart1<<16)|(uint32_t)can0Speedpart2;
 8002a52:	89fb      	ldrh	r3, [r7, #14]
 8002a54:	041b      	lsls	r3, r3, #16
 8002a56:	89ba      	ldrh	r2, [r7, #12]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	611a      	str	r2, [r3, #16]
	HAL_FLASH_Lock();
 8002a5e:	f003 f949 	bl	8005cf4 <HAL_FLASH_Lock>
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000010 	.word	0x20000010

08002a70 <EEPROM_Write>:
void EEPROM_Write(ChargerParams *tempparams){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	uint16_t can0Speedpart1 = ((tempparams->can0Speed)>>16);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	81fb      	strh	r3, [r7, #14]
	uint16_t can0Speedpart2 = (uint16_t)((tempparams->can0Speed)&&0xFFFF);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	81bb      	strh	r3, [r7, #12]
	HAL_FLASH_Unlock();
 8002a90:	f003 f90a 	bl	8005ca8 <HAL_FLASH_Unlock>
	EE_WriteVariable(VirtAddVarTab[0], tempparams->version);
 8002a94:	4b39      	ldr	r3, [pc, #228]	; (8002b7c <EEPROM_Write+0x10c>)
 8002a96:	881a      	ldrh	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f7fe fe3f 	bl	8001724 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[1], tempparams->enabledChargers);
 8002aa6:	4b35      	ldr	r3, [pc, #212]	; (8002b7c <EEPROM_Write+0x10c>)
 8002aa8:	885a      	ldrh	r2, [r3, #2]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	f7fe fe36 	bl	8001724 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[2], tempparams->mainsRelay);
 8002ab8:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <EEPROM_Write+0x10c>)
 8002aba:	889a      	ldrh	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	789b      	ldrb	r3, [r3, #2]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f7fe fe2d 	bl	8001724 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[3], tempparams->autoEnableCharger);
 8002aca:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <EEPROM_Write+0x10c>)
 8002acc:	88da      	ldrh	r2, [r3, #6]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	78db      	ldrb	r3, [r3, #3]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f7fe fe24 	bl	8001724 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[4], tempparams->canControl);
 8002adc:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <EEPROM_Write+0x10c>)
 8002ade:	891a      	ldrh	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	791b      	ldrb	r3, [r3, #4]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4610      	mov	r0, r2
 8002aea:	f7fe fe1b 	bl	8001724 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[5], tempparams->type);
 8002aee:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <EEPROM_Write+0x10c>)
 8002af0:	895a      	ldrh	r2, [r3, #10]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	795b      	ldrb	r3, [r3, #5]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	4619      	mov	r1, r3
 8002afa:	4610      	mov	r0, r2
 8002afc:	f7fe fe12 	bl	8001724 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[6], tempparams->phaseconfig);
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <EEPROM_Write+0x10c>)
 8002b02:	899a      	ldrh	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	799b      	ldrb	r3, [r3, #6]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f7fe fe09 	bl	8001724 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[7], tempparams->voltSet);
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <EEPROM_Write+0x10c>)
 8002b14:	89da      	ldrh	r2, [r3, #14]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	891b      	ldrh	r3, [r3, #8]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f7fe fe01 	bl	8001724 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[8], tempparams->tVolt);
 8002b22:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <EEPROM_Write+0x10c>)
 8002b24:	8a1a      	ldrh	r2, [r3, #16]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	895b      	ldrh	r3, [r3, #10]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	f7fe fdf9 	bl	8001724 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[9], tempparams->currReq);
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <EEPROM_Write+0x10c>)
 8002b34:	8a5a      	ldrh	r2, [r3, #18]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	899b      	ldrh	r3, [r3, #12]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f7fe fdf1 	bl	8001724 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[10], can0Speedpart1);
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <EEPROM_Write+0x10c>)
 8002b44:	8a9b      	ldrh	r3, [r3, #20]
 8002b46:	89fa      	ldrh	r2, [r7, #14]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fdea 	bl	8001724 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[11], can0Speedpart2);
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <EEPROM_Write+0x10c>)
 8002b52:	8adb      	ldrh	r3, [r3, #22]
 8002b54:	89ba      	ldrh	r2, [r7, #12]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fde3 	bl	8001724 <EE_WriteVariable>
	EE_WriteVariable(VirtAddVarTab[12], tempparams->dcdcsetpoint);
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <EEPROM_Write+0x10c>)
 8002b60:	8b1a      	ldrh	r2, [r3, #24]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	8a9b      	ldrh	r3, [r3, #20]
 8002b66:	4619      	mov	r1, r3
 8002b68:	4610      	mov	r0, r2
 8002b6a:	f7fe fddb 	bl	8001724 <EE_WriteVariable>
	HAL_FLASH_Lock();
 8002b6e:	f003 f8c1 	bl	8005cf4 <HAL_FLASH_Lock>
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000010 	.word	0x20000010

08002b80 <Can_Init>:
bool Can_Init(void){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
	if(!CAN_FilterConfig()){
 8002b84:	f000 f826 	bl	8002bd4 <CAN_FilterConfig>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f083 0301 	eor.w	r3, r3, #1
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <Can_Init+0x18>
		return false;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e017      	b.n	8002bc8 <Can_Init+0x48>
		Error_Handler();
	}
	HAL_Delay(2);
 8002b98:	2002      	movs	r0, #2
 8002b9a:	f001 febb 	bl	8004914 <HAL_Delay>
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 8002b9e:	480b      	ldr	r0, [pc, #44]	; (8002bcc <Can_Init+0x4c>)
 8002ba0:	f002 fcae 	bl	8005500 <HAL_CAN_Start>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <Can_Init+0x2e>
	{
	    return false;
 8002baa:	2300      	movs	r3, #0
 8002bac:	e00c      	b.n	8002bc8 <Can_Init+0x48>
	    Error_Handler();
	}
	//if (CAN_IT_Enabled){
	//}
	myTxMessage.RTR = CAN_RTR_DATA;
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <Can_Init+0x50>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	60da      	str	r2, [r3, #12]
	myTxMessage.IDE = CAN_ID_STD;
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <Can_Init+0x50>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
	myTxMessage.DLC = 8;
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <Can_Init+0x50>)
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	611a      	str	r2, [r3, #16]
	myTxMessage.TransmitGlobalTime = DISABLE;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <Can_Init+0x50>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	751a      	strb	r2, [r3, #20]
	return true;
 8002bc6:	2301      	movs	r3, #1
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200002cc 	.word	0x200002cc
 8002bd0:	20000320 	.word	0x20000320

08002bd4 <CAN_FilterConfig>:
bool CAN_FilterConfig(void){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef myFilterConfig;
	myFilterConfig.FilterBank = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
	myFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61bb      	str	r3, [r7, #24]
	myFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002be2:	2301      	movs	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
	myFilterConfig.FilterIdHigh = 0x000;
 8002be6:	2300      	movs	r3, #0
 8002be8:	603b      	str	r3, [r7, #0]
	myFilterConfig.FilterIdLow = 0x0000;
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
	myFilterConfig.FilterMaskIdHigh = 0x0000; //0xFFE0
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
	myFilterConfig.FilterMaskIdLow = 0x0000;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
	myFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
	myFilterConfig.FilterActivation = ENABLE;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	623b      	str	r3, [r7, #32]
	myFilterConfig.SlaveStartFilterBank = 14;
 8002bfe:	230e      	movs	r3, #14
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan, &myFilterConfig) != HAL_OK)
 8002c02:	463b      	mov	r3, r7
 8002c04:	4619      	mov	r1, r3
 8002c06:	4806      	ldr	r0, [pc, #24]	; (8002c20 <CAN_FilterConfig+0x4c>)
 8002c08:	f002 fbb1 	bl	800536e <HAL_CAN_ConfigFilter>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <CAN_FilterConfig+0x42>
	{
	  return false;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <CAN_FilterConfig+0x44>
	}
	return true;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	200002cc 	.word	0x200002cc

08002c24 <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002c2c:	1d39      	adds	r1, r7, #4
 8002c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c32:	2201      	movs	r2, #1
 8002c34:	4803      	ldr	r0, [pc, #12]	; (8002c44 <__io_putchar+0x20>)
 8002c36:	f005 f96a 	bl	8007f0e <HAL_UART_Transmit>

  return ch;
 8002c3a:	687b      	ldr	r3, [r7, #4]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	2000049c 	.word	0x2000049c

08002c48 <candecode>:

void candecode(CAN_RxHeaderTypeDef *tempRx,uint8_t *tempCanData){
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]

	int x = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
	  switch (tempRx->StdId)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f2a3 2307 	subw	r3, r3, #519	; 0x207
 8002c5e:	2b44      	cmp	r3, #68	; 0x44
 8002c60:	f200 82cb 	bhi.w	80031fa <candecode+0x5b2>
 8002c64:	a201      	add	r2, pc, #4	; (adr r2, 8002c6c <candecode+0x24>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002ee3 	.word	0x08002ee3
 8002c70:	080031fb 	.word	0x080031fb
 8002c74:	08002f7f 	.word	0x08002f7f
 8002c78:	080031fb 	.word	0x080031fb
 8002c7c:	08003049 	.word	0x08003049
 8002c80:	080031fb 	.word	0x080031fb
 8002c84:	080031fb 	.word	0x080031fb
 8002c88:	080031fb 	.word	0x080031fb
 8002c8c:	080031fb 	.word	0x080031fb
 8002c90:	080031fb 	.word	0x080031fb
 8002c94:	080031fb 	.word	0x080031fb
 8002c98:	080031fb 	.word	0x080031fb
 8002c9c:	080031fb 	.word	0x080031fb
 8002ca0:	080031fb 	.word	0x080031fb
 8002ca4:	080031fb 	.word	0x080031fb
 8002ca8:	080031fb 	.word	0x080031fb
 8002cac:	08002d81 	.word	0x08002d81
 8002cb0:	080031fb 	.word	0x080031fb
 8002cb4:	08002d8b 	.word	0x08002d8b
 8002cb8:	080031fb 	.word	0x080031fb
 8002cbc:	08002d95 	.word	0x08002d95
 8002cc0:	080031fb 	.word	0x080031fb
 8002cc4:	080031fb 	.word	0x080031fb
 8002cc8:	080031fb 	.word	0x080031fb
 8002ccc:	080031fb 	.word	0x080031fb
 8002cd0:	080031fb 	.word	0x080031fb
 8002cd4:	080031fb 	.word	0x080031fb
 8002cd8:	080031fb 	.word	0x080031fb
 8002cdc:	080031fb 	.word	0x080031fb
 8002ce0:	080031fb 	.word	0x080031fb
 8002ce4:	080031fb 	.word	0x080031fb
 8002ce8:	080031fb 	.word	0x080031fb
 8002cec:	080030e5 	.word	0x080030e5
 8002cf0:	080031fb 	.word	0x080031fb
 8002cf4:	08003143 	.word	0x08003143
 8002cf8:	080031fb 	.word	0x080031fb
 8002cfc:	0800319d 	.word	0x0800319d
 8002d00:	080031fb 	.word	0x080031fb
 8002d04:	080031fb 	.word	0x080031fb
 8002d08:	080031fb 	.word	0x080031fb
 8002d0c:	080031fb 	.word	0x080031fb
 8002d10:	080031fb 	.word	0x080031fb
 8002d14:	080031fb 	.word	0x080031fb
 8002d18:	080031fb 	.word	0x080031fb
 8002d1c:	080031fb 	.word	0x080031fb
 8002d20:	080031fb 	.word	0x080031fb
 8002d24:	080031fb 	.word	0x080031fb
 8002d28:	080031fb 	.word	0x080031fb
 8002d2c:	08002e77 	.word	0x08002e77
 8002d30:	080031fb 	.word	0x080031fb
 8002d34:	08002e0b 	.word	0x08002e0b
 8002d38:	080031fb 	.word	0x080031fb
 8002d3c:	08002dd5 	.word	0x08002dd5
 8002d40:	080031fb 	.word	0x080031fb
 8002d44:	080031fb 	.word	0x080031fb
 8002d48:	080031fb 	.word	0x080031fb
 8002d4c:	080031fb 	.word	0x080031fb
 8002d50:	080031fb 	.word	0x080031fb
 8002d54:	080031fb 	.word	0x080031fb
 8002d58:	080031fb 	.word	0x080031fb
 8002d5c:	080031fb 	.word	0x080031fb
 8002d60:	080031fb 	.word	0x080031fb
 8002d64:	080031fb 	.word	0x080031fb
 8002d68:	080031fb 	.word	0x080031fb
 8002d6c:	08002ead 	.word	0x08002ead
 8002d70:	080031fb 	.word	0x080031fb
 8002d74:	08002e41 	.word	0x08002e41
 8002d78:	080031fb 	.word	0x080031fb
 8002d7c:	08002d9f 	.word	0x08002d9f
	  {
	    case 0x217: //phase 1 Status message
	      ModStat[0] = tempCanData[0];
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	4ba0      	ldr	r3, [pc, #640]	; (8003008 <candecode+0x3c0>)
 8002d86:	701a      	strb	r2, [r3, #0]
	      break;
 8002d88:	e238      	b.n	80031fc <candecode+0x5b4>

	    case 0x219: //phase 2 Status message
	      ModStat[1] = tempCanData[0];
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	4b9e      	ldr	r3, [pc, #632]	; (8003008 <candecode+0x3c0>)
 8002d90:	705a      	strb	r2, [r3, #1]
	      break;
 8002d92:	e233      	b.n	80031fc <candecode+0x5b4>

	    case 0x21B: //phase 3 Status message
	      ModStat[2] = tempCanData[0];
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	781a      	ldrb	r2, [r3, #0]
 8002d98:	4b9b      	ldr	r3, [pc, #620]	; (8003008 <candecode+0x3c0>)
 8002d9a:	709a      	strb	r2, [r3, #2]
	      break;
 8002d9c:	e22e      	b.n	80031fc <candecode+0x5b4>

	    case 0x24B: //phase 3 temp message 2
	      curtemplim[2] = tempCanData[0] * 0.234375;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7fd fb2e 	bl	8000404 <__aeabi_i2d>
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	4b97      	ldr	r3, [pc, #604]	; (800300c <candecode+0x3c4>)
 8002dae:	f7fd fb93 	bl	80004d8 <__aeabi_dmul>
 8002db2:	4603      	mov	r3, r0
 8002db4:	460c      	mov	r4, r1
 8002db6:	4618      	mov	r0, r3
 8002db8:	4621      	mov	r1, r4
 8002dba:	f7fd fe65 	bl	8000a88 <__aeabi_d2uiz>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4b93      	ldr	r3, [pc, #588]	; (8003010 <candecode+0x3c8>)
 8002dc4:	709a      	strb	r2, [r3, #2]
	      newframe = newframe | 1;
 8002dc6:	4b93      	ldr	r3, [pc, #588]	; (8003014 <candecode+0x3cc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	4a91      	ldr	r2, [pc, #580]	; (8003014 <candecode+0x3cc>)
 8002dd0:	6013      	str	r3, [r2, #0]
	      break;
 8002dd2:	e213      	b.n	80031fc <candecode+0x5b4>

	    case 0x23B: //phase 3 temp message 1
	      templeg[0][2] = tempCanData[0] - 40;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	3b28      	subs	r3, #40	; 0x28
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b8e      	ldr	r3, [pc, #568]	; (8003018 <candecode+0x3d0>)
 8002dde:	709a      	strb	r2, [r3, #2]
	      templeg[1][2] = tempCanData[1] - 40;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	3301      	adds	r3, #1
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	3b28      	subs	r3, #40	; 0x28
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4b8b      	ldr	r3, [pc, #556]	; (8003018 <candecode+0x3d0>)
 8002dec:	715a      	strb	r2, [r3, #5]
	      inlettarg[2] = tempCanData[5] - 40;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	3305      	adds	r3, #5
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	3b28      	subs	r3, #40	; 0x28
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	4b88      	ldr	r3, [pc, #544]	; (800301c <candecode+0x3d4>)
 8002dfa:	709a      	strb	r2, [r3, #2]
	      newframe = newframe | 1;
 8002dfc:	4b85      	ldr	r3, [pc, #532]	; (8003014 <candecode+0x3cc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	4a83      	ldr	r2, [pc, #524]	; (8003014 <candecode+0x3cc>)
 8002e06:	6013      	str	r3, [r2, #0]
	      break;
 8002e08:	e1f8      	b.n	80031fc <candecode+0x5b4>

	    case 0x239: //phase 2 temp message 1
	      templeg[0][1] = tempCanData[0] - 40;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	3b28      	subs	r3, #40	; 0x28
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b81      	ldr	r3, [pc, #516]	; (8003018 <candecode+0x3d0>)
 8002e14:	705a      	strb	r2, [r3, #1]
	      templeg[1][1] = tempCanData[1] - 40;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	3b28      	subs	r3, #40	; 0x28
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b7d      	ldr	r3, [pc, #500]	; (8003018 <candecode+0x3d0>)
 8002e22:	711a      	strb	r2, [r3, #4]
	      inlettarg[1] = tempCanData[5] - 40;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	3305      	adds	r3, #5
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	3b28      	subs	r3, #40	; 0x28
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4b7b      	ldr	r3, [pc, #492]	; (800301c <candecode+0x3d4>)
 8002e30:	705a      	strb	r2, [r3, #1]
	      newframe = newframe | 1;
 8002e32:	4b78      	ldr	r3, [pc, #480]	; (8003014 <candecode+0x3cc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	4a76      	ldr	r2, [pc, #472]	; (8003014 <candecode+0x3cc>)
 8002e3c:	6013      	str	r3, [r2, #0]
	      break;
 8002e3e:	e1dd      	b.n	80031fc <candecode+0x5b4>
	    case 0x249: //phase 2 temp message 2
	      curtemplim[1] = tempCanData[0] * 0.234375;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fadd 	bl	8000404 <__aeabi_i2d>
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	4b6f      	ldr	r3, [pc, #444]	; (800300c <candecode+0x3c4>)
 8002e50:	f7fd fb42 	bl	80004d8 <__aeabi_dmul>
 8002e54:	4603      	mov	r3, r0
 8002e56:	460c      	mov	r4, r1
 8002e58:	4618      	mov	r0, r3
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	f7fd fe14 	bl	8000a88 <__aeabi_d2uiz>
 8002e60:	4603      	mov	r3, r0
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	4b6a      	ldr	r3, [pc, #424]	; (8003010 <candecode+0x3c8>)
 8002e66:	705a      	strb	r2, [r3, #1]
	      newframe = newframe | 1;
 8002e68:	4b6a      	ldr	r3, [pc, #424]	; (8003014 <candecode+0x3cc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	4a68      	ldr	r2, [pc, #416]	; (8003014 <candecode+0x3cc>)
 8002e72:	6013      	str	r3, [r2, #0]
	      break;
 8002e74:	e1c2      	b.n	80031fc <candecode+0x5b4>

	    case 0x237: //phase 1 temp message 1
	      templeg[0][0] = tempCanData[0] - 40;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	3b28      	subs	r3, #40	; 0x28
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	4b66      	ldr	r3, [pc, #408]	; (8003018 <candecode+0x3d0>)
 8002e80:	701a      	strb	r2, [r3, #0]
	      templeg[1][0] = tempCanData[1] - 40;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	3301      	adds	r3, #1
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	3b28      	subs	r3, #40	; 0x28
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	4b62      	ldr	r3, [pc, #392]	; (8003018 <candecode+0x3d0>)
 8002e8e:	70da      	strb	r2, [r3, #3]
	      inlettarg[0] = tempCanData[5] - 40;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	3305      	adds	r3, #5
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	3b28      	subs	r3, #40	; 0x28
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4b60      	ldr	r3, [pc, #384]	; (800301c <candecode+0x3d4>)
 8002e9c:	701a      	strb	r2, [r3, #0]
	      newframe = newframe | 1;
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	; (8003014 <candecode+0x3cc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	4a5b      	ldr	r2, [pc, #364]	; (8003014 <candecode+0x3cc>)
 8002ea8:	6013      	str	r3, [r2, #0]
	      break;
 8002eaa:	e1a7      	b.n	80031fc <candecode+0x5b4>
	    case 0x247: //phase 2 temp message 2
	      curtemplim[0] = tempCanData[0] * 0.234375;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd faa7 	bl	8000404 <__aeabi_i2d>
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	4b54      	ldr	r3, [pc, #336]	; (800300c <candecode+0x3c4>)
 8002ebc:	f7fd fb0c 	bl	80004d8 <__aeabi_dmul>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	460c      	mov	r4, r1
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	f7fd fdde 	bl	8000a88 <__aeabi_d2uiz>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <candecode+0x3c8>)
 8002ed2:	701a      	strb	r2, [r3, #0]
	      newframe = newframe | 1;
 8002ed4:	4b4f      	ldr	r3, [pc, #316]	; (8003014 <candecode+0x3cc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	4a4d      	ldr	r2, [pc, #308]	; (8003014 <candecode+0x3cc>)
 8002ede:	6013      	str	r3, [r2, #0]
	      break;
 8002ee0:	e18c      	b.n	80031fc <candecode+0x5b4>

	    case 0x207: //phase 2 msg 0x209. phase 3 msg 0x20B
	      acvolt[0] = tempCanData[1];
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b4d      	ldr	r3, [pc, #308]	; (8003020 <candecode+0x3d8>)
 8002eec:	801a      	strh	r2, [r3, #0]
	      accur[0] = (uint16_t)((tempCanData[6] & 0x03) * 256 + tempCanData[5]) >> 1 ;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	3306      	adds	r3, #6
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	3305      	adds	r3, #5
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	4b44      	ldr	r3, [pc, #272]	; (8003024 <candecode+0x3dc>)
 8002f12:	801a      	strh	r2, [r3, #0]
	      x = tempCanData[1];// & 12;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	3301      	adds	r3, #1
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]
	      if (x > 0x46) //say 0x46 = 70V
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b46      	cmp	r3, #70	; 0x46
 8002f20:	dd03      	ble.n	8002f2a <candecode+0x2e2>
	      {
	        ACpres[0] = true;
 8002f22:	4b41      	ldr	r3, [pc, #260]	; (8003028 <candecode+0x3e0>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
 8002f28:	e002      	b.n	8002f30 <candecode+0x2e8>
	      }
	      else
	      {
	        ACpres[0] = false;
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <candecode+0x3e0>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
	      }
	      x = tempCanData[2] & 0x02; //was 40
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	3302      	adds	r3, #2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	60fb      	str	r3, [r7, #12]
	      if (x != 0)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <candecode+0x302>
	      {
	        ModEn[0] = true;
 8002f42:	4b3a      	ldr	r3, [pc, #232]	; (800302c <candecode+0x3e4>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	701a      	strb	r2, [r3, #0]
 8002f48:	e002      	b.n	8002f50 <candecode+0x308>
	      }
	      else
	      {
	        ModEn[0] = false;
 8002f4a:	4b38      	ldr	r3, [pc, #224]	; (800302c <candecode+0x3e4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
	      }
	      x = tempCanData[2] & 0x04; //was 20
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	3302      	adds	r3, #2
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	60fb      	str	r3, [r7, #12]
	      if (x != 0)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <candecode+0x322>
	      {
	        ModFlt[0] = true;
 8002f62:	4b33      	ldr	r3, [pc, #204]	; (8003030 <candecode+0x3e8>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	e002      	b.n	8002f70 <candecode+0x328>
	      }
	      else
	      {
	        ModFlt[0] = false;
 8002f6a:	4b31      	ldr	r3, [pc, #196]	; (8003030 <candecode+0x3e8>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
	      }
	      newframe = newframe | 1;
 8002f70:	4b28      	ldr	r3, [pc, #160]	; (8003014 <candecode+0x3cc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	4a26      	ldr	r2, [pc, #152]	; (8003014 <candecode+0x3cc>)
 8002f7a:	6013      	str	r3, [r2, #0]
	      break;
 8002f7c:	e13e      	b.n	80031fc <candecode+0x5b4>
	    case 0x209: //phase 2 msg 0x209. phase 3 msg 0x20B
	      acvolt[1] = tempCanData[1];
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	3301      	adds	r3, #1
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	4b26      	ldr	r3, [pc, #152]	; (8003020 <candecode+0x3d8>)
 8002f88:	805a      	strh	r2, [r3, #2]
	      accur[1] = (uint16_t)((tempCanData[6] & 0x03) * 256 + tempCanData[5]) >> 1 ;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	3306      	adds	r3, #6
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	3305      	adds	r3, #5
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <candecode+0x3dc>)
 8002fae:	805a      	strh	r2, [r3, #2]
	      x = tempCanData[1];// & 12;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]
	      if (x > 0x46) //say 0x46 = 70V)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b46      	cmp	r3, #70	; 0x46
 8002fbc:	dd03      	ble.n	8002fc6 <candecode+0x37e>
	      {
	        ACpres[1] = true;
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <candecode+0x3e0>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	705a      	strb	r2, [r3, #1]
 8002fc4:	e002      	b.n	8002fcc <candecode+0x384>
	      }
	      else
	      {
	        ACpres[1] = false;
 8002fc6:	4b18      	ldr	r3, [pc, #96]	; (8003028 <candecode+0x3e0>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	705a      	strb	r2, [r3, #1]
	      }
	      x = tempCanData[2] & 0x02; //was 40
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	3302      	adds	r3, #2
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	60fb      	str	r3, [r7, #12]
	      if (x != 0)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <candecode+0x39e>
	      {
	        ModEn[1] = true;
 8002fde:	4b13      	ldr	r3, [pc, #76]	; (800302c <candecode+0x3e4>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	705a      	strb	r2, [r3, #1]
 8002fe4:	e002      	b.n	8002fec <candecode+0x3a4>
	      }
	      else
	      {
	        ModEn[1] = false;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <candecode+0x3e4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	705a      	strb	r2, [r3, #1]
	      }
	      x = tempCanData[2] & 0x04; //was 20
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	3302      	adds	r3, #2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	60fb      	str	r3, [r7, #12]
	      if (x != 0)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01a      	beq.n	8003034 <candecode+0x3ec>
	      {
	        ModFlt[1] = true;
 8002ffe:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <candecode+0x3e8>)
 8003000:	2201      	movs	r2, #1
 8003002:	705a      	strb	r2, [r3, #1]
 8003004:	e019      	b.n	800303a <candecode+0x3f2>
 8003006:	bf00      	nop
 8003008:	2000027c 	.word	0x2000027c
 800300c:	3fce0000 	.word	0x3fce0000
 8003010:	20000264 	.word	0x20000264
 8003014:	20000280 	.word	0x20000280
 8003018:	20000268 	.word	0x20000268
 800301c:	20000260 	.word	0x20000260
 8003020:	20000250 	.word	0x20000250
 8003024:	20000258 	.word	0x20000258
 8003028:	20000270 	.word	0x20000270
 800302c:	20000274 	.word	0x20000274
 8003030:	20000278 	.word	0x20000278
	      }
	      else
	      {
	        ModFlt[1] = false;
 8003034:	4b78      	ldr	r3, [pc, #480]	; (8003218 <candecode+0x5d0>)
 8003036:	2200      	movs	r2, #0
 8003038:	705a      	strb	r2, [r3, #1]
	      }
	      newframe = newframe | 1;
 800303a:	4b78      	ldr	r3, [pc, #480]	; (800321c <candecode+0x5d4>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	4a76      	ldr	r2, [pc, #472]	; (800321c <candecode+0x5d4>)
 8003044:	6013      	str	r3, [r2, #0]
	      break;
 8003046:	e0d9      	b.n	80031fc <candecode+0x5b4>
	    case 0x20B: //phase 2 msg 0x209. phase 3 msg 0x20B
	      acvolt[2] = tempCanData[1];
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	b29a      	uxth	r2, r3
 8003050:	4b73      	ldr	r3, [pc, #460]	; (8003220 <candecode+0x5d8>)
 8003052:	809a      	strh	r2, [r3, #4]
	      accur[2] = (uint16_t)((tempCanData[6] & 0x03) * 256 + tempCanData[5]) >> 1 ;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	3306      	adds	r3, #6
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b29b      	uxth	r3, r3
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	b29b      	uxth	r3, r3
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	b29a      	uxth	r2, r3
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	3305      	adds	r3, #5
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	4413      	add	r3, r2
 8003070:	b29b      	uxth	r3, r3
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	4b6b      	ldr	r3, [pc, #428]	; (8003224 <candecode+0x5dc>)
 8003078:	809a      	strh	r2, [r3, #4]
	      x = tempCanData[1];// & 12;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]
	      if (x > 0x46) //say 0x46 = 70V)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b46      	cmp	r3, #70	; 0x46
 8003086:	dd03      	ble.n	8003090 <candecode+0x448>
	      {
	        ACpres[2] = true;
 8003088:	4b67      	ldr	r3, [pc, #412]	; (8003228 <candecode+0x5e0>)
 800308a:	2201      	movs	r2, #1
 800308c:	709a      	strb	r2, [r3, #2]
 800308e:	e002      	b.n	8003096 <candecode+0x44e>
	      }
	      else
	      {
	        ACpres[2] = false;
 8003090:	4b65      	ldr	r3, [pc, #404]	; (8003228 <candecode+0x5e0>)
 8003092:	2200      	movs	r2, #0
 8003094:	709a      	strb	r2, [r3, #2]
	      }
	      x = tempCanData[2] & 0x02; //was 40
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	3302      	adds	r3, #2
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	60fb      	str	r3, [r7, #12]
	      if (x != 0)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d003      	beq.n	80030b0 <candecode+0x468>
	      {
	        ModEn[2] = true;
 80030a8:	4b60      	ldr	r3, [pc, #384]	; (800322c <candecode+0x5e4>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	709a      	strb	r2, [r3, #2]
 80030ae:	e002      	b.n	80030b6 <candecode+0x46e>
	      }
	      else
	      {
	        ModEn[2] = false;
 80030b0:	4b5e      	ldr	r3, [pc, #376]	; (800322c <candecode+0x5e4>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	709a      	strb	r2, [r3, #2]
	      }
	      x = tempCanData[2] & 0x04; //was 20
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	3302      	adds	r3, #2
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	60fb      	str	r3, [r7, #12]
	      if (x != 0)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <candecode+0x488>
	      {
	        ModFlt[2] = true;
 80030c8:	4b53      	ldr	r3, [pc, #332]	; (8003218 <candecode+0x5d0>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	709a      	strb	r2, [r3, #2]
 80030ce:	e002      	b.n	80030d6 <candecode+0x48e>
	      }
	      else
	      {
	        ModFlt[2] = false;
 80030d0:	4b51      	ldr	r3, [pc, #324]	; (8003218 <candecode+0x5d0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	709a      	strb	r2, [r3, #2]
	      }
	      newframe = newframe | 1;
 80030d6:	4b51      	ldr	r3, [pc, #324]	; (800321c <candecode+0x5d4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	4a4f      	ldr	r2, [pc, #316]	; (800321c <candecode+0x5d4>)
 80030e0:	6013      	str	r3, [r2, #0]
	      break;
 80030e2:	e08b      	b.n	80031fc <candecode+0x5b4>
	    case 0x227: //dc feedback. Phase 1 measured DC battery current and voltage Charger phase 2 msg : 0x229. Charger phase 3 mesg : 0x22B
	      dccur[0] = ((tempCanData[5] << 8) + tempCanData[4]) ;//* 0.000839233 convert in rest of code
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	3305      	adds	r3, #5
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	3304      	adds	r3, #4
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <candecode+0x5e8>)
 80030fe:	801a      	strh	r2, [r3, #0]
	      dcvolt[0] = ((tempCanData[3] << 8) + tempCanData[2]) * 0.0105286; //we left shift 8 bits to make a 16bit uint.
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	3303      	adds	r3, #3
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	3202      	adds	r2, #2
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	4413      	add	r3, r2
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd f977 	bl	8000404 <__aeabi_i2d>
 8003116:	a33c      	add	r3, pc, #240	; (adr r3, 8003208 <candecode+0x5c0>)
 8003118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311c:	f7fd f9dc 	bl	80004d8 <__aeabi_dmul>
 8003120:	4603      	mov	r3, r0
 8003122:	460c      	mov	r4, r1
 8003124:	4618      	mov	r0, r3
 8003126:	4621      	mov	r1, r4
 8003128:	f7fd fcae 	bl	8000a88 <__aeabi_d2uiz>
 800312c:	4603      	mov	r3, r0
 800312e:	b29a      	uxth	r2, r3
 8003130:	4b40      	ldr	r3, [pc, #256]	; (8003234 <candecode+0x5ec>)
 8003132:	801a      	strh	r2, [r3, #0]
	      newframe = newframe | 2;
 8003134:	4b39      	ldr	r3, [pc, #228]	; (800321c <candecode+0x5d4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f043 0302 	orr.w	r3, r3, #2
 800313c:	4a37      	ldr	r2, [pc, #220]	; (800321c <candecode+0x5d4>)
 800313e:	6013      	str	r3, [r2, #0]
	      break;
 8003140:	e05c      	b.n	80031fc <candecode+0x5b4>
	    case 0x229: //dc feedback. Phase 2 measured DC battery current and voltage Charger phase 2 msg : 0x229. Charger phase 3 mesg : 0x22B
	      dccur[1] = ((tempCanData[5]) << tempCanData[4]) ;//* 0.000839233 convert in rest of code
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	3305      	adds	r3, #5
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	3304      	adds	r3, #4
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	b29a      	uxth	r2, r3
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <candecode+0x5e8>)
 8003158:	805a      	strh	r2, [r3, #2]
	      dcvolt[1] = ((tempCanData[3] << 8) + tempCanData[2]) * 0.0105286; //we left shift 8 bits to make a 16bit uint.
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	3303      	adds	r3, #3
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	3202      	adds	r2, #2
 8003166:	7812      	ldrb	r2, [r2, #0]
 8003168:	4413      	add	r3, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd f94a 	bl	8000404 <__aeabi_i2d>
 8003170:	a325      	add	r3, pc, #148	; (adr r3, 8003208 <candecode+0x5c0>)
 8003172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003176:	f7fd f9af 	bl	80004d8 <__aeabi_dmul>
 800317a:	4603      	mov	r3, r0
 800317c:	460c      	mov	r4, r1
 800317e:	4618      	mov	r0, r3
 8003180:	4621      	mov	r1, r4
 8003182:	f7fd fc81 	bl	8000a88 <__aeabi_d2uiz>
 8003186:	4603      	mov	r3, r0
 8003188:	b29a      	uxth	r2, r3
 800318a:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <candecode+0x5ec>)
 800318c:	805a      	strh	r2, [r3, #2]
	      newframe = newframe | 2;
 800318e:	4b23      	ldr	r3, [pc, #140]	; (800321c <candecode+0x5d4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	4a21      	ldr	r2, [pc, #132]	; (800321c <candecode+0x5d4>)
 8003198:	6013      	str	r3, [r2, #0]
	      break;
 800319a:	e02f      	b.n	80031fc <candecode+0x5b4>
	    case 0x22B: //dc feedback. Phase 3 measured DC battery current and voltage Charger phase 2 msg : 0x229. Charger phase 3 mesg : 0x22B
	      dccur[2] = ((tempCanData[5] << 8) + tempCanData[4]) ;//* 0.000839233 convert in rest of code
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	3305      	adds	r3, #5
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	3304      	adds	r3, #4
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <candecode+0x5e8>)
 80031b6:	809a      	strh	r2, [r3, #4]
	      dcvolt[2] = ((tempCanData[3] << 8) + tempCanData[2]) * 0.01052856; //we left shift 8 bits to make a 16bit uint.
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	3303      	adds	r3, #3
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	3202      	adds	r2, #2
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f91b 	bl	8000404 <__aeabi_i2d>
 80031ce:	a310      	add	r3, pc, #64	; (adr r3, 8003210 <candecode+0x5c8>)
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f7fd f980 	bl	80004d8 <__aeabi_dmul>
 80031d8:	4603      	mov	r3, r0
 80031da:	460c      	mov	r4, r1
 80031dc:	4618      	mov	r0, r3
 80031de:	4621      	mov	r1, r4
 80031e0:	f7fd fc52 	bl	8000a88 <__aeabi_d2uiz>
 80031e4:	4603      	mov	r3, r0
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <candecode+0x5ec>)
 80031ea:	809a      	strh	r2, [r3, #4]
	      newframe = newframe | 2;
 80031ec:	4b0b      	ldr	r3, [pc, #44]	; (800321c <candecode+0x5d4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	4a09      	ldr	r2, [pc, #36]	; (800321c <candecode+0x5d4>)
 80031f6:	6013      	str	r3, [r2, #0]
	      break;
 80031f8:	e000      	b.n	80031fc <candecode+0x5b4>

	    default:
	      // if nothing else matches, do the default
	      break;
 80031fa:	bf00      	nop
	}
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	bd90      	pop	{r4, r7, pc}
 8003204:	f3af 8000 	nop.w
 8003208:	c5619e81 	.word	0xc5619e81
 800320c:	3f859004 	.word	0x3f859004
 8003210:	66fde5f4 	.word	0x66fde5f4
 8003214:	3f858fff 	.word	0x3f858fff
 8003218:	20000278 	.word	0x20000278
 800321c:	20000280 	.word	0x20000280
 8003220:	20000250 	.word	0x20000250
 8003224:	20000258 	.word	0x20000258
 8003228:	20000270 	.word	0x20000270
 800322c:	20000274 	.word	0x20000274
 8003230:	20000248 	.word	0x20000248
 8003234:	20000240 	.word	0x20000240

08003238 <menu>:

void menu(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af02      	add	r7, sp, #8
  if (menuload == 1)
 800323e:	4bba      	ldr	r3, [pc, #744]	; (8003528 <menu+0x2f0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b01      	cmp	r3, #1
 8003244:	f040 821e 	bne.w	8003684 <menu+0x44c>
  {
    switch (incomingByte)
 8003248:	4bb8      	ldr	r3, [pc, #736]	; (800352c <menu+0x2f4>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	3b31      	subs	r3, #49	; 0x31
 800324e:	2b43      	cmp	r3, #67	; 0x43
 8003250:	f200 8218 	bhi.w	8003684 <menu+0x44c>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <menu+0x24>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	080033c7 	.word	0x080033c7
 8003260:	080033ef 	.word	0x080033ef
 8003264:	0800342b 	.word	0x0800342b
 8003268:	08003475 	.word	0x08003475
 800326c:	080034cd 	.word	0x080034cd
 8003270:	08003549 	.word	0x08003549
 8003274:	08003599 	.word	0x08003599
 8003278:	08003685 	.word	0x08003685
 800327c:	080035ed 	.word	0x080035ed
 8003280:	08003685 	.word	0x08003685
 8003284:	08003685 	.word	0x08003685
 8003288:	08003685 	.word	0x08003685
 800328c:	08003685 	.word	0x08003685
 8003290:	08003685 	.word	0x08003685
 8003294:	08003685 	.word	0x08003685
 8003298:	08003685 	.word	0x08003685
 800329c:	08003685 	.word	0x08003685
 80032a0:	08003685 	.word	0x08003685
 80032a4:	08003685 	.word	0x08003685
 80032a8:	08003685 	.word	0x08003685
 80032ac:	08003685 	.word	0x08003685
 80032b0:	08003685 	.word	0x08003685
 80032b4:	08003685 	.word	0x08003685
 80032b8:	08003685 	.word	0x08003685
 80032bc:	08003685 	.word	0x08003685
 80032c0:	08003685 	.word	0x08003685
 80032c4:	08003685 	.word	0x08003685
 80032c8:	08003685 	.word	0x08003685
 80032cc:	08003685 	.word	0x08003685
 80032d0:	08003685 	.word	0x08003685
 80032d4:	08003685 	.word	0x08003685
 80032d8:	08003685 	.word	0x08003685
 80032dc:	08003685 	.word	0x08003685
 80032e0:	08003685 	.word	0x08003685
 80032e4:	08003685 	.word	0x08003685
 80032e8:	08003685 	.word	0x08003685
 80032ec:	08003685 	.word	0x08003685
 80032f0:	08003685 	.word	0x08003685
 80032f4:	08003685 	.word	0x08003685
 80032f8:	08003685 	.word	0x08003685
 80032fc:	08003685 	.word	0x08003685
 8003300:	08003685 	.word	0x08003685
 8003304:	08003685 	.word	0x08003685
 8003308:	08003685 	.word	0x08003685
 800330c:	08003685 	.word	0x08003685
 8003310:	08003685 	.word	0x08003685
 8003314:	08003685 	.word	0x08003685
 8003318:	08003685 	.word	0x08003685
 800331c:	0800337b 	.word	0x0800337b
 8003320:	080033a1 	.word	0x080033a1
 8003324:	08003685 	.word	0x08003685
 8003328:	08003685 	.word	0x08003685
 800332c:	08003685 	.word	0x08003685
 8003330:	08003685 	.word	0x08003685
 8003334:	08003685 	.word	0x08003685
 8003338:	08003685 	.word	0x08003685
 800333c:	08003685 	.word	0x08003685
 8003340:	08003685 	.word	0x08003685
 8003344:	08003685 	.word	0x08003685
 8003348:	08003685 	.word	0x08003685
 800334c:	08003685 	.word	0x08003685
 8003350:	08003685 	.word	0x08003685
 8003354:	08003685 	.word	0x08003685
 8003358:	08003685 	.word	0x08003685
 800335c:	0800336d 	.word	0x0800336d
 8003360:	08003685 	.word	0x08003685
 8003364:	08003685 	.word	0x08003685
 8003368:	08003619 	.word	0x08003619
    {
      case 'q': //q for quit
        debug = 1;
 800336c:	4b70      	ldr	r3, [pc, #448]	; (8003530 <menu+0x2f8>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]
        menuload = 0;
 8003372:	4b6d      	ldr	r3, [pc, #436]	; (8003528 <menu+0x2f0>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
        break;
 8003378:	e184      	b.n	8003684 <menu+0x44c>

      case 'a'://a for auto enable
        candebug ++;
 800337a:	4b6e      	ldr	r3, [pc, #440]	; (8003534 <menu+0x2fc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3301      	adds	r3, #1
 8003380:	4a6c      	ldr	r2, [pc, #432]	; (8003534 <menu+0x2fc>)
 8003382:	6013      	str	r3, [r2, #0]
        if (candebug > 1)
 8003384:	4b6b      	ldr	r3, [pc, #428]	; (8003534 <menu+0x2fc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	dd02      	ble.n	8003392 <menu+0x15a>
        {
          candebug = 0;
 800338c:	4b69      	ldr	r3, [pc, #420]	; (8003534 <menu+0x2fc>)
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
        }
        menuload = 0;
 8003392:	4b65      	ldr	r3, [pc, #404]	; (8003528 <menu+0x2f0>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
        incomingByte = 'd';
 8003398:	4b64      	ldr	r3, [pc, #400]	; (800352c <menu+0x2f4>)
 800339a:	2264      	movs	r2, #100	; 0x64
 800339c:	701a      	strb	r2, [r3, #0]
        break;
 800339e:	e171      	b.n	8003684 <menu+0x44c>

      case 'b'://a for auto enable
        evsedebug ++;
 80033a0:	4b65      	ldr	r3, [pc, #404]	; (8003538 <menu+0x300>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	4a64      	ldr	r2, [pc, #400]	; (8003538 <menu+0x300>)
 80033a8:	6013      	str	r3, [r2, #0]
        if (evsedebug > 1)
 80033aa:	4b63      	ldr	r3, [pc, #396]	; (8003538 <menu+0x300>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	dd02      	ble.n	80033b8 <menu+0x180>
        {
          evsedebug = 0;
 80033b2:	4b61      	ldr	r3, [pc, #388]	; (8003538 <menu+0x300>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
        }
        menuload = 0;
 80033b8:	4b5b      	ldr	r3, [pc, #364]	; (8003528 <menu+0x2f0>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
        incomingByte = 'd';
 80033be:	4b5b      	ldr	r3, [pc, #364]	; (800352c <menu+0x2f4>)
 80033c0:	2264      	movs	r2, #100	; 0x64
 80033c2:	701a      	strb	r2, [r3, #0]
        break;
 80033c4:	e15e      	b.n	8003684 <menu+0x44c>


      case '1'://a for auto enable
        parameters.autoEnableCharger ++;
 80033c6:	4b5d      	ldr	r3, [pc, #372]	; (800353c <menu+0x304>)
 80033c8:	78db      	ldrb	r3, [r3, #3]
 80033ca:	3301      	adds	r3, #1
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4b5b      	ldr	r3, [pc, #364]	; (800353c <menu+0x304>)
 80033d0:	70da      	strb	r2, [r3, #3]
        if (parameters.autoEnableCharger > 1)
 80033d2:	4b5a      	ldr	r3, [pc, #360]	; (800353c <menu+0x304>)
 80033d4:	78db      	ldrb	r3, [r3, #3]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d902      	bls.n	80033e0 <menu+0x1a8>
        {
          parameters.autoEnableCharger = 0;
 80033da:	4b58      	ldr	r3, [pc, #352]	; (800353c <menu+0x304>)
 80033dc:	2200      	movs	r2, #0
 80033de:	70da      	strb	r2, [r3, #3]
        }
        menuload = 0;
 80033e0:	4b51      	ldr	r3, [pc, #324]	; (8003528 <menu+0x2f0>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
        incomingByte = 'd';
 80033e6:	4b51      	ldr	r3, [pc, #324]	; (800352c <menu+0x2f4>)
 80033e8:	2264      	movs	r2, #100	; 0x64
 80033ea:	701a      	strb	r2, [r3, #0]
        break;
 80033ec:	e14a      	b.n	8003684 <menu+0x44c>

      case '2'://e for enabling chargers followed by numbers to indicate which ones to run

          memset(Uart_Rx,0,5);
 80033ee:	2205      	movs	r2, #5
 80033f0:	2100      	movs	r1, #0
 80033f2:	4853      	ldr	r0, [pc, #332]	; (8003540 <menu+0x308>)
 80033f4:	f005 f89a 	bl	800852c <memset>
          HAL_UART_Receive(&huart1, Uart_Rx, 5, 5);
 80033f8:	2305      	movs	r3, #5
 80033fa:	2205      	movs	r2, #5
 80033fc:	4950      	ldr	r1, [pc, #320]	; (8003540 <menu+0x308>)
 80033fe:	4851      	ldr	r0, [pc, #324]	; (8003544 <menu+0x30c>)
 8003400:	f004 fe1e 	bl	8008040 <HAL_UART_Receive>
		  if(Uart_Rx[0]!=0){
 8003404:	4b4e      	ldr	r3, [pc, #312]	; (8003540 <menu+0x308>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 812c 	beq.w	8003666 <menu+0x42e>
				parameters.enabledChargers=atoi((const char *)Uart_Rx);
 800340e:	484c      	ldr	r0, [pc, #304]	; (8003540 <menu+0x308>)
 8003410:	f005 f85d 	bl	80084ce <atoi>
 8003414:	4603      	mov	r3, r0
 8003416:	b2da      	uxtb	r2, r3
 8003418:	4b48      	ldr	r3, [pc, #288]	; (800353c <menu+0x304>)
 800341a:	705a      	strb	r2, [r3, #1]
				menuload = 0;
 800341c:	4b42      	ldr	r3, [pc, #264]	; (8003528 <menu+0x2f0>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
				incomingByte = 'd';
 8003422:	4b42      	ldr	r3, [pc, #264]	; (800352c <menu+0x2f4>)
 8003424:	2264      	movs	r2, #100	; 0x64
 8003426:	701a      	strb	r2, [r3, #0]
		  }
        break;
 8003428:	e11d      	b.n	8003666 <menu+0x42e>

      case '3'://a for can control enable
          memset(Uart_Rx,0,5);
 800342a:	2205      	movs	r2, #5
 800342c:	2100      	movs	r1, #0
 800342e:	4844      	ldr	r0, [pc, #272]	; (8003540 <menu+0x308>)
 8003430:	f005 f87c 	bl	800852c <memset>
          HAL_UART_Receive(&huart1, Uart_Rx, 5, 5);
 8003434:	2305      	movs	r3, #5
 8003436:	2205      	movs	r2, #5
 8003438:	4941      	ldr	r1, [pc, #260]	; (8003540 <menu+0x308>)
 800343a:	4842      	ldr	r0, [pc, #264]	; (8003544 <menu+0x30c>)
 800343c:	f004 fe00 	bl	8008040 <HAL_UART_Receive>
		  if(Uart_Rx[0]!=0){
 8003440:	4b3f      	ldr	r3, [pc, #252]	; (8003540 <menu+0x308>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8110 	beq.w	800366a <menu+0x432>
				parameters.canControl=atoi((const char *)Uart_Rx);
 800344a:	483d      	ldr	r0, [pc, #244]	; (8003540 <menu+0x308>)
 800344c:	f005 f83f 	bl	80084ce <atoi>
 8003450:	4603      	mov	r3, r0
 8003452:	b2da      	uxtb	r2, r3
 8003454:	4b39      	ldr	r3, [pc, #228]	; (800353c <menu+0x304>)
 8003456:	711a      	strb	r2, [r3, #4]
		          if (parameters.canControl > 3)
 8003458:	4b38      	ldr	r3, [pc, #224]	; (800353c <menu+0x304>)
 800345a:	791b      	ldrb	r3, [r3, #4]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d902      	bls.n	8003466 <menu+0x22e>
		          {
		            parameters.canControl = 0;
 8003460:	4b36      	ldr	r3, [pc, #216]	; (800353c <menu+0x304>)
 8003462:	2200      	movs	r2, #0
 8003464:	711a      	strb	r2, [r3, #4]
		          }
		          menuload = 0;
 8003466:	4b30      	ldr	r3, [pc, #192]	; (8003528 <menu+0x2f0>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
		          incomingByte = 'd';
 800346c:	4b2f      	ldr	r3, [pc, #188]	; (800352c <menu+0x2f4>)
 800346e:	2264      	movs	r2, #100	; 0x64
 8003470:	701a      	strb	r2, [r3, #0]
		  }

        break;
 8003472:	e0fa      	b.n	800366a <menu+0x432>

      case '4'://t for type
          memset(Uart_Rx,0,5);
 8003474:	2205      	movs	r2, #5
 8003476:	2100      	movs	r1, #0
 8003478:	4831      	ldr	r0, [pc, #196]	; (8003540 <menu+0x308>)
 800347a:	f005 f857 	bl	800852c <memset>
          HAL_UART_Receive(&huart1, Uart_Rx, 5, 5);
 800347e:	2305      	movs	r3, #5
 8003480:	2205      	movs	r2, #5
 8003482:	492f      	ldr	r1, [pc, #188]	; (8003540 <menu+0x308>)
 8003484:	482f      	ldr	r0, [pc, #188]	; (8003544 <menu+0x30c>)
 8003486:	f004 fddb 	bl	8008040 <HAL_UART_Receive>
		  if(Uart_Rx[0]!=0){
 800348a:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <menu+0x308>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80ed 	beq.w	800366e <menu+0x436>
			  parameters.type=atoi((const char *)Uart_Rx);
 8003494:	482a      	ldr	r0, [pc, #168]	; (8003540 <menu+0x308>)
 8003496:	f005 f81a 	bl	80084ce <atoi>
 800349a:	4603      	mov	r3, r0
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4b27      	ldr	r3, [pc, #156]	; (800353c <menu+0x304>)
 80034a0:	715a      	strb	r2, [r3, #5]
			  if (parameters.type > 2)
 80034a2:	4b26      	ldr	r3, [pc, #152]	; (800353c <menu+0x304>)
 80034a4:	795b      	ldrb	r3, [r3, #5]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d902      	bls.n	80034b0 <menu+0x278>
			  {
				parameters.type = 2;
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <menu+0x304>)
 80034ac:	2202      	movs	r2, #2
 80034ae:	715a      	strb	r2, [r3, #5]
			  }
			  if (parameters.type == 0)
 80034b0:	4b22      	ldr	r3, [pc, #136]	; (800353c <menu+0x304>)
 80034b2:	795b      	ldrb	r3, [r3, #5]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <menu+0x286>
			  {
				parameters.type = 2;
 80034b8:	4b20      	ldr	r3, [pc, #128]	; (800353c <menu+0x304>)
 80034ba:	2202      	movs	r2, #2
 80034bc:	715a      	strb	r2, [r3, #5]
			  }
			  menuload = 0;
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <menu+0x2f0>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
			  incomingByte = 'd';
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <menu+0x2f4>)
 80034c6:	2264      	movs	r2, #100	; 0x64
 80034c8:	701a      	strb	r2, [r3, #0]
        }
        break;
 80034ca:	e0d0      	b.n	800366e <menu+0x436>

      case '5'://a for can control enable
          memset(Uart_Rx,0,5);
 80034cc:	2205      	movs	r2, #5
 80034ce:	2100      	movs	r1, #0
 80034d0:	481b      	ldr	r0, [pc, #108]	; (8003540 <menu+0x308>)
 80034d2:	f005 f82b 	bl	800852c <memset>
          HAL_UART_Receive(&huart1, Uart_Rx, 5, 5);
 80034d6:	2305      	movs	r3, #5
 80034d8:	2205      	movs	r2, #5
 80034da:	4919      	ldr	r1, [pc, #100]	; (8003540 <menu+0x308>)
 80034dc:	4819      	ldr	r0, [pc, #100]	; (8003544 <menu+0x30c>)
 80034de:	f004 fdaf 	bl	8008040 <HAL_UART_Receive>
		  if(Uart_Rx[0]!=0){
 80034e2:	4b17      	ldr	r3, [pc, #92]	; (8003540 <menu+0x308>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80c3 	beq.w	8003672 <menu+0x43a>
			  parameters.phaseconfig=atoi((const char *)Uart_Rx)-1;
 80034ec:	4814      	ldr	r0, [pc, #80]	; (8003540 <menu+0x308>)
 80034ee:	f004 ffee 	bl	80084ce <atoi>
 80034f2:	4603      	mov	r3, r0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <menu+0x304>)
 80034fc:	719a      	strb	r2, [r3, #6]
			  if ( parameters.phaseconfig == 2)
 80034fe:	4b0f      	ldr	r3, [pc, #60]	; (800353c <menu+0x304>)
 8003500:	799b      	ldrb	r3, [r3, #6]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d102      	bne.n	800350c <menu+0x2d4>
			  {
				parameters.phaseconfig = 1;
 8003506:	4b0d      	ldr	r3, [pc, #52]	; (800353c <menu+0x304>)
 8003508:	2201      	movs	r2, #1
 800350a:	719a      	strb	r2, [r3, #6]
			  }
			  if (parameters.phaseconfig == 0)
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <menu+0x304>)
 800350e:	799b      	ldrb	r3, [r3, #6]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <menu+0x2e2>
			  {
				parameters.phaseconfig = 0;
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <menu+0x304>)
 8003516:	2200      	movs	r2, #0
 8003518:	719a      	strb	r2, [r3, #6]
			  }
			  menuload = 0;
 800351a:	4b03      	ldr	r3, [pc, #12]	; (8003528 <menu+0x2f0>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
			  incomingByte = 'd';
 8003520:	4b02      	ldr	r3, [pc, #8]	; (800352c <menu+0x2f4>)
 8003522:	2264      	movs	r2, #100	; 0x64
 8003524:	701a      	strb	r2, [r3, #0]
		  }
        break;
 8003526:	e0a4      	b.n	8003672 <menu+0x43a>
 8003528:	2000028c 	.word	0x2000028c
 800352c:	20000226 	.word	0x20000226
 8003530:	20000004 	.word	0x20000004
 8003534:	20000288 	.word	0x20000288
 8003538:	20000000 	.word	0x20000000
 800353c:	2000033c 	.word	0x2000033c
 8003540:	20000374 	.word	0x20000374
 8003544:	2000049c 	.word	0x2000049c
      case '6'://v for voltage setting in whole numbers
          memset(Uart_Rx,0,5);
 8003548:	2205      	movs	r2, #5
 800354a:	2100      	movs	r1, #0
 800354c:	4888      	ldr	r0, [pc, #544]	; (8003770 <menu+0x538>)
 800354e:	f004 ffed 	bl	800852c <memset>
          HAL_UART_Receive(&huart1, Uart_Rx, 5, 5);
 8003552:	2305      	movs	r3, #5
 8003554:	2205      	movs	r2, #5
 8003556:	4986      	ldr	r1, [pc, #536]	; (8003770 <menu+0x538>)
 8003558:	4886      	ldr	r0, [pc, #536]	; (8003774 <menu+0x53c>)
 800355a:	f004 fd71 	bl	8008040 <HAL_UART_Receive>
		  if(Uart_Rx[0]!=0){
 800355e:	4b84      	ldr	r3, [pc, #528]	; (8003770 <menu+0x538>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8087 	beq.w	8003676 <menu+0x43e>
			  parameters.voltSet=atoi((const char *)Uart_Rx)*100;
 8003568:	4881      	ldr	r0, [pc, #516]	; (8003770 <menu+0x538>)
 800356a:	f004 ffb0 	bl	80084ce <atoi>
 800356e:	4603      	mov	r3, r0
 8003570:	b29b      	uxth	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	0092      	lsls	r2, r2, #2
 8003576:	4413      	add	r3, r2
 8003578:	461a      	mov	r2, r3
 800357a:	0091      	lsls	r1, r2, #2
 800357c:	461a      	mov	r2, r3
 800357e:	460b      	mov	r3, r1
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	b29a      	uxth	r2, r3
 8003586:	4b7c      	ldr	r3, [pc, #496]	; (8003778 <menu+0x540>)
 8003588:	811a      	strh	r2, [r3, #8]
			  menuload = 0;
 800358a:	4b7c      	ldr	r3, [pc, #496]	; (800377c <menu+0x544>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
			  incomingByte = 'd';
 8003590:	4b7b      	ldr	r3, [pc, #492]	; (8003780 <menu+0x548>)
 8003592:	2264      	movs	r2, #100	; 0x64
 8003594:	701a      	strb	r2, [r3, #0]
		  }
        break;
 8003596:	e06e      	b.n	8003676 <menu+0x43e>

      case '7': //c for current setting in whole numbers
          memset(Uart_Rx,0,5);
 8003598:	2205      	movs	r2, #5
 800359a:	2100      	movs	r1, #0
 800359c:	4874      	ldr	r0, [pc, #464]	; (8003770 <menu+0x538>)
 800359e:	f004 ffc5 	bl	800852c <memset>
          HAL_UART_Receive(&huart1, Uart_Rx, 5, 5);
 80035a2:	2305      	movs	r3, #5
 80035a4:	2205      	movs	r2, #5
 80035a6:	4972      	ldr	r1, [pc, #456]	; (8003770 <menu+0x538>)
 80035a8:	4872      	ldr	r0, [pc, #456]	; (8003774 <menu+0x53c>)
 80035aa:	f004 fd49 	bl	8008040 <HAL_UART_Receive>
		  if(Uart_Rx[0]!=0){
 80035ae:	4b70      	ldr	r3, [pc, #448]	; (8003770 <menu+0x538>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d061      	beq.n	800367a <menu+0x442>
			  parameters.currReq=atoi((const char *)Uart_Rx)*1500;
 80035b6:	486e      	ldr	r0, [pc, #440]	; (8003770 <menu+0x538>)
 80035b8:	f004 ff89 	bl	80084ce <atoi>
 80035bc:	4603      	mov	r3, r0
 80035be:	b29b      	uxth	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	0092      	lsls	r2, r2, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	461a      	mov	r2, r3
 80035c8:	0091      	lsls	r1, r2, #2
 80035ca:	461a      	mov	r2, r3
 80035cc:	460b      	mov	r3, r1
 80035ce:	4413      	add	r3, r2
 80035d0:	461a      	mov	r2, r3
 80035d2:	0112      	lsls	r2, r2, #4
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	b29a      	uxth	r2, r3
 80035da:	4b67      	ldr	r3, [pc, #412]	; (8003778 <menu+0x540>)
 80035dc:	819a      	strh	r2, [r3, #12]
			  menuload = 0;
 80035de:	4b67      	ldr	r3, [pc, #412]	; (800377c <menu+0x544>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
			  incomingByte = 'd';
 80035e4:	4b66      	ldr	r3, [pc, #408]	; (8003780 <menu+0x548>)
 80035e6:	2264      	movs	r2, #100	; 0x64
 80035e8:	701a      	strb	r2, [r3, #0]
		  }
        break;
 80035ea:	e046      	b.n	800367a <menu+0x442>

      case '9': //c for current setting in whole numbers
          memset(Uart_Rx,0,5);
 80035ec:	2205      	movs	r2, #5
 80035ee:	2100      	movs	r1, #0
 80035f0:	485f      	ldr	r0, [pc, #380]	; (8003770 <menu+0x538>)
 80035f2:	f004 ff9b 	bl	800852c <memset>
          HAL_UART_Receive(&huart1, Uart_Rx, 5, 5);
 80035f6:	2305      	movs	r3, #5
 80035f8:	2205      	movs	r2, #5
 80035fa:	495d      	ldr	r1, [pc, #372]	; (8003770 <menu+0x538>)
 80035fc:	485d      	ldr	r0, [pc, #372]	; (8003774 <menu+0x53c>)
 80035fe:	f004 fd1f 	bl	8008040 <HAL_UART_Receive>
		  if(Uart_Rx[0]!=0){
 8003602:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <menu+0x538>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d039      	beq.n	800367e <menu+0x446>
			  menuload = 0;
 800360a:	4b5c      	ldr	r3, [pc, #368]	; (800377c <menu+0x544>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
			  incomingByte = 'd';
 8003610:	4b5b      	ldr	r3, [pc, #364]	; (8003780 <menu+0x548>)
 8003612:	2264      	movs	r2, #100	; 0x64
 8003614:	701a      	strb	r2, [r3, #0]
		  }
        break;
 8003616:	e032      	b.n	800367e <menu+0x446>
      case 't'://t for termaintion voltage setting in whole numbers
          memset(Uart_Rx,0,5);
 8003618:	2205      	movs	r2, #5
 800361a:	2100      	movs	r1, #0
 800361c:	4854      	ldr	r0, [pc, #336]	; (8003770 <menu+0x538>)
 800361e:	f004 ff85 	bl	800852c <memset>
          HAL_UART_Receive(&huart1, Uart_Rx, 5, 5);
 8003622:	2305      	movs	r3, #5
 8003624:	2205      	movs	r2, #5
 8003626:	4952      	ldr	r1, [pc, #328]	; (8003770 <menu+0x538>)
 8003628:	4852      	ldr	r0, [pc, #328]	; (8003774 <menu+0x53c>)
 800362a:	f004 fd09 	bl	8008040 <HAL_UART_Receive>
		  if(Uart_Rx[0]!=0){
 800362e:	4b50      	ldr	r3, [pc, #320]	; (8003770 <menu+0x538>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d025      	beq.n	8003682 <menu+0x44a>
			  parameters.tVolt=atoi((const char *)Uart_Rx)*100;
 8003636:	484e      	ldr	r0, [pc, #312]	; (8003770 <menu+0x538>)
 8003638:	f004 ff49 	bl	80084ce <atoi>
 800363c:	4603      	mov	r3, r0
 800363e:	b29b      	uxth	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	0092      	lsls	r2, r2, #2
 8003644:	4413      	add	r3, r2
 8003646:	461a      	mov	r2, r3
 8003648:	0091      	lsls	r1, r2, #2
 800364a:	461a      	mov	r2, r3
 800364c:	460b      	mov	r3, r1
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	b29a      	uxth	r2, r3
 8003654:	4b48      	ldr	r3, [pc, #288]	; (8003778 <menu+0x540>)
 8003656:	815a      	strh	r2, [r3, #10]
			  menuload = 0;
 8003658:	4b48      	ldr	r3, [pc, #288]	; (800377c <menu+0x544>)
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
			  incomingByte = 'd';
 800365e:	4b48      	ldr	r3, [pc, #288]	; (8003780 <menu+0x548>)
 8003660:	2264      	movs	r2, #100	; 0x64
 8003662:	701a      	strb	r2, [r3, #0]
		  }
        break;
 8003664:	e00d      	b.n	8003682 <menu+0x44a>
        break;
 8003666:	bf00      	nop
 8003668:	e00c      	b.n	8003684 <menu+0x44c>
        break;
 800366a:	bf00      	nop
 800366c:	e00a      	b.n	8003684 <menu+0x44c>
        break;
 800366e:	bf00      	nop
 8003670:	e008      	b.n	8003684 <menu+0x44c>
        break;
 8003672:	bf00      	nop
 8003674:	e006      	b.n	8003684 <menu+0x44c>
        break;
 8003676:	bf00      	nop
 8003678:	e004      	b.n	8003684 <menu+0x44c>
        break;
 800367a:	bf00      	nop
 800367c:	e002      	b.n	8003684 <menu+0x44c>
        break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <menu+0x44c>
        break;
 8003682:	bf00      	nop
    }
  }

  if (menuload == 0)
 8003684:	4b3d      	ldr	r3, [pc, #244]	; (800377c <menu+0x544>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	f040 814d 	bne.w	8003928 <menu+0x6f0>
  {
    switch (incomingByte)
 800368e:	4b3c      	ldr	r3, [pc, #240]	; (8003780 <menu+0x548>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	3b64      	subs	r3, #100	; 0x64
 8003694:	2b0f      	cmp	r3, #15
 8003696:	f200 8147 	bhi.w	8003928 <menu+0x6f0>
 800369a:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <menu+0x468>)
 800369c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a0:	08003731 	.word	0x08003731
 80036a4:	08003929 	.word	0x08003929
 80036a8:	08003929 	.word	0x08003929
 80036ac:	08003929 	.word	0x08003929
 80036b0:	08003929 	.word	0x08003929
 80036b4:	08003929 	.word	0x08003929
 80036b8:	08003929 	.word	0x08003929
 80036bc:	08003929 	.word	0x08003929
 80036c0:	08003929 	.word	0x08003929
 80036c4:	08003929 	.word	0x08003929
 80036c8:	08003929 	.word	0x08003929
 80036cc:	080036ff 	.word	0x080036ff
 80036d0:	08003929 	.word	0x08003929
 80036d4:	0800371d 	.word	0x0800371d
 80036d8:	08003929 	.word	0x08003929
 80036dc:	080036e1 	.word	0x080036e1
    {
      case 's'://s for start AND stop
    	  	  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_SET);
 80036e0:	2201      	movs	r2, #1
 80036e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036e6:	4827      	ldr	r0, [pc, #156]	; (8003784 <menu+0x54c>)
 80036e8:	f002 fddf 	bl	80062aa <HAL_GPIO_WritePin>
              state = 2;// initialize modules
 80036ec:	4b26      	ldr	r3, [pc, #152]	; (8003788 <menu+0x550>)
 80036ee:	2202      	movs	r2, #2
 80036f0:	601a      	str	r2, [r3, #0]
              tboot = millis();
 80036f2:	f000 f957 	bl	80039a4 <millis>
 80036f6:	4602      	mov	r2, r0
 80036f8:	4b24      	ldr	r3, [pc, #144]	; (800378c <menu+0x554>)
 80036fa:	601a      	str	r2, [r3, #0]
        break;
 80036fc:	e114      	b.n	8003928 <menu+0x6f0>

     case 'o':
            if (state > 0)
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <menu+0x550>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f340 810f 	ble.w	8003926 <menu+0x6ee>
            {
            	HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8003708:	2200      	movs	r2, #0
 800370a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800370e:	481d      	ldr	r0, [pc, #116]	; (8003784 <menu+0x54c>)
 8003710:	f002 fdcb 	bl	80062aa <HAL_GPIO_WritePin>
            	state = 0;// initialize modules
 8003714:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <menu+0x550>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
            }
         break;
 800371a:	e104      	b.n	8003926 <menu+0x6ee>

      case 'q': //q for quit
        EEPROM_Write(&parameters);
 800371c:	4816      	ldr	r0, [pc, #88]	; (8003778 <menu+0x540>)
 800371e:	f7ff f9a7 	bl	8002a70 <EEPROM_Write>
        debug = 1;
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <menu+0x558>)
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]
        menuload = 0;
 8003728:	4b14      	ldr	r3, [pc, #80]	; (800377c <menu+0x544>)
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
        break;
 800372e:	e0fb      	b.n	8003928 <menu+0x6f0>

      case 'd'://d for display
        debug = 0;
 8003730:	4b17      	ldr	r3, [pc, #92]	; (8003790 <menu+0x558>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
        menuload = 1;
 8003736:	4b11      	ldr	r3, [pc, #68]	; (800377c <menu+0x544>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
        printf(" ");
 800373c:	2020      	movs	r0, #32
 800373e:	f005 fb65 	bl	8008e0c <putchar>
        printf(" ");
 8003742:	2020      	movs	r0, #32
 8003744:	f005 fb62 	bl	8008e0c <putchar>
        printf(" ");
 8003748:	2020      	movs	r0, #32
 800374a:	f005 fb5f 	bl	8008e0c <putchar>
        printf(" ");
 800374e:	2020      	movs	r0, #32
 8003750:	f005 fb5c 	bl	8008e0c <putchar>
        printf("Settings Menu\r\n");
 8003754:	480f      	ldr	r0, [pc, #60]	; (8003794 <menu+0x55c>)
 8003756:	f005 fbc9 	bl	8008eec <puts>
        printf("1 - Auto Enable : ");
 800375a:	480f      	ldr	r0, [pc, #60]	; (8003798 <menu+0x560>)
 800375c:	f005 fb3e 	bl	8008ddc <iprintf>
        if (parameters.autoEnableCharger == 1)
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <menu+0x540>)
 8003762:	78db      	ldrb	r3, [r3, #3]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d11b      	bne.n	80037a0 <menu+0x568>
        {
          printf("ON\r\n");
 8003768:	480c      	ldr	r0, [pc, #48]	; (800379c <menu+0x564>)
 800376a:	f005 fbbf 	bl	8008eec <puts>
 800376e:	e01a      	b.n	80037a6 <menu+0x56e>
 8003770:	20000374 	.word	0x20000374
 8003774:	2000049c 	.word	0x2000049c
 8003778:	2000033c 	.word	0x2000033c
 800377c:	2000028c 	.word	0x2000028c
 8003780:	20000226 	.word	0x20000226
 8003784:	40011000 	.word	0x40011000
 8003788:	200002fc 	.word	0x200002fc
 800378c:	20000228 	.word	0x20000228
 8003790:	20000004 	.word	0x20000004
 8003794:	0800b3ec 	.word	0x0800b3ec
 8003798:	0800b3fc 	.word	0x0800b3fc
 800379c:	0800b410 	.word	0x0800b410
        }
        else
        {
          printf("OFF\r\n");
 80037a0:	4863      	ldr	r0, [pc, #396]	; (8003930 <menu+0x6f8>)
 80037a2:	f005 fba3 	bl	8008eec <puts>
        }
        printf("2 - Modules Enabled : ");
 80037a6:	4863      	ldr	r0, [pc, #396]	; (8003934 <menu+0x6fc>)
 80037a8:	f005 fb18 	bl	8008ddc <iprintf>
        printf("%d\r\n",parameters.enabledChargers);
 80037ac:	4b62      	ldr	r3, [pc, #392]	; (8003938 <menu+0x700>)
 80037ae:	785b      	ldrb	r3, [r3, #1]
 80037b0:	4619      	mov	r1, r3
 80037b2:	4862      	ldr	r0, [pc, #392]	; (800393c <menu+0x704>)
 80037b4:	f005 fb12 	bl	8008ddc <iprintf>
        printf("3 - Can Mode : ");
 80037b8:	4861      	ldr	r0, [pc, #388]	; (8003940 <menu+0x708>)
 80037ba:	f005 fb0f 	bl	8008ddc <iprintf>
        if (parameters.canControl == 0)
 80037be:	4b5e      	ldr	r3, [pc, #376]	; (8003938 <menu+0x700>)
 80037c0:	791b      	ldrb	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <menu+0x594>
        {
          printf(" Off \r\n");
 80037c6:	485f      	ldr	r0, [pc, #380]	; (8003944 <menu+0x70c>)
 80037c8:	f005 fb90 	bl	8008eec <puts>
        }
        if (parameters.canControl == 1)
 80037cc:	4b5a      	ldr	r3, [pc, #360]	; (8003938 <menu+0x700>)
 80037ce:	791b      	ldrb	r3, [r3, #4]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d102      	bne.n	80037da <menu+0x5a2>
        {
          printf(" Master \r\n");
 80037d4:	485c      	ldr	r0, [pc, #368]	; (8003948 <menu+0x710>)
 80037d6:	f005 fb89 	bl	8008eec <puts>
        }
        if (parameters.canControl == 2)
 80037da:	4b57      	ldr	r3, [pc, #348]	; (8003938 <menu+0x700>)
 80037dc:	791b      	ldrb	r3, [r3, #4]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d102      	bne.n	80037e8 <menu+0x5b0>
        {
          printf(" Master Elcon \r\n");
 80037e2:	485a      	ldr	r0, [pc, #360]	; (800394c <menu+0x714>)
 80037e4:	f005 fb82 	bl	8008eec <puts>
        }
        if (parameters.canControl == 3)
 80037e8:	4b53      	ldr	r3, [pc, #332]	; (8003938 <menu+0x700>)
 80037ea:	791b      	ldrb	r3, [r3, #4]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d102      	bne.n	80037f6 <menu+0x5be>
        {
          printf(" Slave \r\n");
 80037f0:	4857      	ldr	r0, [pc, #348]	; (8003950 <menu+0x718>)
 80037f2:	f005 fb7b 	bl	8008eec <puts>
        }
        printf("4 - Port Type : ");
 80037f6:	4857      	ldr	r0, [pc, #348]	; (8003954 <menu+0x71c>)
 80037f8:	f005 faf0 	bl	8008ddc <iprintf>
        printf("%d\r\n",parameters.type);
 80037fc:	4b4e      	ldr	r3, [pc, #312]	; (8003938 <menu+0x700>)
 80037fe:	795b      	ldrb	r3, [r3, #5]
 8003800:	4619      	mov	r1, r3
 8003802:	484e      	ldr	r0, [pc, #312]	; (800393c <menu+0x704>)
 8003804:	f005 faea 	bl	8008ddc <iprintf>
        printf("5 - Phase Wiring : ");
 8003808:	4853      	ldr	r0, [pc, #332]	; (8003958 <menu+0x720>)
 800380a:	f005 fae7 	bl	8008ddc <iprintf>
        printf("%d\r\n",parameters.phaseconfig + 1);
 800380e:	4b4a      	ldr	r3, [pc, #296]	; (8003938 <menu+0x700>)
 8003810:	799b      	ldrb	r3, [r3, #6]
 8003812:	3301      	adds	r3, #1
 8003814:	4619      	mov	r1, r3
 8003816:	4849      	ldr	r0, [pc, #292]	; (800393c <menu+0x704>)
 8003818:	f005 fae0 	bl	8008ddc <iprintf>
        printf("6 - DC Charge Voltage : ");
 800381c:	484f      	ldr	r0, [pc, #316]	; (800395c <menu+0x724>)
 800381e:	f005 fadd 	bl	8008ddc <iprintf>
        printf("%f %d",parameters.voltSet * 0.01f, 0);
 8003822:	4b45      	ldr	r3, [pc, #276]	; (8003938 <menu+0x700>)
 8003824:	891b      	ldrh	r3, [r3, #8]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fa08 	bl	8000c3c <__aeabi_i2f>
 800382c:	4603      	mov	r3, r0
 800382e:	494c      	ldr	r1, [pc, #304]	; (8003960 <menu+0x728>)
 8003830:	4618      	mov	r0, r3
 8003832:	f7fd fa57 	bl	8000ce4 <__aeabi_fmul>
 8003836:	4603      	mov	r3, r0
 8003838:	4618      	mov	r0, r3
 800383a:	f7fc fdf5 	bl	8000428 <__aeabi_f2d>
 800383e:	460a      	mov	r2, r1
 8003840:	4601      	mov	r1, r0
 8003842:	2300      	movs	r3, #0
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	460a      	mov	r2, r1
 800384a:	4846      	ldr	r0, [pc, #280]	; (8003964 <menu+0x72c>)
 800384c:	f005 fac6 	bl	8008ddc <iprintf>
        printf("V\r\n");
 8003850:	4845      	ldr	r0, [pc, #276]	; (8003968 <menu+0x730>)
 8003852:	f005 fb4b 	bl	8008eec <puts>
        printf("7 - AC Current Limit : ");
 8003856:	4845      	ldr	r0, [pc, #276]	; (800396c <menu+0x734>)
 8003858:	f005 fac0 	bl	8008ddc <iprintf>
        printf("%d",parameters.currReq / 1500);
 800385c:	4b36      	ldr	r3, [pc, #216]	; (8003938 <menu+0x700>)
 800385e:	899b      	ldrh	r3, [r3, #12]
 8003860:	4a43      	ldr	r2, [pc, #268]	; (8003970 <menu+0x738>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	b29b      	uxth	r3, r3
 800386a:	4619      	mov	r1, r3
 800386c:	4841      	ldr	r0, [pc, #260]	; (8003974 <menu+0x73c>)
 800386e:	f005 fab5 	bl	8008ddc <iprintf>
        printf("A\r\n");
 8003872:	4841      	ldr	r0, [pc, #260]	; (8003978 <menu+0x740>)
 8003874:	f005 fb3a 	bl	8008eec <puts>
        printf("8 - CAN0 Speed : ");
 8003878:	4840      	ldr	r0, [pc, #256]	; (800397c <menu+0x744>)
 800387a:	f005 faaf 	bl	8008ddc <iprintf>
        printf("%f %d\r\n",parameters.can0Speed * 0.001f, 0);
 800387e:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <menu+0x700>)
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd f9d6 	bl	8000c34 <__aeabi_ui2f>
 8003888:	4603      	mov	r3, r0
 800388a:	493d      	ldr	r1, [pc, #244]	; (8003980 <menu+0x748>)
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd fa29 	bl	8000ce4 <__aeabi_fmul>
 8003892:	4603      	mov	r3, r0
 8003894:	4618      	mov	r0, r3
 8003896:	f7fc fdc7 	bl	8000428 <__aeabi_f2d>
 800389a:	460a      	mov	r2, r1
 800389c:	4601      	mov	r1, r0
 800389e:	2300      	movs	r3, #0
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	4613      	mov	r3, r2
 80038a4:	460a      	mov	r2, r1
 80038a6:	4837      	ldr	r0, [pc, #220]	; (8003984 <menu+0x74c>)
 80038a8:	f005 fa98 	bl	8008ddc <iprintf>
        printf("a - Can Debug : ");
 80038ac:	4836      	ldr	r0, [pc, #216]	; (8003988 <menu+0x750>)
 80038ae:	f005 fa95 	bl	8008ddc <iprintf>
        if (candebug == 1)
 80038b2:	4b36      	ldr	r3, [pc, #216]	; (800398c <menu+0x754>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d103      	bne.n	80038c2 <menu+0x68a>
        {
          printf("ON\r\n");
 80038ba:	4835      	ldr	r0, [pc, #212]	; (8003990 <menu+0x758>)
 80038bc:	f005 fb16 	bl	8008eec <puts>
 80038c0:	e002      	b.n	80038c8 <menu+0x690>
        }
        else
        {
          printf("OFF\r\n");
 80038c2:	481b      	ldr	r0, [pc, #108]	; (8003930 <menu+0x6f8>)
 80038c4:	f005 fb12 	bl	8008eec <puts>
        }
        printf("b - EVSE Debug : ");
 80038c8:	4832      	ldr	r0, [pc, #200]	; (8003994 <menu+0x75c>)
 80038ca:	f005 fa87 	bl	8008ddc <iprintf>
        if (evsedebug == 1)
 80038ce:	4b32      	ldr	r3, [pc, #200]	; (8003998 <menu+0x760>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d103      	bne.n	80038de <menu+0x6a6>
        {
          printf("ON\r\n");
 80038d6:	482e      	ldr	r0, [pc, #184]	; (8003990 <menu+0x758>)
 80038d8:	f005 fb08 	bl	8008eec <puts>
 80038dc:	e002      	b.n	80038e4 <menu+0x6ac>
        }
        else
        {
          printf("OFF\r\n");
 80038de:	4814      	ldr	r0, [pc, #80]	; (8003930 <menu+0x6f8>)
 80038e0:	f005 fb04 	bl	8008eec <puts>
        }
        printf("t - termination voltage : ");
 80038e4:	482d      	ldr	r0, [pc, #180]	; (800399c <menu+0x764>)
 80038e6:	f005 fa79 	bl	8008ddc <iprintf>
        printf("%f %d",parameters.tVolt * 0.01f, 0);
 80038ea:	4b13      	ldr	r3, [pc, #76]	; (8003938 <menu+0x700>)
 80038ec:	895b      	ldrh	r3, [r3, #10]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fd f9a4 	bl	8000c3c <__aeabi_i2f>
 80038f4:	4603      	mov	r3, r0
 80038f6:	491a      	ldr	r1, [pc, #104]	; (8003960 <menu+0x728>)
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fd f9f3 	bl	8000ce4 <__aeabi_fmul>
 80038fe:	4603      	mov	r3, r0
 8003900:	4618      	mov	r0, r3
 8003902:	f7fc fd91 	bl	8000428 <__aeabi_f2d>
 8003906:	460a      	mov	r2, r1
 8003908:	4601      	mov	r1, r0
 800390a:	2300      	movs	r3, #0
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	4613      	mov	r3, r2
 8003910:	460a      	mov	r2, r1
 8003912:	4814      	ldr	r0, [pc, #80]	; (8003964 <menu+0x72c>)
 8003914:	f005 fa62 	bl	8008ddc <iprintf>
        printf("V\r\n");
 8003918:	4813      	ldr	r0, [pc, #76]	; (8003968 <menu+0x730>)
 800391a:	f005 fae7 	bl	8008eec <puts>
        printf("q - To Quit Menu\r\n");
 800391e:	4820      	ldr	r0, [pc, #128]	; (80039a0 <menu+0x768>)
 8003920:	f005 fae4 	bl	8008eec <puts>
        break;
 8003924:	e000      	b.n	8003928 <menu+0x6f0>
         break;
 8003926:	bf00      	nop
    }
  }
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	0800b414 	.word	0x0800b414
 8003934:	0800b41c 	.word	0x0800b41c
 8003938:	2000033c 	.word	0x2000033c
 800393c:	0800b434 	.word	0x0800b434
 8003940:	0800b43c 	.word	0x0800b43c
 8003944:	0800b44c 	.word	0x0800b44c
 8003948:	0800b454 	.word	0x0800b454
 800394c:	0800b460 	.word	0x0800b460
 8003950:	0800b470 	.word	0x0800b470
 8003954:	0800b47c 	.word	0x0800b47c
 8003958:	0800b490 	.word	0x0800b490
 800395c:	0800b4a4 	.word	0x0800b4a4
 8003960:	3c23d70a 	.word	0x3c23d70a
 8003964:	0800b4c0 	.word	0x0800b4c0
 8003968:	0800b4c8 	.word	0x0800b4c8
 800396c:	0800b4cc 	.word	0x0800b4cc
 8003970:	057619f1 	.word	0x057619f1
 8003974:	0800b224 	.word	0x0800b224
 8003978:	0800b4e4 	.word	0x0800b4e4
 800397c:	0800b4e8 	.word	0x0800b4e8
 8003980:	3a83126f 	.word	0x3a83126f
 8003984:	0800b4fc 	.word	0x0800b4fc
 8003988:	0800b504 	.word	0x0800b504
 800398c:	20000288 	.word	0x20000288
 8003990:	0800b410 	.word	0x0800b410
 8003994:	0800b518 	.word	0x0800b518
 8003998:	20000000 	.word	0x20000000
 800399c:	0800b52c 	.word	0x0800b52c
 80039a0:	0800b548 	.word	0x0800b548

080039a4 <millis>:
uint32_t millis(void){
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80039a8:	f000 ffaa 	bl	8004900 <HAL_GetTick>
 80039ac:	4603      	mov	r3, r0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <micros>:
uint32_t micros(void){ // returns microsecond
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
	uint32_t temp = HAL_GetTick();
 80039ba:	f000 ffa1 	bl	8004900 <HAL_GetTick>
 80039be:	6078      	str	r0, [r7, #4]
	uint32_t microvalue= (temp*1000)+(1000-SysTick->VAL/168);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039c6:	fb02 f203 	mul.w	r2, r2, r3
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <micros+0x38>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	08db      	lsrs	r3, r3, #3
 80039d0:	4907      	ldr	r1, [pc, #28]	; (80039f0 <micros+0x3c>)
 80039d2:	fba1 1303 	umull	r1, r3, r1, r3
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80039de:	603b      	str	r3, [r7, #0]
	return microvalue;
 80039e0:	683b      	ldr	r3, [r7, #0]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	e000e010 	.word	0xe000e010
 80039f0:	18618619 	.word	0x18618619

080039f4 <delay>:
void delay(uint32_t dly){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	HAL_Delay(dly);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 ff89 	bl	8004914 <HAL_Delay>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <Charger_msgs>:

void Charger_msgs(void){
 8003a0c:	b598      	push	{r3, r4, r7, lr}
 8003a0e:	af00      	add	r7, sp, #0

	  /////////////////////This msg addresses all modules/////////////////////////////////////////////////
	  myTxMessage.StdId = 0x045c;            // Set our transmission address ID
 8003a10:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <Charger_msgs+0x16c>)
 8003a12:	f240 425c 	movw	r2, #1116	; 0x45c
 8003a16:	601a      	str	r2, [r3, #0]
	  myTxMessage.DLC = 8;            // Data payload 8 bytes
 8003a18:	4b57      	ldr	r3, [pc, #348]	; (8003b78 <Charger_msgs+0x16c>)
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	611a      	str	r2, [r3, #16]

	  CanTxData[0] = (uint8_t)((parameters.voltSet)&0xFF);  //Voltage setpoint
 8003a1e:	4b57      	ldr	r3, [pc, #348]	; (8003b7c <Charger_msgs+0x170>)
 8003a20:	891b      	ldrh	r3, [r3, #8]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	4b56      	ldr	r3, [pc, #344]	; (8003b80 <Charger_msgs+0x174>)
 8003a26:	701a      	strb	r2, [r3, #0]
	  CanTxData[1] = (uint8_t)((parameters.voltSet)>>8);//Voltage setpoint
 8003a28:	4b54      	ldr	r3, [pc, #336]	; (8003b7c <Charger_msgs+0x170>)
 8003a2a:	891b      	ldrh	r3, [r3, #8]
 8003a2c:	0a1b      	lsrs	r3, r3, #8
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4b53      	ldr	r3, [pc, #332]	; (8003b80 <Charger_msgs+0x174>)
 8003a34:	705a      	strb	r2, [r3, #1]
	  CanTxData[2] = 0x14;
 8003a36:	4b52      	ldr	r3, [pc, #328]	; (8003b80 <Charger_msgs+0x174>)
 8003a38:	2214      	movs	r2, #20
 8003a3a:	709a      	strb	r2, [r3, #2]
	  if (bChargerEnabled)
 8003a3c:	4b51      	ldr	r3, [pc, #324]	; (8003b84 <Charger_msgs+0x178>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <Charger_msgs+0x40>
	  {
	    CanTxData[3] = 0x2e;
 8003a44:	4b4e      	ldr	r3, [pc, #312]	; (8003b80 <Charger_msgs+0x174>)
 8003a46:	222e      	movs	r2, #46	; 0x2e
 8003a48:	70da      	strb	r2, [r3, #3]
 8003a4a:	e002      	b.n	8003a52 <Charger_msgs+0x46>
	  }
	  else {CanTxData[3] = 0x0e;}
 8003a4c:	4b4c      	ldr	r3, [pc, #304]	; (8003b80 <Charger_msgs+0x174>)
 8003a4e:	220e      	movs	r2, #14
 8003a50:	70da      	strb	r2, [r3, #3]
	  CanTxData[4] = 0x00;
 8003a52:	4b4b      	ldr	r3, [pc, #300]	; (8003b80 <Charger_msgs+0x174>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	711a      	strb	r2, [r3, #4]
	  CanTxData[5] = 0x00;
 8003a58:	4b49      	ldr	r3, [pc, #292]	; (8003b80 <Charger_msgs+0x174>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	715a      	strb	r2, [r3, #5]
	  CanTxData[6] = 0x90;
 8003a5e:	4b48      	ldr	r3, [pc, #288]	; (8003b80 <Charger_msgs+0x174>)
 8003a60:	2290      	movs	r2, #144	; 0x90
 8003a62:	719a      	strb	r2, [r3, #6]
	  CanTxData[7] = 0x8c;
 8003a64:	4b46      	ldr	r3, [pc, #280]	; (8003b80 <Charger_msgs+0x174>)
 8003a66:	228c      	movs	r2, #140	; 0x8c
 8003a68:	71da      	strb	r2, [r3, #7]
	  HAL_CAN_AddTxMessage(&hcan, &myTxMessage, CanTxData, &TxMailbox);
 8003a6a:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <Charger_msgs+0x17c>)
 8003a6c:	4a44      	ldr	r2, [pc, #272]	; (8003b80 <Charger_msgs+0x174>)
 8003a6e:	4942      	ldr	r1, [pc, #264]	; (8003b78 <Charger_msgs+0x16c>)
 8003a70:	4846      	ldr	r0, [pc, #280]	; (8003b8c <Charger_msgs+0x180>)
 8003a72:	f001 fd89 	bl	8005588 <HAL_CAN_AddTxMessage>
	  //////////////////////////////////////////////////////////////////////////////////////////////////////

	  //////////////////////////////////////Phase 1 command message////////////////////////////////////////
	  myTxMessage.StdId = 0x042c;            // Set our transmission address ID
 8003a76:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <Charger_msgs+0x16c>)
 8003a78:	f240 422c 	movw	r2, #1068	; 0x42c
 8003a7c:	601a      	str	r2, [r3, #0]
	  myTxMessage.DLC = 8;            // Data payload 8 bytes
 8003a7e:	4b3e      	ldr	r3, [pc, #248]	; (8003b78 <Charger_msgs+0x16c>)
 8003a80:	2208      	movs	r2, #8
 8003a82:	611a      	str	r2, [r3, #16]

	  CanTxData[0] = 0x42;
 8003a84:	4b3e      	ldr	r3, [pc, #248]	; (8003b80 <Charger_msgs+0x174>)
 8003a86:	2242      	movs	r2, #66	; 0x42
 8003a88:	701a      	strb	r2, [r3, #0]
	  CanTxData[2] = (uint8_t)(modulelimcur&0xFF); //AC Current setpoint
 8003a8a:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <Charger_msgs+0x184>)
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	4b3b      	ldr	r3, [pc, #236]	; (8003b80 <Charger_msgs+0x174>)
 8003a92:	709a      	strb	r2, [r3, #2]
	  CanTxData[3] = (uint8_t)(modulelimcur>>8); //AC Current setpoint
 8003a94:	4b3e      	ldr	r3, [pc, #248]	; (8003b90 <Charger_msgs+0x184>)
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	0a1b      	lsrs	r3, r3, #8
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <Charger_msgs+0x174>)
 8003aa0:	70da      	strb	r2, [r3, #3]
	  if (bChargerEnabled)
 8003aa2:	4b38      	ldr	r3, [pc, #224]	; (8003b84 <Charger_msgs+0x178>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d006      	beq.n	8003ab8 <Charger_msgs+0xac>
	  {
	    CanTxData[1] = 0xBB;
 8003aaa:	4b35      	ldr	r3, [pc, #212]	; (8003b80 <Charger_msgs+0x174>)
 8003aac:	22bb      	movs	r2, #187	; 0xbb
 8003aae:	705a      	strb	r2, [r3, #1]
	    CanTxData[4] = 0xFE; //FE dont clear faults. FF do clear faults.
 8003ab0:	4b33      	ldr	r3, [pc, #204]	; (8003b80 <Charger_msgs+0x174>)
 8003ab2:	22fe      	movs	r2, #254	; 0xfe
 8003ab4:	711a      	strb	r2, [r3, #4]
 8003ab6:	e017      	b.n	8003ae8 <Charger_msgs+0xdc>
	  }
	  else
	  {
	    CanTxData[1] = (uint8_t)(((uint16_t)(ACvoltIN / 1.2))&0xFF);
 8003ab8:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <Charger_msgs+0x188>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fc fca1 	bl	8000404 <__aeabi_i2d>
 8003ac2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003ac6:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <Charger_msgs+0x18c>)
 8003ac8:	f7fc fe30 	bl	800072c <__aeabi_ddiv>
 8003acc:	4603      	mov	r3, r0
 8003ace:	460c      	mov	r4, r1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	f7fc ffd8 	bl	8000a88 <__aeabi_d2uiz>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4b28      	ldr	r3, [pc, #160]	; (8003b80 <Charger_msgs+0x174>)
 8003ae0:	705a      	strb	r2, [r3, #1]
	    CanTxData[4] = 0x64;
 8003ae2:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <Charger_msgs+0x174>)
 8003ae4:	2264      	movs	r2, #100	; 0x64
 8003ae6:	711a      	strb	r2, [r3, #4]
	  }
	  CanTxData[5] = 0x00;
 8003ae8:	4b25      	ldr	r3, [pc, #148]	; (8003b80 <Charger_msgs+0x174>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	715a      	strb	r2, [r3, #5]
	  CanTxData[6] = 0x00;
 8003aee:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <Charger_msgs+0x174>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	719a      	strb	r2, [r3, #6]
	  CanTxData[7] = 0x00;
 8003af4:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <Charger_msgs+0x174>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	71da      	strb	r2, [r3, #7]
	  HAL_CAN_AddTxMessage(&hcan, &myTxMessage, CanTxData, &TxMailbox);
 8003afa:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <Charger_msgs+0x17c>)
 8003afc:	4a20      	ldr	r2, [pc, #128]	; (8003b80 <Charger_msgs+0x174>)
 8003afe:	491e      	ldr	r1, [pc, #120]	; (8003b78 <Charger_msgs+0x16c>)
 8003b00:	4822      	ldr	r0, [pc, #136]	; (8003b8c <Charger_msgs+0x180>)
 8003b02:	f001 fd41 	bl	8005588 <HAL_CAN_AddTxMessage>
	  //////////////////////////////Phase 2 command message//////////////////////////////////////////////
	  myTxMessage.StdId = 0x43c;        //phase 2 and 3 are copies of phase 1 so no need to set them up again
 8003b06:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <Charger_msgs+0x16c>)
 8003b08:	f240 423c 	movw	r2, #1084	; 0x43c
 8003b0c:	601a      	str	r2, [r3, #0]
	  HAL_CAN_AddTxMessage(&hcan, &myTxMessage, CanTxData, &TxMailbox);
 8003b0e:	4b1e      	ldr	r3, [pc, #120]	; (8003b88 <Charger_msgs+0x17c>)
 8003b10:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <Charger_msgs+0x174>)
 8003b12:	4919      	ldr	r1, [pc, #100]	; (8003b78 <Charger_msgs+0x16c>)
 8003b14:	481d      	ldr	r0, [pc, #116]	; (8003b8c <Charger_msgs+0x180>)
 8003b16:	f001 fd37 	bl	8005588 <HAL_CAN_AddTxMessage>
	  ///////////////////////////////Phase 3 command message/////////////////////////////////////////////
	  myTxMessage.StdId = 0x44c;
 8003b1a:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <Charger_msgs+0x16c>)
 8003b1c:	f240 424c 	movw	r2, #1100	; 0x44c
 8003b20:	601a      	str	r2, [r3, #0]
	  HAL_CAN_AddTxMessage(&hcan, &myTxMessage, CanTxData, &TxMailbox);
 8003b22:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <Charger_msgs+0x17c>)
 8003b24:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <Charger_msgs+0x174>)
 8003b26:	4914      	ldr	r1, [pc, #80]	; (8003b78 <Charger_msgs+0x16c>)
 8003b28:	4818      	ldr	r0, [pc, #96]	; (8003b8c <Charger_msgs+0x180>)
 8003b2a:	f001 fd2d 	bl	8005588 <HAL_CAN_AddTxMessage>

	  ///////////Static Frame every 100ms///////////////////////////////////////////////////////////////////
	  myTxMessage.StdId = 0x368;            // Set our transmission address ID
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <Charger_msgs+0x16c>)
 8003b30:	f44f 725a 	mov.w	r2, #872	; 0x368
 8003b34:	601a      	str	r2, [r3, #0]

	  CanTxData[0] = 0x03;
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <Charger_msgs+0x174>)
 8003b38:	2203      	movs	r2, #3
 8003b3a:	701a      	strb	r2, [r3, #0]
	  CanTxData[1] = 0x49;
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <Charger_msgs+0x174>)
 8003b3e:	2249      	movs	r2, #73	; 0x49
 8003b40:	705a      	strb	r2, [r3, #1]
	  CanTxData[2] = 0x29;
 8003b42:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <Charger_msgs+0x174>)
 8003b44:	2229      	movs	r2, #41	; 0x29
 8003b46:	709a      	strb	r2, [r3, #2]
	  CanTxData[3] = 0x11;
 8003b48:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <Charger_msgs+0x174>)
 8003b4a:	2211      	movs	r2, #17
 8003b4c:	70da      	strb	r2, [r3, #3]
	  CanTxData[4] = 0x00;
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <Charger_msgs+0x174>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	711a      	strb	r2, [r3, #4]
	  CanTxData[5] = 0x0c;
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <Charger_msgs+0x174>)
 8003b56:	220c      	movs	r2, #12
 8003b58:	715a      	strb	r2, [r3, #5]
	  CanTxData[6] = 0x40;
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <Charger_msgs+0x174>)
 8003b5c:	2240      	movs	r2, #64	; 0x40
 8003b5e:	719a      	strb	r2, [r3, #6]
	  CanTxData[7] = 0xff;
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <Charger_msgs+0x174>)
 8003b62:	22ff      	movs	r2, #255	; 0xff
 8003b64:	71da      	strb	r2, [r3, #7]
	  HAL_CAN_AddTxMessage(&hcan, &myTxMessage, CanTxData, &TxMailbox);
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <Charger_msgs+0x17c>)
 8003b68:	4a05      	ldr	r2, [pc, #20]	; (8003b80 <Charger_msgs+0x174>)
 8003b6a:	4903      	ldr	r1, [pc, #12]	; (8003b78 <Charger_msgs+0x16c>)
 8003b6c:	4807      	ldr	r0, [pc, #28]	; (8003b8c <Charger_msgs+0x180>)
 8003b6e:	f001 fd0b 	bl	8005588 <HAL_CAN_AddTxMessage>

}
 8003b72:	bf00      	nop
 8003b74:	bd98      	pop	{r3, r4, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000320 	.word	0x20000320
 8003b7c:	2000033c 	.word	0x2000033c
 8003b80:	2000035c 	.word	0x2000035c
 8003b84:	2000035a 	.word	0x2000035a
 8003b88:	20000364 	.word	0x20000364
 8003b8c:	200002cc 	.word	0x200002cc
 8003b90:	20000368 	.word	0x20000368
 8003b94:	20000008 	.word	0x20000008
 8003b98:	3ff33333 	.word	0x3ff33333

08003b9c <Pilotcalc>:

void Pilotcalc()
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(EVSE_PILOT_GPIO_Port, EVSE_PILOT_Pin) == GPIO_PIN_SET)
 8003ba0:	2140      	movs	r1, #64	; 0x40
 8003ba2:	4819      	ldr	r0, [pc, #100]	; (8003c08 <Pilotcalc+0x6c>)
 8003ba4:	f002 fb6a 	bl	800627c <HAL_GPIO_ReadPin>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d110      	bne.n	8003bd0 <Pilotcalc+0x34>
  {
    duration = micros() - pilottimer;
 8003bae:	f7ff ff01 	bl	80039b4 <micros>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	4b15      	ldr	r3, [pc, #84]	; (8003c0c <Pilotcalc+0x70>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <Pilotcalc+0x74>)
 8003bc2:	801a      	strh	r2, [r3, #0]
    pilottimer = micros();
 8003bc4:	f7ff fef6 	bl	80039b4 <micros>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <Pilotcalc+0x70>)
 8003bcc:	601a      	str	r2, [r3, #0]
  }
  else
  {
    accurlim = (micros() - pilottimer) * 100 / duration * 600; //Calculate the duty cycle then multiply by 600 to get mA current limit
  }
}
 8003bce:	e018      	b.n	8003c02 <Pilotcalc+0x66>
    accurlim = (micros() - pilottimer) * 100 / duration * 600; //Calculate the duty cycle then multiply by 600 to get mA current limit
 8003bd0:	f7ff fef0 	bl	80039b4 <micros>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <Pilotcalc+0x70>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2264      	movs	r2, #100	; 0x64
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	4a0b      	ldr	r2, [pc, #44]	; (8003c10 <Pilotcalc+0x74>)
 8003be4:	8812      	ldrh	r2, [r2, #0]
 8003be6:	b292      	uxth	r2, r2
 8003be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	0092      	lsls	r2, r2, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	0112      	lsls	r2, r2, #4
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <Pilotcalc+0x78>)
 8003c00:	801a      	strh	r2, [r3, #0]
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40010800 	.word	0x40010800
 8003c0c:	20000230 	.word	0x20000230
 8003c10:	20000234 	.word	0x20000234
 8003c14:	20000236 	.word	0x20000236

08003c18 <ACcurrentlimit>:

void ACcurrentlimit()
{
 8003c18:	b5b0      	push	{r4, r5, r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  if (parameters.autoEnableCharger == 1)
 8003c1c:	4b90      	ldr	r3, [pc, #576]	; (8003e60 <ACcurrentlimit+0x248>)
 8003c1e:	78db      	ldrb	r3, [r3, #3]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d16e      	bne.n	8003d02 <ACcurrentlimit+0xea>
  {
    if (micros() - pilottimer > 1200) //too big a gap in pilot signal kills means signal error or disconnected so no current allowed.
 8003c24:	f7ff fec6 	bl	80039b4 <micros>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b8e      	ldr	r3, [pc, #568]	; (8003e64 <ACcurrentlimit+0x24c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003c34:	d902      	bls.n	8003c3c <ACcurrentlimit+0x24>
    {
      accurlim = 0;
 8003c36:	4b8c      	ldr	r3, [pc, #560]	; (8003e68 <ACcurrentlimit+0x250>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	801a      	strh	r2, [r3, #0]
    }
    if (parameters.phaseconfig == 0)
 8003c3c:	4b88      	ldr	r3, [pc, #544]	; (8003e60 <ACcurrentlimit+0x248>)
 8003c3e:	799b      	ldrb	r3, [r3, #6]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d11a      	bne.n	8003c7a <ACcurrentlimit+0x62>
    {
      modulelimcur = (accurlim / 3) * 1.5 ; // all module parallel, sharing AC input current
 8003c44:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <ACcurrentlimit+0x250>)
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	4a88      	ldr	r2, [pc, #544]	; (8003e6c <ACcurrentlimit+0x254>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc fbd5 	bl	8000404 <__aeabi_i2d>
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	4b84      	ldr	r3, [pc, #528]	; (8003e70 <ACcurrentlimit+0x258>)
 8003c60:	f7fc fc3a 	bl	80004d8 <__aeabi_dmul>
 8003c64:	4603      	mov	r3, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	4618      	mov	r0, r3
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	f7fc ff0c 	bl	8000a88 <__aeabi_d2uiz>
 8003c70:	4603      	mov	r3, r0
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	4b7f      	ldr	r3, [pc, #508]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003c76:	801a      	strh	r2, [r3, #0]
 8003c78:	e055      	b.n	8003d26 <ACcurrentlimit+0x10e>
    }
    else
    {
      modulelimcur = accurlim * 1.5; // one module per phase, EVSE current limit is per phase
 8003c7a:	4b7b      	ldr	r3, [pc, #492]	; (8003e68 <ACcurrentlimit+0x250>)
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fc fbbf 	bl	8000404 <__aeabi_i2d>
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	4b79      	ldr	r3, [pc, #484]	; (8003e70 <ACcurrentlimit+0x258>)
 8003c8c:	f7fc fc24 	bl	80004d8 <__aeabi_dmul>
 8003c90:	4603      	mov	r3, r0
 8003c92:	460c      	mov	r4, r1
 8003c94:	4618      	mov	r0, r3
 8003c96:	4621      	mov	r1, r4
 8003c98:	f7fc fef6 	bl	8000a88 <__aeabi_d2uiz>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	4b74      	ldr	r3, [pc, #464]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003ca2:	801a      	strh	r2, [r3, #0]
      if (modulelimcur > (cablelim * 1.5))
 8003ca4:	4b73      	ldr	r3, [pc, #460]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fbab 	bl	8000404 <__aeabi_i2d>
 8003cae:	4604      	mov	r4, r0
 8003cb0:	460d      	mov	r5, r1
 8003cb2:	4b71      	ldr	r3, [pc, #452]	; (8003e78 <ACcurrentlimit+0x260>)
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fc fba4 	bl	8000404 <__aeabi_i2d>
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	4b6b      	ldr	r3, [pc, #428]	; (8003e70 <ACcurrentlimit+0x258>)
 8003cc2:	f7fc fc09 	bl	80004d8 <__aeabi_dmul>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4620      	mov	r0, r4
 8003ccc:	4629      	mov	r1, r5
 8003cce:	f7fc fe93 	bl	80009f8 <__aeabi_dcmpgt>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d026      	beq.n	8003d26 <ACcurrentlimit+0x10e>
      {
        modulelimcur = cablelim * 1.5;
 8003cd8:	4b67      	ldr	r3, [pc, #412]	; (8003e78 <ACcurrentlimit+0x260>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fc fb91 	bl	8000404 <__aeabi_i2d>
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	4b62      	ldr	r3, [pc, #392]	; (8003e70 <ACcurrentlimit+0x258>)
 8003ce8:	f7fc fbf6 	bl	80004d8 <__aeabi_dmul>
 8003cec:	4603      	mov	r3, r0
 8003cee:	460c      	mov	r4, r1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	f7fc fec8 	bl	8000a88 <__aeabi_d2uiz>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	4b5d      	ldr	r3, [pc, #372]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003cfe:	801a      	strh	r2, [r3, #0]
 8003d00:	e011      	b.n	8003d26 <ACcurrentlimit+0x10e>
      }
    }
  }
  else
  {
    if (parameters.phaseconfig == 0)
 8003d02:	4b57      	ldr	r3, [pc, #348]	; (8003e60 <ACcurrentlimit+0x248>)
 8003d04:	799b      	ldrb	r3, [r3, #6]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d109      	bne.n	8003d1e <ACcurrentlimit+0x106>
    {
      modulelimcur = (parameters.currReq / 3); // all module parallel, sharing AC input current
 8003d0a:	4b55      	ldr	r3, [pc, #340]	; (8003e60 <ACcurrentlimit+0x248>)
 8003d0c:	899b      	ldrh	r3, [r3, #12]
 8003d0e:	4a57      	ldr	r2, [pc, #348]	; (8003e6c <ACcurrentlimit+0x254>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	4b56      	ldr	r3, [pc, #344]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	e003      	b.n	8003d26 <ACcurrentlimit+0x10e>
    }
    else
    {
      modulelimcur = parameters.currReq;
 8003d1e:	4b50      	ldr	r3, [pc, #320]	; (8003e60 <ACcurrentlimit+0x248>)
 8003d20:	899a      	ldrh	r2, [r3, #12]
 8003d22:	4b54      	ldr	r3, [pc, #336]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003d24:	801a      	strh	r2, [r3, #0]
    }
  }
  if ((parameters.canControl == 1 )| (parameters.canControl == 2))
 8003d26:	4b4e      	ldr	r3, [pc, #312]	; (8003e60 <ACcurrentlimit+0x248>)
 8003d28:	791b      	ldrb	r3, [r3, #4]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	bf0c      	ite	eq
 8003d2e:	2301      	moveq	r3, #1
 8003d30:	2300      	movne	r3, #0
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	4b4a      	ldr	r3, [pc, #296]	; (8003e60 <ACcurrentlimit+0x248>)
 8003d36:	791b      	ldrb	r3, [r3, #4]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	4313      	orrs	r3, r2
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d031      	beq.n	8003dae <ACcurrentlimit+0x196>
  {
    if (accurlim * 1.5 > (16000 * 1.5)) //enable second charger if current available >15A
 8003d4a:	4b47      	ldr	r3, [pc, #284]	; (8003e68 <ACcurrentlimit+0x250>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fc fb57 	bl	8000404 <__aeabi_i2d>
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	4b45      	ldr	r3, [pc, #276]	; (8003e70 <ACcurrentlimit+0x258>)
 8003d5c:	f7fc fbbc 	bl	80004d8 <__aeabi_dmul>
 8003d60:	4603      	mov	r3, r0
 8003d62:	460c      	mov	r4, r1
 8003d64:	4618      	mov	r0, r3
 8003d66:	4621      	mov	r1, r4
 8003d68:	a33b      	add	r3, pc, #236	; (adr r3, 8003e58 <ACcurrentlimit+0x240>)
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f7fc fe43 	bl	80009f8 <__aeabi_dcmpgt>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d017      	beq.n	8003da8 <ACcurrentlimit+0x190>
    {
      modulelimcur = modulelimcur * 0.5;
 8003d78:	4b3e      	ldr	r3, [pc, #248]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fb41 	bl	8000404 <__aeabi_i2d>
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	4b3d      	ldr	r3, [pc, #244]	; (8003e7c <ACcurrentlimit+0x264>)
 8003d88:	f7fc fba6 	bl	80004d8 <__aeabi_dmul>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	460c      	mov	r4, r1
 8003d90:	4618      	mov	r0, r3
 8003d92:	4621      	mov	r1, r4
 8003d94:	f7fc fe78 	bl	8000a88 <__aeabi_d2uiz>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	4b35      	ldr	r3, [pc, #212]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003d9e:	801a      	strh	r2, [r3, #0]
      slavechargerenable = 1;
 8003da0:	4b37      	ldr	r3, [pc, #220]	; (8003e80 <ACcurrentlimit+0x268>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e002      	b.n	8003dae <ACcurrentlimit+0x196>

    }
    else
    {
      slavechargerenable = 0;
 8003da8:	4b35      	ldr	r3, [pc, #212]	; (8003e80 <ACcurrentlimit+0x268>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
    }
  }

  if (parameters.phaseconfig == 1)
 8003dae:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <ACcurrentlimit+0x248>)
 8003db0:	799b      	ldrb	r3, [r3, #6]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d118      	bne.n	8003de8 <ACcurrentlimit+0x1d0>
  {
    if (modulelimcur > (dcaclim * 1.5)) //if more current then max per module or limited by DC output current
 8003db6:	4b2f      	ldr	r3, [pc, #188]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc fb22 	bl	8000404 <__aeabi_i2d>
 8003dc0:	4b30      	ldr	r3, [pc, #192]	; (8003e84 <ACcurrentlimit+0x26c>)
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc fb1d 	bl	8000404 <__aeabi_i2d>
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <ACcurrentlimit+0x258>)
 8003dd0:	f7fc fb82 	bl	80004d8 <__aeabi_dmul>
    {
      // modulelimcur = (dcaclim * 1.5);
    }
    if (modulelimcur > parameters.currReq) //if evse allows more current then set in parameters limit it
 8003dd4:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <ACcurrentlimit+0x248>)
 8003dd6:	899a      	ldrh	r2, [r3, #12]
 8003dd8:	4b26      	ldr	r3, [pc, #152]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d203      	bcs.n	8003de8 <ACcurrentlimit+0x1d0>
    {
      modulelimcur = parameters.currReq;
 8003de0:	4b1f      	ldr	r3, [pc, #124]	; (8003e60 <ACcurrentlimit+0x248>)
 8003de2:	899a      	ldrh	r2, [r3, #12]
 8003de4:	4b23      	ldr	r3, [pc, #140]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003de6:	801a      	strh	r2, [r3, #0]
    }
  }
  if (parameters.phaseconfig == 0)
 8003de8:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <ACcurrentlimit+0x248>)
 8003dea:	799b      	ldrb	r3, [r3, #6]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d124      	bne.n	8003e3a <ACcurrentlimit+0x222>
  {
    if (modulelimcur > (dcaclim * 0.5)) //if more current then max per module or limited by DC output current
 8003df0:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fc fb05 	bl	8000404 <__aeabi_i2d>
 8003dfa:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <ACcurrentlimit+0x26c>)
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fc fb00 	bl	8000404 <__aeabi_i2d>
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <ACcurrentlimit+0x264>)
 8003e0a:	f7fc fb65 	bl	80004d8 <__aeabi_dmul>
    {
      //modulelimcur = (dcaclim * 0.5);
    }
    if (modulelimcur > (parameters.currReq / activemodules)) //if evse allows more current then set in parameters limit it
 8003e0e:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <ACcurrentlimit+0x248>)
 8003e16:	899b      	ldrh	r3, [r3, #12]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4b1b      	ldr	r3, [pc, #108]	; (8003e88 <ACcurrentlimit+0x270>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	fb91 f3f3 	sdiv	r3, r1, r3
 8003e22:	429a      	cmp	r2, r3
 8003e24:	dd09      	ble.n	8003e3a <ACcurrentlimit+0x222>
    {
      modulelimcur = (parameters.currReq / activemodules);
 8003e26:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <ACcurrentlimit+0x248>)
 8003e28:	899b      	ldrh	r3, [r3, #12]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <ACcurrentlimit+0x270>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003e38:	801a      	strh	r2, [r3, #0]
    }
  }
  if (parameters.phaseconfig != 0 && parameters.phaseconfig != 1)
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <ACcurrentlimit+0x248>)
 8003e3c:	799b      	ldrb	r3, [r3, #6]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d006      	beq.n	8003e50 <ACcurrentlimit+0x238>
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <ACcurrentlimit+0x248>)
 8003e44:	799b      	ldrb	r3, [r3, #6]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d002      	beq.n	8003e50 <ACcurrentlimit+0x238>
  {
    modulelimcur =  0;
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <ACcurrentlimit+0x25c>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	801a      	strh	r2, [r3, #0]
  }
}
 8003e50:	bf00      	nop
 8003e52:	bdb0      	pop	{r4, r5, r7, pc}
 8003e54:	f3af 8000 	nop.w
 8003e58:	00000000 	.word	0x00000000
 8003e5c:	40d77000 	.word	0x40d77000
 8003e60:	2000033c 	.word	0x2000033c
 8003e64:	20000230 	.word	0x20000230
 8003e68:	20000236 	.word	0x20000236
 8003e6c:	aaaaaaab 	.word	0xaaaaaaab
 8003e70:	3ff80000 	.word	0x3ff80000
 8003e74:	20000368 	.word	0x20000368
 8003e78:	20000238 	.word	0x20000238
 8003e7c:	3fe00000 	.word	0x3fe00000
 8003e80:	2000023c 	.word	0x2000023c
 8003e84:	2000023a 	.word	0x2000023a
 8003e88:	200002f4 	.word	0x200002f4
 8003e8c:	00000000 	.word	0x00000000

08003e90 <DCcurrentlimit>:

void DCcurrentlimit()
{
 8003e90:	b5b0      	push	{r4, r5, r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
  totdccur = 0;
 8003e96:	4b44      	ldr	r3, [pc, #272]	; (8003fa8 <DCcurrentlimit+0x118>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	801a      	strh	r2, [r3, #0]
  for (int x = 0; x < 3; x++)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	607b      	str	r3, [r7, #4]
 8003ea0:	e025      	b.n	8003eee <DCcurrentlimit+0x5e>
  {
    totdccur = totdccur + (dccur[x] * 0.1678466) ;
 8003ea2:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <DCcurrentlimit+0x118>)
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc faac 	bl	8000404 <__aeabi_i2d>
 8003eac:	4604      	mov	r4, r0
 8003eae:	460d      	mov	r5, r1
 8003eb0:	4a3e      	ldr	r2, [pc, #248]	; (8003fac <DCcurrentlimit+0x11c>)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fc faa3 	bl	8000404 <__aeabi_i2d>
 8003ebe:	a336      	add	r3, pc, #216	; (adr r3, 8003f98 <DCcurrentlimit+0x108>)
 8003ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec4:	f7fc fb08 	bl	80004d8 <__aeabi_dmul>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4620      	mov	r0, r4
 8003ece:	4629      	mov	r1, r5
 8003ed0:	f7fc f94c 	bl	800016c <__adddf3>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	460c      	mov	r4, r1
 8003ed8:	4618      	mov	r0, r3
 8003eda:	4621      	mov	r1, r4
 8003edc:	f7fc fdd4 	bl	8000a88 <__aeabi_d2uiz>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <DCcurrentlimit+0x118>)
 8003ee6:	801a      	strh	r2, [r3, #0]
  for (int x = 0; x < 3; x++)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3301      	adds	r3, #1
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	ddd6      	ble.n	8003ea2 <DCcurrentlimit+0x12>
  }
  dcaclim = 0;
 8003ef4:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <DCcurrentlimit+0x120>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	801a      	strh	r2, [r3, #0]
  int x = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	603b      	str	r3, [r7, #0]
  if (totdccur > 0.2)
 8003efe:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <DCcurrentlimit+0x118>)
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fc fa7e 	bl	8000404 <__aeabi_i2d>
 8003f08:	a325      	add	r3, pc, #148	; (adr r3, 8003fa0 <DCcurrentlimit+0x110>)
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	f7fc fd73 	bl	80009f8 <__aeabi_dcmpgt>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d034      	beq.n	8003f82 <DCcurrentlimit+0xf2>
  {
    dcaclim = (((float)dcvolt[x] / (float)acvolt[x]) * (maxdccur * 1.2)) ; /// activemodules
 8003f18:	4a26      	ldr	r2, [pc, #152]	; (8003fb4 <DCcurrentlimit+0x124>)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fe87 	bl	8000c34 <__aeabi_ui2f>
 8003f26:	4604      	mov	r4, r0
 8003f28:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <DCcurrentlimit+0x128>)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fc fe7f 	bl	8000c34 <__aeabi_ui2f>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f7fc ff86 	bl	8000e4c <__aeabi_fdiv>
 8003f40:	4603      	mov	r3, r0
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc fa70 	bl	8000428 <__aeabi_f2d>
 8003f48:	4604      	mov	r4, r0
 8003f4a:	460d      	mov	r5, r1
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <DCcurrentlimit+0x12c>)
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc fa57 	bl	8000404 <__aeabi_i2d>
 8003f56:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <DCcurrentlimit+0x130>)
 8003f5c:	f7fc fabc 	bl	80004d8 <__aeabi_dmul>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4620      	mov	r0, r4
 8003f66:	4629      	mov	r1, r5
 8003f68:	f7fc fab6 	bl	80004d8 <__aeabi_dmul>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	4618      	mov	r0, r3
 8003f72:	4621      	mov	r1, r4
 8003f74:	f7fc fd88 	bl	8000a88 <__aeabi_d2uiz>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <DCcurrentlimit+0x120>)
 8003f7e:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    dcaclim = 5000;
  }
}
 8003f80:	e003      	b.n	8003f8a <DCcurrentlimit+0xfa>
    dcaclim = 5000;
 8003f82:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <DCcurrentlimit+0x120>)
 8003f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f88:	801a      	strh	r2, [r3, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bdb0      	pop	{r4, r5, r7, pc}
 8003f92:	bf00      	nop
 8003f94:	f3af 8000 	nop.w
 8003f98:	54df5566 	.word	0x54df5566
 8003f9c:	3fc57bff 	.word	0x3fc57bff
 8003fa0:	9999999a 	.word	0x9999999a
 8003fa4:	3fc99999 	.word	0x3fc99999
 8003fa8:	2000024e 	.word	0x2000024e
 8003fac:	20000248 	.word	0x20000248
 8003fb0:	2000023a 	.word	0x2000023a
 8003fb4:	20000240 	.word	0x20000240
 8003fb8:	20000250 	.word	0x20000250
 8003fbc:	2000000c 	.word	0x2000000c
 8003fc0:	3ff33333 	.word	0x3ff33333

08003fc4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_6){
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d101      	bne.n	8003fd8 <HAL_GPIO_EXTI_Callback+0x14>
		Pilotcalc();
 8003fd4:	f7ff fde2 	bl	8003b9c <Pilotcalc>
	}
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fe2:	b08f      	sub	sp, #60	; 0x3c
 8003fe4:	af0a      	add	r7, sp, #40	; 0x28
 8003fe6:	60f8      	str	r0, [r7, #12]
	if(htim->Instance == TIM3){
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a24      	ldr	r2, [pc, #144]	; (8004080 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_PeriodElapsedCallback+0x16>
		Charger_msgs();
 8003ff2:	f7ff fd0b 	bl	8003a0c <Charger_msgs>
	}
	if(htim->Instance == TIM4){
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a22      	ldr	r2, [pc, #136]	; (8004084 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d13b      	bne.n	8004078 <HAL_TIM_PeriodElapsedCallback+0x98>
		sprintf(wifistr,"va%03d,vb%03d,vc%03d,ia%03d,ib%03d,ic%03d,ua%03d,ub%03d,uc%03d,aa%03d,ab%03d,ac%03d*",acvolt[0],acvolt[1],acvolt[2]
 8004000:	4b21      	ldr	r3, [pc, #132]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	469c      	mov	ip, r3
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004008:	885b      	ldrh	r3, [r3, #2]
 800400a:	469e      	mov	lr, r3
 800400c:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800400e:	889b      	ldrh	r3, [r3, #4]
 8004010:	461a      	mov	r2, r3
																											   ,accur[0],accur[1],accur[2]
 8004012:	4b1e      	ldr	r3, [pc, #120]	; (800408c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004014:	881b      	ldrh	r3, [r3, #0]
		sprintf(wifistr,"va%03d,vb%03d,vc%03d,ia%03d,ib%03d,ic%03d,ua%03d,ub%03d,uc%03d,aa%03d,ab%03d,ac%03d*",acvolt[0],acvolt[1],acvolt[2]
 8004016:	4619      	mov	r1, r3
																											   ,accur[0],accur[1],accur[2]
 8004018:	4b1c      	ldr	r3, [pc, #112]	; (800408c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800401a:	885b      	ldrh	r3, [r3, #2]
		sprintf(wifistr,"va%03d,vb%03d,vc%03d,ia%03d,ib%03d,ic%03d,ua%03d,ub%03d,uc%03d,aa%03d,ab%03d,ac%03d*",acvolt[0],acvolt[1],acvolt[2]
 800401c:	4618      	mov	r0, r3
																											   ,accur[0],accur[1],accur[2]
 800401e:	4b1b      	ldr	r3, [pc, #108]	; (800408c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004020:	889b      	ldrh	r3, [r3, #4]
		sprintf(wifistr,"va%03d,vb%03d,vc%03d,ia%03d,ib%03d,ic%03d,ua%03d,ub%03d,uc%03d,aa%03d,ab%03d,ac%03d*",acvolt[0],acvolt[1],acvolt[2]
 8004022:	461c      	mov	r4, r3
																												,dcvolt[0],dcvolt[1],dcvolt[2]
 8004024:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004026:	881b      	ldrh	r3, [r3, #0]
		sprintf(wifistr,"va%03d,vb%03d,vc%03d,ia%03d,ib%03d,ic%03d,ua%03d,ub%03d,uc%03d,aa%03d,ab%03d,ac%03d*",acvolt[0],acvolt[1],acvolt[2]
 8004028:	461d      	mov	r5, r3
																												,dcvolt[0],dcvolt[1],dcvolt[2]
 800402a:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800402c:	885b      	ldrh	r3, [r3, #2]
		sprintf(wifistr,"va%03d,vb%03d,vc%03d,ia%03d,ib%03d,ic%03d,ua%03d,ub%03d,uc%03d,aa%03d,ab%03d,ac%03d*",acvolt[0],acvolt[1],acvolt[2]
 800402e:	461e      	mov	r6, r3
																												,dcvolt[0],dcvolt[1],dcvolt[2]
 8004030:	4b17      	ldr	r3, [pc, #92]	; (8004090 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004032:	889b      	ldrh	r3, [r3, #4]
		sprintf(wifistr,"va%03d,vb%03d,vc%03d,ia%03d,ib%03d,ic%03d,ua%03d,ub%03d,uc%03d,aa%03d,ab%03d,ac%03d*",acvolt[0],acvolt[1],acvolt[2]
 8004034:	60bb      	str	r3, [r7, #8]
																												,dccur[0],dccur[1],dccur[2]);
 8004036:	4b17      	ldr	r3, [pc, #92]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004038:	881b      	ldrh	r3, [r3, #0]
		sprintf(wifistr,"va%03d,vb%03d,vc%03d,ia%03d,ib%03d,ic%03d,ua%03d,ub%03d,uc%03d,aa%03d,ab%03d,ac%03d*",acvolt[0],acvolt[1],acvolt[2]
 800403a:	607b      	str	r3, [r7, #4]
																												,dccur[0],dccur[1],dccur[2]);
 800403c:	4b15      	ldr	r3, [pc, #84]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800403e:	885b      	ldrh	r3, [r3, #2]
		sprintf(wifistr,"va%03d,vb%03d,vc%03d,ia%03d,ib%03d,ic%03d,ua%03d,ub%03d,uc%03d,aa%03d,ab%03d,ac%03d*",acvolt[0],acvolt[1],acvolt[2]
 8004040:	603b      	str	r3, [r7, #0]
																												,dccur[0],dccur[1],dccur[2]);
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004044:	889b      	ldrh	r3, [r3, #4]
		sprintf(wifistr,"va%03d,vb%03d,vc%03d,ia%03d,ib%03d,ic%03d,ua%03d,ub%03d,uc%03d,aa%03d,ab%03d,ac%03d*",acvolt[0],acvolt[1],acvolt[2]
 8004046:	9309      	str	r3, [sp, #36]	; 0x24
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	9308      	str	r3, [sp, #32]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	9307      	str	r3, [sp, #28]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	9306      	str	r3, [sp, #24]
 8004054:	9605      	str	r6, [sp, #20]
 8004056:	9504      	str	r5, [sp, #16]
 8004058:	9403      	str	r4, [sp, #12]
 800405a:	9002      	str	r0, [sp, #8]
 800405c:	9101      	str	r1, [sp, #4]
 800405e:	9200      	str	r2, [sp, #0]
 8004060:	4673      	mov	r3, lr
 8004062:	4662      	mov	r2, ip
 8004064:	490c      	ldr	r1, [pc, #48]	; (8004098 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004066:	480d      	ldr	r0, [pc, #52]	; (800409c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004068:	f004 ff48 	bl	8008efc <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)wifistr, 73, 5);
 800406c:	2305      	movs	r3, #5
 800406e:	2249      	movs	r2, #73	; 0x49
 8004070:	490a      	ldr	r1, [pc, #40]	; (800409c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004072:	480b      	ldr	r0, [pc, #44]	; (80040a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004074:	f003 ff4b 	bl	8007f0e <HAL_UART_Transmit>
	}
}
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	20000250 	.word	0x20000250
 800408c:	20000258 	.word	0x20000258
 8004090:	20000240 	.word	0x20000240
 8004094:	20000248 	.word	0x20000248
 8004098:	0800b55c 	.word	0x0800b55c
 800409c:	2000037c 	.word	0x2000037c
 80040a0:	2000045c 	.word	0x2000045c

080040a4 <Error_Handler>:

void Error_Handler(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */

}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr

080040b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80040b6:	1d3b      	adds	r3, r7, #4
 80040b8:	2100      	movs	r1, #0
 80040ba:	460a      	mov	r2, r1
 80040bc:	801a      	strh	r2, [r3, #0]
 80040be:	460a      	mov	r2, r1
 80040c0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80040c2:	2300      	movs	r3, #0
 80040c4:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <MX_RTC_Init+0x8c>)
 80040c8:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <MX_RTC_Init+0x90>)
 80040ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <MX_RTC_Init+0x8c>)
 80040ce:	f04f 32ff 	mov.w	r2, #4294967295
 80040d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <MX_RTC_Init+0x8c>)
 80040d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040da:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80040dc:	4817      	ldr	r0, [pc, #92]	; (800413c <MX_RTC_Init+0x8c>)
 80040de:	f002 ff91 	bl	8007004 <HAL_RTC_Init>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80040e8:	f7ff ffdc 	bl	80040a4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	2201      	movs	r2, #1
 80040fc:	4619      	mov	r1, r3
 80040fe:	480f      	ldr	r0, [pc, #60]	; (800413c <MX_RTC_Init+0x8c>)
 8004100:	f003 f816 	bl	8007130 <HAL_RTC_SetTime>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800410a:	f7ff ffcb 	bl	80040a4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800410e:	2300      	movs	r3, #0
 8004110:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_FEBRUARY;
 8004112:	2302      	movs	r3, #2
 8004114:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x16;
 8004116:	2316      	movs	r3, #22
 8004118:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x20;
 800411a:	2320      	movs	r3, #32
 800411c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800411e:	463b      	mov	r3, r7
 8004120:	2201      	movs	r2, #1
 8004122:	4619      	mov	r1, r3
 8004124:	4805      	ldr	r0, [pc, #20]	; (800413c <MX_RTC_Init+0x8c>)
 8004126:	f003 f89b 	bl	8007260 <HAL_RTC_SetDate>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8004130:	f7ff ffb8 	bl	80040a4 <Error_Handler>
  }

}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	200003c8 	.word	0x200003c8
 8004140:	40002800 	.word	0x40002800

08004144 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a0b      	ldr	r2, [pc, #44]	; (8004180 <HAL_RTC_MspInit+0x3c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d110      	bne.n	8004178 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8004156:	f002 f9bb 	bl	80064d0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <HAL_RTC_MspInit+0x40>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	4a09      	ldr	r2, [pc, #36]	; (8004184 <HAL_RTC_MspInit+0x40>)
 8004160:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004164:	61d3      	str	r3, [r2, #28]
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <HAL_RTC_MspInit+0x40>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RTC_MspInit+0x44>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40002800 	.word	0x40002800
 8004184:	40021000 	.word	0x40021000
 8004188:	4242043c 	.word	0x4242043c

0800418c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_MspInit+0x5c>)
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	4a14      	ldr	r2, [pc, #80]	; (80041e8 <HAL_MspInit+0x5c>)
 8004198:	f043 0301 	orr.w	r3, r3, #1
 800419c:	6193      	str	r3, [r2, #24]
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_MspInit+0x5c>)
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_MspInit+0x5c>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4a0e      	ldr	r2, [pc, #56]	; (80041e8 <HAL_MspInit+0x5c>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	61d3      	str	r3, [r2, #28]
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <HAL_MspInit+0x5c>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	607b      	str	r3, [r7, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041c2:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <HAL_MspInit+0x60>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	4a04      	ldr	r2, [pc, #16]	; (80041ec <HAL_MspInit+0x60>)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40010000 	.word	0x40010000

080041f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80041f4:	bf00      	nop
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr

080041fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004200:	e7fe      	b.n	8004200 <HardFault_Handler+0x4>

08004202 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004206:	e7fe      	b.n	8004206 <MemManage_Handler+0x4>

08004208 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800420c:	e7fe      	b.n	800420c <BusFault_Handler+0x4>

0800420e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800420e:	b480      	push	{r7}
 8004210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004212:	e7fe      	b.n	8004212 <UsageFault_Handler+0x4>

08004214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800423c:	f000 fb4e 	bl	80048dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004240:	bf00      	nop
 8004242:	bd80      	pop	{r7, pc}

08004244 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004248:	2040      	movs	r0, #64	; 0x40
 800424a:	f002 f847 	bl	80062dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004258:	4802      	ldr	r0, [pc, #8]	; (8004264 <TIM3_IRQHandler+0x10>)
 800425a:	f003 fad9 	bl	8007810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	2000041c 	.word	0x2000041c

08004268 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800426c:	4802      	ldr	r0, [pc, #8]	; (8004278 <TIM4_IRQHandler+0x10>)
 800426e:	f003 facf 	bl	8007810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200003dc 	.word	0x200003dc

0800427c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	e00a      	b.n	80042a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800428e:	f3af 8000 	nop.w
 8004292:	4601      	mov	r1, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	60ba      	str	r2, [r7, #8]
 800429a:	b2ca      	uxtb	r2, r1
 800429c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	3301      	adds	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	dbf0      	blt.n	800428e <_read+0x12>
	}

return len;
 80042ac:	687b      	ldr	r3, [r7, #4]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b086      	sub	sp, #24
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e009      	b.n	80042dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	60ba      	str	r2, [r7, #8]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fe fca7 	bl	8002c24 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	3301      	adds	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	dbf1      	blt.n	80042c8 <_write+0x12>
	}
	return len;
 80042e4:	687b      	ldr	r3, [r7, #4]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <_close>:

int _close(int file)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
	return -1;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004314:	605a      	str	r2, [r3, #4]
	return 0;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <_isatty>:

int _isatty(int file)
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
	return 1;
 800432a:	2301      	movs	r3, #1
}
 800432c:	4618      	mov	r0, r3
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
	return 0;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr
	...

08004350 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004358:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <_sbrk+0x50>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d102      	bne.n	8004366 <_sbrk+0x16>
		heap_end = &end;
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <_sbrk+0x50>)
 8004362:	4a10      	ldr	r2, [pc, #64]	; (80043a4 <_sbrk+0x54>)
 8004364:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004366:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <_sbrk+0x50>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <_sbrk+0x50>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4413      	add	r3, r2
 8004374:	466a      	mov	r2, sp
 8004376:	4293      	cmp	r3, r2
 8004378:	d907      	bls.n	800438a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800437a:	f004 f8ad 	bl	80084d8 <__errno>
 800437e:	4602      	mov	r2, r0
 8004380:	230c      	movs	r3, #12
 8004382:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004384:	f04f 33ff 	mov.w	r3, #4294967295
 8004388:	e006      	b.n	8004398 <_sbrk+0x48>
	}

	heap_end += incr;
 800438a:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <_sbrk+0x50>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	4a03      	ldr	r2, [pc, #12]	; (80043a0 <_sbrk+0x50>)
 8004394:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004396:	68fb      	ldr	r3, [r7, #12]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000290 	.word	0x20000290
 80043a4:	20000778 	.word	0x20000778

080043a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80043ac:	4b15      	ldr	r3, [pc, #84]	; (8004404 <SystemInit+0x5c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a14      	ldr	r2, [pc, #80]	; (8004404 <SystemInit+0x5c>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80043b8:	4b12      	ldr	r3, [pc, #72]	; (8004404 <SystemInit+0x5c>)
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	4911      	ldr	r1, [pc, #68]	; (8004404 <SystemInit+0x5c>)
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <SystemInit+0x60>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <SystemInit+0x5c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0e      	ldr	r2, [pc, #56]	; (8004404 <SystemInit+0x5c>)
 80043ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <SystemInit+0x5c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <SystemInit+0x5c>)
 80043da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80043e0:	4b08      	ldr	r3, [pc, #32]	; (8004404 <SystemInit+0x5c>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4a07      	ldr	r2, [pc, #28]	; (8004404 <SystemInit+0x5c>)
 80043e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80043ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <SystemInit+0x5c>)
 80043ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80043f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <SystemInit+0x64>)
 80043f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043fa:	609a      	str	r2, [r3, #8]
#endif 
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr
 8004404:	40021000 	.word	0x40021000
 8004408:	f8ff0000 	.word	0xf8ff0000
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004416:	f107 0308 	add.w	r3, r7, #8
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	609a      	str	r2, [r3, #8]
 8004422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004424:	463b      	mov	r3, r7
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800442c:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <MX_TIM3_Init+0x94>)
 800442e:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <MX_TIM3_Init+0x98>)
 8004430:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 647;
 8004432:	4b1c      	ldr	r3, [pc, #112]	; (80044a4 <MX_TIM3_Init+0x94>)
 8004434:	f240 2287 	movw	r2, #647	; 0x287
 8004438:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <MX_TIM3_Init+0x94>)
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8004440:	4b18      	ldr	r3, [pc, #96]	; (80044a4 <MX_TIM3_Init+0x94>)
 8004442:	f242 720f 	movw	r2, #9999	; 0x270f
 8004446:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004448:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <MX_TIM3_Init+0x94>)
 800444a:	2200      	movs	r2, #0
 800444c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800444e:	4b15      	ldr	r3, [pc, #84]	; (80044a4 <MX_TIM3_Init+0x94>)
 8004450:	2200      	movs	r2, #0
 8004452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004454:	4813      	ldr	r0, [pc, #76]	; (80044a4 <MX_TIM3_Init+0x94>)
 8004456:	f003 f963 	bl	8007720 <HAL_TIM_Base_Init>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004460:	f7ff fe20 	bl	80040a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004468:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800446a:	f107 0308 	add.w	r3, r7, #8
 800446e:	4619      	mov	r1, r3
 8004470:	480c      	ldr	r0, [pc, #48]	; (80044a4 <MX_TIM3_Init+0x94>)
 8004472:	f003 fad5 	bl	8007a20 <HAL_TIM_ConfigClockSource>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800447c:	f7ff fe12 	bl	80040a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004480:	2300      	movs	r3, #0
 8004482:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004484:	2300      	movs	r3, #0
 8004486:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004488:	463b      	mov	r3, r7
 800448a:	4619      	mov	r1, r3
 800448c:	4805      	ldr	r0, [pc, #20]	; (80044a4 <MX_TIM3_Init+0x94>)
 800448e:	f003 fc9b 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004498:	f7ff fe04 	bl	80040a4 <Error_Handler>
  }

}
 800449c:	bf00      	nop
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	2000041c 	.word	0x2000041c
 80044a8:	40000400 	.word	0x40000400

080044ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044b2:	f107 0308 	add.w	r3, r7, #8
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	605a      	str	r2, [r3, #4]
 80044bc:	609a      	str	r2, [r3, #8]
 80044be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044c0:	463b      	mov	r3, r7
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80044c8:	4b1d      	ldr	r3, [pc, #116]	; (8004540 <MX_TIM4_Init+0x94>)
 80044ca:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <MX_TIM4_Init+0x98>)
 80044cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 80044ce:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <MX_TIM4_Init+0x94>)
 80044d0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80044d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044d6:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <MX_TIM4_Init+0x94>)
 80044d8:	2200      	movs	r2, #0
 80044da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80044dc:	4b18      	ldr	r3, [pc, #96]	; (8004540 <MX_TIM4_Init+0x94>)
 80044de:	f242 720f 	movw	r2, #9999	; 0x270f
 80044e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044e4:	4b16      	ldr	r3, [pc, #88]	; (8004540 <MX_TIM4_Init+0x94>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ea:	4b15      	ldr	r3, [pc, #84]	; (8004540 <MX_TIM4_Init+0x94>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80044f0:	4813      	ldr	r0, [pc, #76]	; (8004540 <MX_TIM4_Init+0x94>)
 80044f2:	f003 f915 	bl	8007720 <HAL_TIM_Base_Init>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80044fc:	f7ff fdd2 	bl	80040a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004506:	f107 0308 	add.w	r3, r7, #8
 800450a:	4619      	mov	r1, r3
 800450c:	480c      	ldr	r0, [pc, #48]	; (8004540 <MX_TIM4_Init+0x94>)
 800450e:	f003 fa87 	bl	8007a20 <HAL_TIM_ConfigClockSource>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004518:	f7ff fdc4 	bl	80040a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800451c:	2300      	movs	r3, #0
 800451e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004520:	2300      	movs	r3, #0
 8004522:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004524:	463b      	mov	r3, r7
 8004526:	4619      	mov	r1, r3
 8004528:	4805      	ldr	r0, [pc, #20]	; (8004540 <MX_TIM4_Init+0x94>)
 800452a:	f003 fc4d 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004534:	f7ff fdb6 	bl	80040a4 <Error_Handler>
  }

}
 8004538:	bf00      	nop
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	200003dc 	.word	0x200003dc
 8004544:	40000800 	.word	0x40000800

08004548 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1a      	ldr	r2, [pc, #104]	; (80045c0 <HAL_TIM_Base_MspInit+0x78>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d114      	bne.n	8004584 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800455a:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <HAL_TIM_Base_MspInit+0x7c>)
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <HAL_TIM_Base_MspInit+0x7c>)
 8004560:	f043 0302 	orr.w	r3, r3, #2
 8004564:	61d3      	str	r3, [r2, #28]
 8004566:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <HAL_TIM_Base_MspInit+0x7c>)
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004572:	2200      	movs	r2, #0
 8004574:	2100      	movs	r1, #0
 8004576:	201d      	movs	r0, #29
 8004578:	f001 faef 	bl	8005b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800457c:	201d      	movs	r0, #29
 800457e:	f001 fb08 	bl	8005b92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004582:	e018      	b.n	80045b6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a0f      	ldr	r2, [pc, #60]	; (80045c8 <HAL_TIM_Base_MspInit+0x80>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d113      	bne.n	80045b6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <HAL_TIM_Base_MspInit+0x7c>)
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <HAL_TIM_Base_MspInit+0x7c>)
 8004594:	f043 0304 	orr.w	r3, r3, #4
 8004598:	61d3      	str	r3, [r2, #28]
 800459a:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <HAL_TIM_Base_MspInit+0x7c>)
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80045a6:	2200      	movs	r2, #0
 80045a8:	2100      	movs	r1, #0
 80045aa:	201e      	movs	r0, #30
 80045ac:	f001 fad5 	bl	8005b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80045b0:	201e      	movs	r0, #30
 80045b2:	f001 faee 	bl	8005b92 <HAL_NVIC_EnableIRQ>
}
 80045b6:	bf00      	nop
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40000800 	.word	0x40000800

080045cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <MX_USART1_UART_Init+0x4c>)
 80045d2:	4a12      	ldr	r2, [pc, #72]	; (800461c <MX_USART1_UART_Init+0x50>)
 80045d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <MX_USART1_UART_Init+0x4c>)
 80045d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <MX_USART1_UART_Init+0x4c>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <MX_USART1_UART_Init+0x4c>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045ea:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <MX_USART1_UART_Init+0x4c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045f0:	4b09      	ldr	r3, [pc, #36]	; (8004618 <MX_USART1_UART_Init+0x4c>)
 80045f2:	220c      	movs	r2, #12
 80045f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045f6:	4b08      	ldr	r3, [pc, #32]	; (8004618 <MX_USART1_UART_Init+0x4c>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <MX_USART1_UART_Init+0x4c>)
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004602:	4805      	ldr	r0, [pc, #20]	; (8004618 <MX_USART1_UART_Init+0x4c>)
 8004604:	f003 fc36 	bl	8007e74 <HAL_UART_Init>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800460e:	f7ff fd49 	bl	80040a4 <Error_Handler>
  }

}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	2000049c 	.word	0x2000049c
 800461c:	40013800 	.word	0x40013800

08004620 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <MX_USART3_UART_Init+0x4c>)
 8004626:	4a12      	ldr	r2, [pc, #72]	; (8004670 <MX_USART3_UART_Init+0x50>)
 8004628:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800462a:	4b10      	ldr	r3, [pc, #64]	; (800466c <MX_USART3_UART_Init+0x4c>)
 800462c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8004630:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004632:	4b0e      	ldr	r3, [pc, #56]	; (800466c <MX_USART3_UART_Init+0x4c>)
 8004634:	2200      	movs	r2, #0
 8004636:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <MX_USART3_UART_Init+0x4c>)
 800463a:	2200      	movs	r2, #0
 800463c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800463e:	4b0b      	ldr	r3, [pc, #44]	; (800466c <MX_USART3_UART_Init+0x4c>)
 8004640:	2200      	movs	r2, #0
 8004642:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004644:	4b09      	ldr	r3, [pc, #36]	; (800466c <MX_USART3_UART_Init+0x4c>)
 8004646:	220c      	movs	r2, #12
 8004648:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <MX_USART3_UART_Init+0x4c>)
 800464c:	2200      	movs	r2, #0
 800464e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004650:	4b06      	ldr	r3, [pc, #24]	; (800466c <MX_USART3_UART_Init+0x4c>)
 8004652:	2200      	movs	r2, #0
 8004654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004656:	4805      	ldr	r0, [pc, #20]	; (800466c <MX_USART3_UART_Init+0x4c>)
 8004658:	f003 fc0c 	bl	8007e74 <HAL_UART_Init>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004662:	f7ff fd1f 	bl	80040a4 <Error_Handler>
  }

}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	2000045c 	.word	0x2000045c
 8004670:	40004800 	.word	0x40004800

08004674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800467c:	f107 0318 	add.w	r3, r7, #24
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	609a      	str	r2, [r3, #8]
 8004688:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a38      	ldr	r2, [pc, #224]	; (8004770 <HAL_UART_MspInit+0xfc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d132      	bne.n	80046fa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004694:	4b37      	ldr	r3, [pc, #220]	; (8004774 <HAL_UART_MspInit+0x100>)
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	4a36      	ldr	r2, [pc, #216]	; (8004774 <HAL_UART_MspInit+0x100>)
 800469a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800469e:	6193      	str	r3, [r2, #24]
 80046a0:	4b34      	ldr	r3, [pc, #208]	; (8004774 <HAL_UART_MspInit+0x100>)
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046ac:	4b31      	ldr	r3, [pc, #196]	; (8004774 <HAL_UART_MspInit+0x100>)
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	4a30      	ldr	r2, [pc, #192]	; (8004774 <HAL_UART_MspInit+0x100>)
 80046b2:	f043 0304 	orr.w	r3, r3, #4
 80046b6:	6193      	str	r3, [r2, #24]
 80046b8:	4b2e      	ldr	r3, [pc, #184]	; (8004774 <HAL_UART_MspInit+0x100>)
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ca:	2302      	movs	r3, #2
 80046cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046ce:	2303      	movs	r3, #3
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d2:	f107 0318 	add.w	r3, r7, #24
 80046d6:	4619      	mov	r1, r3
 80046d8:	4827      	ldr	r0, [pc, #156]	; (8004778 <HAL_UART_MspInit+0x104>)
 80046da:	f001 fc75 	bl	8005fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80046de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ec:	f107 0318 	add.w	r3, r7, #24
 80046f0:	4619      	mov	r1, r3
 80046f2:	4821      	ldr	r0, [pc, #132]	; (8004778 <HAL_UART_MspInit+0x104>)
 80046f4:	f001 fc68 	bl	8005fc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80046f8:	e036      	b.n	8004768 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1f      	ldr	r2, [pc, #124]	; (800477c <HAL_UART_MspInit+0x108>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d131      	bne.n	8004768 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004704:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <HAL_UART_MspInit+0x100>)
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	4a1a      	ldr	r2, [pc, #104]	; (8004774 <HAL_UART_MspInit+0x100>)
 800470a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800470e:	61d3      	str	r3, [r2, #28]
 8004710:	4b18      	ldr	r3, [pc, #96]	; (8004774 <HAL_UART_MspInit+0x100>)
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800471c:	4b15      	ldr	r3, [pc, #84]	; (8004774 <HAL_UART_MspInit+0x100>)
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	4a14      	ldr	r2, [pc, #80]	; (8004774 <HAL_UART_MspInit+0x100>)
 8004722:	f043 0308 	orr.w	r3, r3, #8
 8004726:	6193      	str	r3, [r2, #24]
 8004728:	4b12      	ldr	r3, [pc, #72]	; (8004774 <HAL_UART_MspInit+0x100>)
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473a:	2302      	movs	r3, #2
 800473c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800473e:	2303      	movs	r3, #3
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004742:	f107 0318 	add.w	r3, r7, #24
 8004746:	4619      	mov	r1, r3
 8004748:	480d      	ldr	r0, [pc, #52]	; (8004780 <HAL_UART_MspInit+0x10c>)
 800474a:	f001 fc3d 	bl	8005fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800474e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004754:	2300      	movs	r3, #0
 8004756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	2300      	movs	r3, #0
 800475a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800475c:	f107 0318 	add.w	r3, r7, #24
 8004760:	4619      	mov	r1, r3
 8004762:	4807      	ldr	r0, [pc, #28]	; (8004780 <HAL_UART_MspInit+0x10c>)
 8004764:	f001 fc30 	bl	8005fc8 <HAL_GPIO_Init>
}
 8004768:	bf00      	nop
 800476a:	3728      	adds	r7, #40	; 0x28
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40013800 	.word	0x40013800
 8004774:	40021000 	.word	0x40021000
 8004778:	40010800 	.word	0x40010800
 800477c:	40004800 	.word	0x40004800
 8004780:	40010c00 	.word	0x40010c00

08004784 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0

  hpcd_USB_FS.Instance = USB;
 8004788:	4b0d      	ldr	r3, [pc, #52]	; (80047c0 <MX_USB_PCD_Init+0x3c>)
 800478a:	4a0e      	ldr	r2, [pc, #56]	; (80047c4 <MX_USB_PCD_Init+0x40>)
 800478c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800478e:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <MX_USB_PCD_Init+0x3c>)
 8004790:	2208      	movs	r2, #8
 8004792:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <MX_USB_PCD_Init+0x3c>)
 8004796:	2202      	movs	r2, #2
 8004798:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800479a:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <MX_USB_PCD_Init+0x3c>)
 800479c:	2200      	movs	r2, #0
 800479e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <MX_USB_PCD_Init+0x3c>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <MX_USB_PCD_Init+0x3c>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80047ac:	4804      	ldr	r0, [pc, #16]	; (80047c0 <MX_USB_PCD_Init+0x3c>)
 80047ae:	f001 fdad 	bl	800630c <HAL_PCD_Init>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80047b8:	f7ff fc74 	bl	80040a4 <Error_Handler>
  }

}
 80047bc:	bf00      	nop
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	200004dc 	.word	0x200004dc
 80047c4:	40005c00 	.word	0x40005c00

080047c8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a09      	ldr	r2, [pc, #36]	; (80047fc <HAL_PCD_MspInit+0x34>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10b      	bne.n	80047f2 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80047da:	4b09      	ldr	r3, [pc, #36]	; (8004800 <HAL_PCD_MspInit+0x38>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	4a08      	ldr	r2, [pc, #32]	; (8004800 <HAL_PCD_MspInit+0x38>)
 80047e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047e4:	61d3      	str	r3, [r2, #28]
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <HAL_PCD_MspInit+0x38>)
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80047f2:	bf00      	nop
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr
 80047fc:	40005c00 	.word	0x40005c00
 8004800:	40021000 	.word	0x40021000

08004804 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004804:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004806:	e003      	b.n	8004810 <LoopCopyDataInit>

08004808 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800480a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800480c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800480e:	3104      	adds	r1, #4

08004810 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004810:	480a      	ldr	r0, [pc, #40]	; (800483c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004814:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004816:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004818:	d3f6      	bcc.n	8004808 <CopyDataInit>
  ldr r2, =_sbss
 800481a:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800481c:	e002      	b.n	8004824 <LoopFillZerobss>

0800481e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800481e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004820:	f842 3b04 	str.w	r3, [r2], #4

08004824 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004824:	4b08      	ldr	r3, [pc, #32]	; (8004848 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004826:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004828:	d3f9      	bcc.n	800481e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800482a:	f7ff fdbd 	bl	80043a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800482e:	f003 fe59 	bl	80084e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004832:	f7fd f9eb 	bl	8001c0c <main>
  bx lr
 8004836:	4770      	bx	lr
  ldr r3, =_sidata
 8004838:	0800b8c0 	.word	0x0800b8c0
  ldr r0, =_sdata
 800483c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004840:	20000208 	.word	0x20000208
  ldr r2, =_sbss
 8004844:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 8004848:	20000774 	.word	0x20000774

0800484c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800484c:	e7fe      	b.n	800484c <ADC1_2_IRQHandler>
	...

08004850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004854:	4b08      	ldr	r3, [pc, #32]	; (8004878 <HAL_Init+0x28>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a07      	ldr	r2, [pc, #28]	; (8004878 <HAL_Init+0x28>)
 800485a:	f043 0310 	orr.w	r3, r3, #16
 800485e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004860:	2003      	movs	r0, #3
 8004862:	f001 f96f 	bl	8005b44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004866:	2000      	movs	r0, #0
 8004868:	f000 f808 	bl	800487c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800486c:	f7ff fc8e 	bl	800418c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40022000 	.word	0x40022000

0800487c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004884:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <HAL_InitTick+0x54>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <HAL_InitTick+0x58>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	4619      	mov	r1, r3
 800488e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004892:	fbb3 f3f1 	udiv	r3, r3, r1
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	4618      	mov	r0, r3
 800489c:	f001 f987 	bl	8005bae <HAL_SYSTICK_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e00e      	b.n	80048c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b0f      	cmp	r3, #15
 80048ae:	d80a      	bhi.n	80048c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048b0:	2200      	movs	r2, #0
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	f001 f94f 	bl	8005b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048bc:	4a06      	ldr	r2, [pc, #24]	; (80048d8 <HAL_InitTick+0x5c>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e000      	b.n	80048c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	2000002c 	.word	0x2000002c
 80048d4:	20000034 	.word	0x20000034
 80048d8:	20000030 	.word	0x20000030

080048dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_IncTick+0x1c>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_IncTick+0x20>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4413      	add	r3, r2
 80048ec:	4a03      	ldr	r2, [pc, #12]	; (80048fc <HAL_IncTick+0x20>)
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr
 80048f8:	20000034 	.word	0x20000034
 80048fc:	20000748 	.word	0x20000748

08004900 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return uwTick;
 8004904:	4b02      	ldr	r3, [pc, #8]	; (8004910 <HAL_GetTick+0x10>)
 8004906:	681b      	ldr	r3, [r3, #0]
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	bc80      	pop	{r7}
 800490e:	4770      	bx	lr
 8004910:	20000748 	.word	0x20000748

08004914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800491c:	f7ff fff0 	bl	8004900 <HAL_GetTick>
 8004920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d005      	beq.n	800493a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <HAL_Delay+0x40>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800493a:	bf00      	nop
 800493c:	f7ff ffe0 	bl	8004900 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	429a      	cmp	r2, r3
 800494a:	d8f7      	bhi.n	800493c <HAL_Delay+0x28>
  {
  }
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20000034 	.word	0x20000034

08004958 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e0be      	b.n	8004af8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	2b00      	cmp	r3, #0
 8004986:	d109      	bne.n	800499c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc fba8 	bl	80010ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fbb1 	bl	8005104 <ADC_ConversionStop_Disable>
 80049a2:	4603      	mov	r3, r0
 80049a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 8099 	bne.w	8004ae6 <HAL_ADC_Init+0x18e>
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f040 8095 	bne.w	8004ae6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049c4:	f023 0302 	bic.w	r3, r3, #2
 80049c8:	f043 0202 	orr.w	r2, r3, #2
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80049d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	7b1b      	ldrb	r3, [r3, #12]
 80049de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80049e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f0:	d003      	beq.n	80049fa <HAL_ADC_Init+0xa2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d102      	bne.n	8004a00 <HAL_ADC_Init+0xa8>
 80049fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049fe:	e000      	b.n	8004a02 <HAL_ADC_Init+0xaa>
 8004a00:	2300      	movs	r3, #0
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7d1b      	ldrb	r3, [r3, #20]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d119      	bne.n	8004a44 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	7b1b      	ldrb	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	035a      	lsls	r2, r3, #13
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	e00b      	b.n	8004a44 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	f043 0220 	orr.w	r2, r3, #32
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	f043 0201 	orr.w	r2, r3, #1
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <HAL_ADC_Init+0x1a8>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a74:	d003      	beq.n	8004a7e <HAL_ADC_Init+0x126>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d104      	bne.n	8004a88 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	051b      	lsls	r3, r3, #20
 8004a86:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	4b18      	ldr	r3, [pc, #96]	; (8004b04 <HAL_ADC_Init+0x1ac>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d10b      	bne.n	8004ac4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	f023 0303 	bic.w	r3, r3, #3
 8004aba:	f043 0201 	orr.w	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004ac2:	e018      	b.n	8004af6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	f023 0312 	bic.w	r3, r3, #18
 8004acc:	f043 0210 	orr.w	r2, r3, #16
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	f043 0201 	orr.w	r2, r3, #1
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004ae4:	e007      	b.n	8004af6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	f043 0210 	orr.w	r2, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	ffe1f7fd 	.word	0xffe1f7fd
 8004b04:	ff1f0efe 	.word	0xff1f0efe

08004b08 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_ADC_Start+0x1a>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e098      	b.n	8004c54 <HAL_ADC_Start+0x14c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fa98 	bl	8005060 <ADC_Enable>
 8004b30:	4603      	mov	r3, r0
 8004b32:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f040 8087 	bne.w	8004c4a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a41      	ldr	r2, [pc, #260]	; (8004c5c <HAL_ADC_Start+0x154>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d105      	bne.n	8004b66 <HAL_ADC_Start+0x5e>
 8004b5a:	4b41      	ldr	r3, [pc, #260]	; (8004c60 <HAL_ADC_Start+0x158>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d115      	bne.n	8004b92 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d026      	beq.n	8004bce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b90:	e01d      	b.n	8004bce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2f      	ldr	r2, [pc, #188]	; (8004c60 <HAL_ADC_Start+0x158>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_ADC_Start+0xaa>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <HAL_ADC_Start+0x154>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d10d      	bne.n	8004bce <HAL_ADC_Start+0xc6>
 8004bb2:	4b2b      	ldr	r3, [pc, #172]	; (8004c60 <HAL_ADC_Start+0x158>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d006      	beq.n	8004be8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bde:	f023 0206 	bic.w	r2, r3, #6
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004be6:	e002      	b.n	8004bee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0202 	mvn.w	r2, #2
 8004bfe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004c0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004c0e:	d113      	bne.n	8004c38 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004c14:	4a11      	ldr	r2, [pc, #68]	; (8004c5c <HAL_ADC_Start+0x154>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d105      	bne.n	8004c26 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004c1a:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <HAL_ADC_Start+0x158>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d108      	bne.n	8004c38 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004c34:	609a      	str	r2, [r3, #8]
 8004c36:	e00c      	b.n	8004c52 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	e003      	b.n	8004c52 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40012800 	.word	0x40012800
 8004c60:	40012400 	.word	0x40012400

08004c64 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004c64:	b590      	push	{r4, r7, lr}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004c7a:	f7ff fe41 	bl	8004900 <HAL_GetTick>
 8004c7e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	f043 0220 	orr.w	r2, r3, #32
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e0c8      	b.n	8004e38 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d12a      	bne.n	8004d0a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d123      	bne.n	8004d0a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004cc2:	e01a      	b.n	8004cfa <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d016      	beq.n	8004cfa <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <HAL_ADC_PollForConversion+0x7e>
 8004cd2:	f7ff fe15 	bl	8004900 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d20b      	bcs.n	8004cfa <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	f043 0204 	orr.w	r2, r3, #4
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e09e      	b.n	8004e38 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0dd      	beq.n	8004cc4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004d08:	e06c      	b.n	8004de4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004d0a:	4b4d      	ldr	r3, [pc, #308]	; (8004e40 <HAL_ADC_PollForConversion+0x1dc>)
 8004d0c:	681c      	ldr	r4, [r3, #0]
 8004d0e:	2002      	movs	r0, #2
 8004d10:	f002 f8bc 	bl	8006e8c <HAL_RCCEx_GetPeriphCLKFreq>
 8004d14:	4603      	mov	r3, r0
 8004d16:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6919      	ldr	r1, [r3, #16]
 8004d20:	4b48      	ldr	r3, [pc, #288]	; (8004e44 <HAL_ADC_PollForConversion+0x1e0>)
 8004d22:	400b      	ands	r3, r1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d118      	bne.n	8004d5a <HAL_ADC_PollForConversion+0xf6>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68d9      	ldr	r1, [r3, #12]
 8004d2e:	4b46      	ldr	r3, [pc, #280]	; (8004e48 <HAL_ADC_PollForConversion+0x1e4>)
 8004d30:	400b      	ands	r3, r1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d111      	bne.n	8004d5a <HAL_ADC_PollForConversion+0xf6>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6919      	ldr	r1, [r3, #16]
 8004d3c:	4b43      	ldr	r3, [pc, #268]	; (8004e4c <HAL_ADC_PollForConversion+0x1e8>)
 8004d3e:	400b      	ands	r3, r1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d108      	bne.n	8004d56 <HAL_ADC_PollForConversion+0xf2>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68d9      	ldr	r1, [r3, #12]
 8004d4a:	4b41      	ldr	r3, [pc, #260]	; (8004e50 <HAL_ADC_PollForConversion+0x1ec>)
 8004d4c:	400b      	ands	r3, r1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_ADC_PollForConversion+0xf2>
 8004d52:	2314      	movs	r3, #20
 8004d54:	e020      	b.n	8004d98 <HAL_ADC_PollForConversion+0x134>
 8004d56:	2329      	movs	r3, #41	; 0x29
 8004d58:	e01e      	b.n	8004d98 <HAL_ADC_PollForConversion+0x134>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6919      	ldr	r1, [r3, #16]
 8004d60:	4b3a      	ldr	r3, [pc, #232]	; (8004e4c <HAL_ADC_PollForConversion+0x1e8>)
 8004d62:	400b      	ands	r3, r1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <HAL_ADC_PollForConversion+0x112>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68d9      	ldr	r1, [r3, #12]
 8004d6e:	4b38      	ldr	r3, [pc, #224]	; (8004e50 <HAL_ADC_PollForConversion+0x1ec>)
 8004d70:	400b      	ands	r3, r1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00d      	beq.n	8004d92 <HAL_ADC_PollForConversion+0x12e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6919      	ldr	r1, [r3, #16]
 8004d7c:	4b35      	ldr	r3, [pc, #212]	; (8004e54 <HAL_ADC_PollForConversion+0x1f0>)
 8004d7e:	400b      	ands	r3, r1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d108      	bne.n	8004d96 <HAL_ADC_PollForConversion+0x132>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68d9      	ldr	r1, [r3, #12]
 8004d8a:	4b32      	ldr	r3, [pc, #200]	; (8004e54 <HAL_ADC_PollForConversion+0x1f0>)
 8004d8c:	400b      	ands	r3, r1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_ADC_PollForConversion+0x132>
 8004d92:	2354      	movs	r3, #84	; 0x54
 8004d94:	e000      	b.n	8004d98 <HAL_ADC_PollForConversion+0x134>
 8004d96:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004d98:	fb02 f303 	mul.w	r3, r2, r3
 8004d9c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004d9e:	e01d      	b.n	8004ddc <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da6:	d016      	beq.n	8004dd6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d007      	beq.n	8004dbe <HAL_ADC_PollForConversion+0x15a>
 8004dae:	f7ff fda7 	bl	8004900 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d20b      	bcs.n	8004dd6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	f043 0204 	orr.w	r2, r3, #4
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e030      	b.n	8004e38 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d8dd      	bhi.n	8004da0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0212 	mvn.w	r2, #18
 8004dec:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004e04:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004e08:	d115      	bne.n	8004e36 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d111      	bne.n	8004e36 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d105      	bne.n	8004e36 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	f043 0201 	orr.w	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd90      	pop	{r4, r7, pc}
 8004e40:	2000002c 	.word	0x2000002c
 8004e44:	24924924 	.word	0x24924924
 8004e48:	00924924 	.word	0x00924924
 8004e4c:	12492492 	.word	0x12492492
 8004e50:	00492492 	.word	0x00492492
 8004e54:	00249249 	.word	0x00249249

08004e58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x20>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e0dc      	b.n	800504a <HAL_ADC_ConfigChannel+0x1da>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b06      	cmp	r3, #6
 8004e9e:	d81c      	bhi.n	8004eda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	3b05      	subs	r3, #5
 8004eb2:	221f      	movs	r2, #31
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	4019      	ands	r1, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	3b05      	subs	r3, #5
 8004ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	635a      	str	r2, [r3, #52]	; 0x34
 8004ed8:	e03c      	b.n	8004f54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d81c      	bhi.n	8004f1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3b23      	subs	r3, #35	; 0x23
 8004ef4:	221f      	movs	r2, #31
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	4019      	ands	r1, r3
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3b23      	subs	r3, #35	; 0x23
 8004f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	631a      	str	r2, [r3, #48]	; 0x30
 8004f1a:	e01b      	b.n	8004f54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3b41      	subs	r3, #65	; 0x41
 8004f2e:	221f      	movs	r2, #31
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	4019      	ands	r1, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	3b41      	subs	r3, #65	; 0x41
 8004f48:	fa00 f203 	lsl.w	r2, r0, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b09      	cmp	r3, #9
 8004f5a:	d91c      	bls.n	8004f96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68d9      	ldr	r1, [r3, #12]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4613      	mov	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3b1e      	subs	r3, #30
 8004f6e:	2207      	movs	r2, #7
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	43db      	mvns	r3, r3
 8004f76:	4019      	ands	r1, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6898      	ldr	r0, [r3, #8]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4613      	mov	r3, r2
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	4413      	add	r3, r2
 8004f86:	3b1e      	subs	r3, #30
 8004f88:	fa00 f203 	lsl.w	r2, r0, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	60da      	str	r2, [r3, #12]
 8004f94:	e019      	b.n	8004fca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6919      	ldr	r1, [r3, #16]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	4413      	add	r3, r2
 8004fa6:	2207      	movs	r2, #7
 8004fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fac:	43db      	mvns	r3, r3
 8004fae:	4019      	ands	r1, r3
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	6898      	ldr	r0, [r3, #8]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	4413      	add	r3, r2
 8004fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d003      	beq.n	8004fda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004fd6:	2b11      	cmp	r3, #17
 8004fd8:	d132      	bne.n	8005040 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <HAL_ADC_ConfigChannel+0x1e4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d125      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d126      	bne.n	8005040 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005000:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b10      	cmp	r3, #16
 8005008:	d11a      	bne.n	8005040 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <HAL_ADC_ConfigChannel+0x1e8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a13      	ldr	r2, [pc, #76]	; (800505c <HAL_ADC_ConfigChannel+0x1ec>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	0c9a      	lsrs	r2, r3, #18
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005020:	e002      	b.n	8005028 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	3b01      	subs	r3, #1
 8005026:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f9      	bne.n	8005022 <HAL_ADC_ConfigChannel+0x1b2>
 800502e:	e007      	b.n	8005040 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005034:	f043 0220 	orr.w	r2, r3, #32
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	40012400 	.word	0x40012400
 8005058:	2000002c 	.word	0x2000002c
 800505c:	431bde83 	.word	0x431bde83

08005060 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b01      	cmp	r3, #1
 800507c:	d039      	beq.n	80050f2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0201 	orr.w	r2, r2, #1
 800508c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800508e:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <ADC_Enable+0x9c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1b      	ldr	r2, [pc, #108]	; (8005100 <ADC_Enable+0xa0>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	0c9b      	lsrs	r3, r3, #18
 800509a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800509c:	e002      	b.n	80050a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f9      	bne.n	800509e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80050aa:	f7ff fc29 	bl	8004900 <HAL_GetTick>
 80050ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80050b0:	e018      	b.n	80050e4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050b2:	f7ff fc25 	bl	8004900 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d911      	bls.n	80050e4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c4:	f043 0210 	orr.w	r2, r3, #16
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	f043 0201 	orr.w	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e007      	b.n	80050f4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d1df      	bne.n	80050b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	2000002c 	.word	0x2000002c
 8005100:	431bde83 	.word	0x431bde83

08005104 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b01      	cmp	r3, #1
 800511c:	d127      	bne.n	800516e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800512e:	f7ff fbe7 	bl	8004900 <HAL_GetTick>
 8005132:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005134:	e014      	b.n	8005160 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005136:	f7ff fbe3 	bl	8004900 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d90d      	bls.n	8005160 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	f043 0210 	orr.w	r2, r3, #16
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	f043 0201 	orr.w	r2, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e007      	b.n	8005170 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b01      	cmp	r3, #1
 800516c:	d0e3      	beq.n	8005136 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e0ed      	b.n	8005366 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fc f81a 	bl	80011d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0202 	bic.w	r2, r2, #2
 80051aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051ac:	f7ff fba8 	bl	8004900 <HAL_GetTick>
 80051b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80051b2:	e012      	b.n	80051da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051b4:	f7ff fba4 	bl	8004900 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b0a      	cmp	r3, #10
 80051c0:	d90b      	bls.n	80051da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2205      	movs	r2, #5
 80051d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e0c5      	b.n	8005366 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e5      	bne.n	80051b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051f8:	f7ff fb82 	bl	8004900 <HAL_GetTick>
 80051fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051fe:	e012      	b.n	8005226 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005200:	f7ff fb7e 	bl	8004900 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b0a      	cmp	r3, #10
 800520c:	d90b      	bls.n	8005226 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2205      	movs	r2, #5
 800521e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e09f      	b.n	8005366 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0e5      	beq.n	8005200 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	7e1b      	ldrb	r3, [r3, #24]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d108      	bne.n	800524e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	e007      	b.n	800525e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800525c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	7e5b      	ldrb	r3, [r3, #25]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d108      	bne.n	8005278 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e007      	b.n	8005288 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005286:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	7e9b      	ldrb	r3, [r3, #26]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d108      	bne.n	80052a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0220 	orr.w	r2, r2, #32
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e007      	b.n	80052b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0220 	bic.w	r2, r2, #32
 80052b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	7edb      	ldrb	r3, [r3, #27]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d108      	bne.n	80052cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0210 	bic.w	r2, r2, #16
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e007      	b.n	80052dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0210 	orr.w	r2, r2, #16
 80052da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7f1b      	ldrb	r3, [r3, #28]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d108      	bne.n	80052f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0208 	orr.w	r2, r2, #8
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e007      	b.n	8005306 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0208 	bic.w	r2, r2, #8
 8005304:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	7f5b      	ldrb	r3, [r3, #29]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d108      	bne.n	8005320 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0204 	orr.w	r2, r2, #4
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	e007      	b.n	8005330 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0204 	bic.w	r2, r2, #4
 800532e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	ea42 0103 	orr.w	r1, r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	1e5a      	subs	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800536e:	b480      	push	{r7}
 8005370:	b087      	sub	sp, #28
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005384:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005386:	7cfb      	ldrb	r3, [r7, #19]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d003      	beq.n	8005394 <HAL_CAN_ConfigFilter+0x26>
 800538c:	7cfb      	ldrb	r3, [r7, #19]
 800538e:	2b02      	cmp	r3, #2
 8005390:	f040 80aa 	bne.w	80054e8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800539a:	f043 0201 	orr.w	r2, r3, #1
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	2201      	movs	r2, #1
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	43db      	mvns	r3, r3
 80053be:	401a      	ands	r2, r3
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d123      	bne.n	8005416 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	43db      	mvns	r3, r3
 80053d8:	401a      	ands	r2, r3
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80053f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	3248      	adds	r2, #72	; 0x48
 80053f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800540a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800540c:	6979      	ldr	r1, [r7, #20]
 800540e:	3348      	adds	r3, #72	; 0x48
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	440b      	add	r3, r1
 8005414:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d122      	bne.n	8005464 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	431a      	orrs	r2, r3
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800543e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	3248      	adds	r2, #72	; 0x48
 8005444:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005458:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800545a:	6979      	ldr	r1, [r7, #20]
 800545c:	3348      	adds	r3, #72	; 0x48
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	440b      	add	r3, r1
 8005462:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d109      	bne.n	8005480 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	43db      	mvns	r3, r3
 8005476:	401a      	ands	r2, r3
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800547e:	e007      	b.n	8005490 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	431a      	orrs	r2, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d109      	bne.n	80054ac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	43db      	mvns	r3, r3
 80054a2:	401a      	ands	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80054aa:	e007      	b.n	80054bc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	6a1b      	ldr	r3, [r3, #32]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d107      	bne.n	80054d4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	431a      	orrs	r2, r3
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054da:	f023 0201 	bic.w	r2, r3, #1
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e006      	b.n	80054f6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
  }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	d12e      	bne.n	8005572 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0201 	bic.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800552c:	f7ff f9e8 	bl	8004900 <HAL_GetTick>
 8005530:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005532:	e012      	b.n	800555a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005534:	f7ff f9e4 	bl	8004900 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b0a      	cmp	r3, #10
 8005540:	d90b      	bls.n	800555a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2205      	movs	r2, #5
 8005552:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e012      	b.n	8005580 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e5      	bne.n	8005534 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e006      	b.n	8005580 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
  }
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005588:	b480      	push	{r7}
 800558a:	b089      	sub	sp, #36	; 0x24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800559c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80055a6:	7ffb      	ldrb	r3, [r7, #31]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d003      	beq.n	80055b4 <HAL_CAN_AddTxMessage+0x2c>
 80055ac:	7ffb      	ldrb	r3, [r7, #31]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	f040 80b8 	bne.w	8005724 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10a      	bne.n	80055d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d105      	bne.n	80055d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 80a0 	beq.w	8005714 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	0e1b      	lsrs	r3, r3, #24
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d907      	bls.n	80055f4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e09e      	b.n	8005732 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80055f4:	2201      	movs	r2, #1
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	409a      	lsls	r2, r3
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10d      	bne.n	8005622 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005610:	68f9      	ldr	r1, [r7, #12]
 8005612:	6809      	ldr	r1, [r1, #0]
 8005614:	431a      	orrs	r2, r3
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	3318      	adds	r3, #24
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	440b      	add	r3, r1
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	e00f      	b.n	8005642 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800562c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005636:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	3318      	adds	r3, #24
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	440b      	add	r3, r1
 8005640:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6819      	ldr	r1, [r3, #0]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	691a      	ldr	r2, [r3, #16]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	3318      	adds	r3, #24
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	440b      	add	r3, r1
 8005652:	3304      	adds	r3, #4
 8005654:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	7d1b      	ldrb	r3, [r3, #20]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d111      	bne.n	8005682 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	3318      	adds	r3, #24
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	4413      	add	r3, r2
 800566a:	3304      	adds	r3, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	6811      	ldr	r1, [r2, #0]
 8005672:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	3318      	adds	r3, #24
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	440b      	add	r3, r1
 800567e:	3304      	adds	r3, #4
 8005680:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3307      	adds	r3, #7
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	061a      	lsls	r2, r3, #24
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3306      	adds	r3, #6
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	041b      	lsls	r3, r3, #16
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3305      	adds	r3, #5
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	4313      	orrs	r3, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	3204      	adds	r2, #4
 80056a2:	7812      	ldrb	r2, [r2, #0]
 80056a4:	4610      	mov	r0, r2
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	6811      	ldr	r1, [r2, #0]
 80056aa:	ea43 0200 	orr.w	r2, r3, r0
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	440b      	add	r3, r1
 80056b4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80056b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3303      	adds	r3, #3
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	061a      	lsls	r2, r3, #24
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	3302      	adds	r3, #2
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	041b      	lsls	r3, r3, #16
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3301      	adds	r3, #1
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	4313      	orrs	r3, r2
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	7812      	ldrb	r2, [r2, #0]
 80056da:	4610      	mov	r0, r2
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	6811      	ldr	r1, [r2, #0]
 80056e0:	ea43 0200 	orr.w	r2, r3, r0
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	440b      	add	r3, r1
 80056ea:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80056ee:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	3318      	adds	r3, #24
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	4413      	add	r3, r2
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	6811      	ldr	r1, [r2, #0]
 8005702:	f043 0201 	orr.w	r2, r3, #1
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	3318      	adds	r3, #24
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	440b      	add	r3, r1
 800570e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e00e      	b.n	8005732 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e006      	b.n	8005732 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
  }
}
 8005732:	4618      	mov	r0, r3
 8005734:	3724      	adds	r7, #36	; 0x24
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr

0800573c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005750:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005752:	7dfb      	ldrb	r3, [r7, #23]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d003      	beq.n	8005760 <HAL_CAN_GetRxMessage+0x24>
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	2b02      	cmp	r3, #2
 800575c:	f040 80f3 	bne.w	8005946 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10e      	bne.n	8005784 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f003 0303 	and.w	r3, r3, #3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d116      	bne.n	80057a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e0e7      	b.n	8005954 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d107      	bne.n	80057a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e0d8      	b.n	8005954 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	331b      	adds	r3, #27
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	4413      	add	r3, r2
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0204 	and.w	r2, r3, #4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10c      	bne.n	80057da <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	331b      	adds	r3, #27
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	4413      	add	r3, r2
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	0d5b      	lsrs	r3, r3, #21
 80057d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	e00b      	b.n	80057f2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	331b      	adds	r3, #27
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	4413      	add	r3, r2
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	08db      	lsrs	r3, r3, #3
 80057ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	331b      	adds	r3, #27
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	4413      	add	r3, r2
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0202 	and.w	r2, r3, #2
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	331b      	adds	r3, #27
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	4413      	add	r3, r2
 8005814:	3304      	adds	r3, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	331b      	adds	r3, #27
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	4413      	add	r3, r2
 800582c:	3304      	adds	r3, #4
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	0a1b      	lsrs	r3, r3, #8
 8005832:	b2da      	uxtb	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	331b      	adds	r3, #27
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	4413      	add	r3, r2
 8005844:	3304      	adds	r3, #4
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	b29a      	uxth	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	4413      	add	r3, r2
 800585a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	b2da      	uxtb	r2, r3
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	4413      	add	r3, r2
 8005870:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	0a1a      	lsrs	r2, r3, #8
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	3301      	adds	r3, #1
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	4413      	add	r3, r2
 800588a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	0c1a      	lsrs	r2, r3, #16
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	3302      	adds	r3, #2
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	0e1a      	lsrs	r2, r3, #24
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	3303      	adds	r3, #3
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	4413      	add	r3, r2
 80058be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	3304      	adds	r3, #4
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	0a1a      	lsrs	r2, r3, #8
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	3305      	adds	r3, #5
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	0c1a      	lsrs	r2, r3, #16
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	3306      	adds	r3, #6
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	4413      	add	r3, r2
 800590a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	0e1a      	lsrs	r2, r3, #24
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	3307      	adds	r3, #7
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d108      	bne.n	8005932 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0220 	orr.w	r2, r2, #32
 800592e:	60da      	str	r2, [r3, #12]
 8005930:	e007      	b.n	8005942 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0220 	orr.w	r2, r2, #32
 8005940:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	e006      	b.n	8005954 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
  }
}
 8005954:	4618      	mov	r0, r3
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr

0800595e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800595e:	b480      	push	{r7}
 8005960:	b085      	sub	sp, #20
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005972:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005974:	7afb      	ldrb	r3, [r7, #11]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d002      	beq.n	8005980 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800597a:	7afb      	ldrb	r3, [r7, #11]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d10f      	bne.n	80059a0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	e005      	b.n	80059a0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0303 	and.w	r3, r3, #3
 800599e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80059a0:	68fb      	ldr	r3, [r7, #12]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059bc:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <__NVIC_SetPriorityGrouping+0x44>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059c8:	4013      	ands	r3, r2
 80059ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059de:	4a04      	ldr	r2, [pc, #16]	; (80059f0 <__NVIC_SetPriorityGrouping+0x44>)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	60d3      	str	r3, [r2, #12]
}
 80059e4:	bf00      	nop
 80059e6:	3714      	adds	r7, #20
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc80      	pop	{r7}
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	e000ed00 	.word	0xe000ed00

080059f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059f8:	4b04      	ldr	r3, [pc, #16]	; (8005a0c <__NVIC_GetPriorityGrouping+0x18>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	0a1b      	lsrs	r3, r3, #8
 80059fe:	f003 0307 	and.w	r3, r3, #7
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	e000ed00 	.word	0xe000ed00

08005a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	4603      	mov	r3, r0
 8005a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	db0b      	blt.n	8005a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a22:	79fb      	ldrb	r3, [r7, #7]
 8005a24:	f003 021f 	and.w	r2, r3, #31
 8005a28:	4906      	ldr	r1, [pc, #24]	; (8005a44 <__NVIC_EnableIRQ+0x34>)
 8005a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	2001      	movs	r0, #1
 8005a32:	fa00 f202 	lsl.w	r2, r0, r2
 8005a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bc80      	pop	{r7}
 8005a42:	4770      	bx	lr
 8005a44:	e000e100 	.word	0xe000e100

08005a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	6039      	str	r1, [r7, #0]
 8005a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	db0a      	blt.n	8005a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	490c      	ldr	r1, [pc, #48]	; (8005a94 <__NVIC_SetPriority+0x4c>)
 8005a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a66:	0112      	lsls	r2, r2, #4
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a70:	e00a      	b.n	8005a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	4908      	ldr	r1, [pc, #32]	; (8005a98 <__NVIC_SetPriority+0x50>)
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	3b04      	subs	r3, #4
 8005a80:	0112      	lsls	r2, r2, #4
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	440b      	add	r3, r1
 8005a86:	761a      	strb	r2, [r3, #24]
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	e000e100 	.word	0xe000e100
 8005a98:	e000ed00 	.word	0xe000ed00

08005a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b089      	sub	sp, #36	; 0x24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f1c3 0307 	rsb	r3, r3, #7
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	bf28      	it	cs
 8005aba:	2304      	movcs	r3, #4
 8005abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	2b06      	cmp	r3, #6
 8005ac4:	d902      	bls.n	8005acc <NVIC_EncodePriority+0x30>
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	3b03      	subs	r3, #3
 8005aca:	e000      	b.n	8005ace <NVIC_EncodePriority+0x32>
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	43da      	mvns	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	401a      	ands	r2, r3
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	43d9      	mvns	r1, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005af4:	4313      	orrs	r3, r2
         );
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3724      	adds	r7, #36	; 0x24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bc80      	pop	{r7}
 8005afe:	4770      	bx	lr

08005b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b10:	d301      	bcc.n	8005b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b12:	2301      	movs	r3, #1
 8005b14:	e00f      	b.n	8005b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b16:	4a0a      	ldr	r2, [pc, #40]	; (8005b40 <SysTick_Config+0x40>)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b1e:	210f      	movs	r1, #15
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295
 8005b24:	f7ff ff90 	bl	8005a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <SysTick_Config+0x40>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b2e:	4b04      	ldr	r3, [pc, #16]	; (8005b40 <SysTick_Config+0x40>)
 8005b30:	2207      	movs	r2, #7
 8005b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	e000e010 	.word	0xe000e010

08005b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff ff2d 	bl	80059ac <__NVIC_SetPriorityGrouping>
}
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b086      	sub	sp, #24
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	4603      	mov	r3, r0
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b6c:	f7ff ff42 	bl	80059f4 <__NVIC_GetPriorityGrouping>
 8005b70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	68b9      	ldr	r1, [r7, #8]
 8005b76:	6978      	ldr	r0, [r7, #20]
 8005b78:	f7ff ff90 	bl	8005a9c <NVIC_EncodePriority>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b82:	4611      	mov	r1, r2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff ff5f 	bl	8005a48 <__NVIC_SetPriority>
}
 8005b8a:	bf00      	nop
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	4603      	mov	r3, r0
 8005b9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff ff35 	bl	8005a10 <__NVIC_EnableIRQ>
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff ffa2 	bl	8005b00 <SysTick_Config>
 8005bbc:	4603      	mov	r3, r0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005be2:	4b2f      	ldr	r3, [pc, #188]	; (8005ca0 <HAL_FLASH_Program+0xd8>)
 8005be4:	7e1b      	ldrb	r3, [r3, #24]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <HAL_FLASH_Program+0x26>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e054      	b.n	8005c98 <HAL_FLASH_Program+0xd0>
 8005bee:	4b2c      	ldr	r3, [pc, #176]	; (8005ca0 <HAL_FLASH_Program+0xd8>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005bf4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bf8:	f000 f8a8 	bl	8005d4c <FLASH_WaitForLastOperation>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005c00:	7dfb      	ldrb	r3, [r7, #23]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d144      	bne.n	8005c90 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d102      	bne.n	8005c12 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	757b      	strb	r3, [r7, #21]
 8005c10:	e007      	b.n	8005c22 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d102      	bne.n	8005c1e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005c18:	2302      	movs	r3, #2
 8005c1a:	757b      	strb	r3, [r7, #21]
 8005c1c:	e001      	b.n	8005c22 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005c1e:	2304      	movs	r3, #4
 8005c20:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005c22:	2300      	movs	r3, #0
 8005c24:	75bb      	strb	r3, [r7, #22]
 8005c26:	e02d      	b.n	8005c84 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005c28:	7dbb      	ldrb	r3, [r7, #22]
 8005c2a:	005a      	lsls	r2, r3, #1
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	eb02 0c03 	add.w	ip, r2, r3
 8005c32:	7dbb      	ldrb	r3, [r7, #22]
 8005c34:	0119      	lsls	r1, r3, #4
 8005c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c3a:	f1c1 0620 	rsb	r6, r1, #32
 8005c3e:	f1a1 0020 	sub.w	r0, r1, #32
 8005c42:	fa22 f401 	lsr.w	r4, r2, r1
 8005c46:	fa03 f606 	lsl.w	r6, r3, r6
 8005c4a:	4334      	orrs	r4, r6
 8005c4c:	fa23 f000 	lsr.w	r0, r3, r0
 8005c50:	4304      	orrs	r4, r0
 8005c52:	fa23 f501 	lsr.w	r5, r3, r1
 8005c56:	b2a3      	uxth	r3, r4
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4660      	mov	r0, ip
 8005c5c:	f000 f85a 	bl	8005d14 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c60:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c64:	f000 f872 	bl	8005d4c <FLASH_WaitForLastOperation>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <HAL_FLASH_Program+0xdc>)
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	4a0c      	ldr	r2, [pc, #48]	; (8005ca4 <HAL_FLASH_Program+0xdc>)
 8005c72:	f023 0301 	bic.w	r3, r3, #1
 8005c76:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d107      	bne.n	8005c8e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8005c7e:	7dbb      	ldrb	r3, [r7, #22]
 8005c80:	3301      	adds	r3, #1
 8005c82:	75bb      	strb	r3, [r7, #22]
 8005c84:	7dba      	ldrb	r2, [r7, #22]
 8005c86:	7d7b      	ldrb	r3, [r7, #21]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d3cd      	bcc.n	8005c28 <HAL_FLASH_Program+0x60>
 8005c8c:	e000      	b.n	8005c90 <HAL_FLASH_Program+0xc8>
      {
        break;
 8005c8e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c90:	4b03      	ldr	r3, [pc, #12]	; (8005ca0 <HAL_FLASH_Program+0xd8>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	761a      	strb	r2, [r3, #24]

  return status;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca0:	20000750 	.word	0x20000750
 8005ca4:	40022000 	.word	0x40022000

08005ca8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <HAL_FLASH_Unlock+0x40>)
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00d      	beq.n	8005cda <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <HAL_FLASH_Unlock+0x40>)
 8005cc0:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <HAL_FLASH_Unlock+0x44>)
 8005cc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005cc4:	4b08      	ldr	r3, [pc, #32]	; (8005ce8 <HAL_FLASH_Unlock+0x40>)
 8005cc6:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <HAL_FLASH_Unlock+0x48>)
 8005cc8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005cca:	4b07      	ldr	r3, [pc, #28]	; (8005ce8 <HAL_FLASH_Unlock+0x40>)
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005cda:	79fb      	ldrb	r3, [r7, #7]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40022000 	.word	0x40022000
 8005cec:	45670123 	.word	0x45670123
 8005cf0:	cdef89ab 	.word	0xcdef89ab

08005cf4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_FLASH_Lock+0x1c>)
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	4a04      	ldr	r2, [pc, #16]	; (8005d10 <HAL_FLASH_Lock+0x1c>)
 8005cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d02:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40022000 	.word	0x40022000

08005d14 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d20:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <FLASH_Program_HalfWord+0x30>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005d26:	4b08      	ldr	r3, [pc, #32]	; (8005d48 <FLASH_Program_HalfWord+0x34>)
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	4a07      	ldr	r2, [pc, #28]	; (8005d48 <FLASH_Program_HalfWord+0x34>)
 8005d2c:	f043 0301 	orr.w	r3, r3, #1
 8005d30:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	887a      	ldrh	r2, [r7, #2]
 8005d36:	801a      	strh	r2, [r3, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000750 	.word	0x20000750
 8005d48:	40022000 	.word	0x40022000

08005d4c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005d54:	f7fe fdd4 	bl	8004900 <HAL_GetTick>
 8005d58:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005d5a:	e010      	b.n	8005d7e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d00c      	beq.n	8005d7e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d007      	beq.n	8005d7a <FLASH_WaitForLastOperation+0x2e>
 8005d6a:	f7fe fdc9 	bl	8004900 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d201      	bcs.n	8005d7e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e025      	b.n	8005dca <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005d7e:	4b15      	ldr	r3, [pc, #84]	; (8005dd4 <FLASH_WaitForLastOperation+0x88>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e8      	bne.n	8005d5c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005d8a:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <FLASH_WaitForLastOperation+0x88>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005d96:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <FLASH_WaitForLastOperation+0x88>)
 8005d98:	2220      	movs	r2, #32
 8005d9a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005d9c:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <FLASH_WaitForLastOperation+0x88>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10b      	bne.n	8005dc0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005da8:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <FLASH_WaitForLastOperation+0x88>)
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005db4:	4b07      	ldr	r3, [pc, #28]	; (8005dd4 <FLASH_WaitForLastOperation+0x88>)
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005dc0:	f000 f80a 	bl	8005dd8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40022000 	.word	0x40022000

08005dd8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005de2:	4b23      	ldr	r3, [pc, #140]	; (8005e70 <FLASH_SetErrorCode+0x98>)
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f003 0310 	and.w	r3, r3, #16
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d009      	beq.n	8005e02 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005dee:	4b21      	ldr	r3, [pc, #132]	; (8005e74 <FLASH_SetErrorCode+0x9c>)
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f043 0302 	orr.w	r3, r3, #2
 8005df6:	4a1f      	ldr	r2, [pc, #124]	; (8005e74 <FLASH_SetErrorCode+0x9c>)
 8005df8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f043 0310 	orr.w	r3, r3, #16
 8005e00:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005e02:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <FLASH_SetErrorCode+0x98>)
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005e0e:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <FLASH_SetErrorCode+0x9c>)
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <FLASH_SetErrorCode+0x9c>)
 8005e18:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f043 0304 	orr.w	r3, r3, #4
 8005e20:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <FLASH_SetErrorCode+0x98>)
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005e2e:	4b11      	ldr	r3, [pc, #68]	; (8005e74 <FLASH_SetErrorCode+0x9c>)
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f043 0304 	orr.w	r3, r3, #4
 8005e36:	4a0f      	ldr	r2, [pc, #60]	; (8005e74 <FLASH_SetErrorCode+0x9c>)
 8005e38:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <FLASH_SetErrorCode+0x98>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <FLASH_SetErrorCode+0x98>)
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f240 1201 	movw	r2, #257	; 0x101
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d106      	bne.n	8005e5e <FLASH_SetErrorCode+0x86>
 8005e50:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <FLASH_SetErrorCode+0x98>)
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	4a06      	ldr	r2, [pc, #24]	; (8005e70 <FLASH_SetErrorCode+0x98>)
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	61d3      	str	r3, [r2, #28]
}  
 8005e5c:	e002      	b.n	8005e64 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005e5e:	4a04      	ldr	r2, [pc, #16]	; (8005e70 <FLASH_SetErrorCode+0x98>)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	60d3      	str	r3, [r2, #12]
}  
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40022000 	.word	0x40022000
 8005e74:	20000750 	.word	0x20000750

08005e78 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e8a:	4b2f      	ldr	r3, [pc, #188]	; (8005f48 <HAL_FLASHEx_Erase+0xd0>)
 8005e8c:	7e1b      	ldrb	r3, [r3, #24]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_FLASHEx_Erase+0x1e>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e053      	b.n	8005f3e <HAL_FLASHEx_Erase+0xc6>
 8005e96:	4b2c      	ldr	r3, [pc, #176]	; (8005f48 <HAL_FLASHEx_Erase+0xd0>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d116      	bne.n	8005ed2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005ea4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ea8:	f7ff ff50 	bl	8005d4c <FLASH_WaitForLastOperation>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d141      	bne.n	8005f36 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005eb2:	2001      	movs	r0, #1
 8005eb4:	f000 f84c 	bl	8005f50 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005eb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ebc:	f7ff ff46 	bl	8005d4c <FLASH_WaitForLastOperation>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005ec4:	4b21      	ldr	r3, [pc, #132]	; (8005f4c <HAL_FLASHEx_Erase+0xd4>)
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	4a20      	ldr	r2, [pc, #128]	; (8005f4c <HAL_FLASHEx_Erase+0xd4>)
 8005eca:	f023 0304 	bic.w	r3, r3, #4
 8005ece:	6113      	str	r3, [r2, #16]
 8005ed0:	e031      	b.n	8005f36 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005ed2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ed6:	f7ff ff39 	bl	8005d4c <FLASH_WaitForLastOperation>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d12a      	bne.n	8005f36 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	60bb      	str	r3, [r7, #8]
 8005eee:	e019      	b.n	8005f24 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005ef0:	68b8      	ldr	r0, [r7, #8]
 8005ef2:	f000 f849 	bl	8005f88 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ef6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005efa:	f7ff ff27 	bl	8005d4c <FLASH_WaitForLastOperation>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <HAL_FLASHEx_Erase+0xd4>)
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	4a11      	ldr	r2, [pc, #68]	; (8005f4c <HAL_FLASHEx_Erase+0xd4>)
 8005f08:	f023 0302 	bic.w	r3, r3, #2
 8005f0c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	601a      	str	r2, [r3, #0]
            break;
 8005f1a:	e00c      	b.n	8005f36 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f22:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	029a      	lsls	r2, r3, #10
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d3dc      	bcc.n	8005ef0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f36:	4b04      	ldr	r3, [pc, #16]	; (8005f48 <HAL_FLASHEx_Erase+0xd0>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	761a      	strb	r2, [r3, #24]

  return status;
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000750 	.word	0x20000750
 8005f4c:	40022000 	.word	0x40022000

08005f50 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f58:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <FLASH_MassErase+0x30>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005f5e:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <FLASH_MassErase+0x34>)
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <FLASH_MassErase+0x34>)
 8005f64:	f043 0304 	orr.w	r3, r3, #4
 8005f68:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005f6a:	4b06      	ldr	r3, [pc, #24]	; (8005f84 <FLASH_MassErase+0x34>)
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	4a05      	ldr	r2, [pc, #20]	; (8005f84 <FLASH_MassErase+0x34>)
 8005f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f74:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005f76:	bf00      	nop
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr
 8005f80:	20000750 	.word	0x20000750
 8005f84:	40022000 	.word	0x40022000

08005f88 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <FLASH_PageErase+0x38>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <FLASH_PageErase+0x3c>)
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	4a0a      	ldr	r2, [pc, #40]	; (8005fc4 <FLASH_PageErase+0x3c>)
 8005f9c:	f043 0302 	orr.w	r3, r3, #2
 8005fa0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005fa2:	4a08      	ldr	r2, [pc, #32]	; (8005fc4 <FLASH_PageErase+0x3c>)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005fa8:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <FLASH_PageErase+0x3c>)
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	4a05      	ldr	r2, [pc, #20]	; (8005fc4 <FLASH_PageErase+0x3c>)
 8005fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fb2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	20000750 	.word	0x20000750
 8005fc4:	40022000 	.word	0x40022000

08005fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b08b      	sub	sp, #44	; 0x2c
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fda:	e127      	b.n	800622c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005fdc:	2201      	movs	r2, #1
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	4013      	ands	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	f040 8116 	bne.w	8006226 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	2b12      	cmp	r3, #18
 8006000:	d034      	beq.n	800606c <HAL_GPIO_Init+0xa4>
 8006002:	2b12      	cmp	r3, #18
 8006004:	d80d      	bhi.n	8006022 <HAL_GPIO_Init+0x5a>
 8006006:	2b02      	cmp	r3, #2
 8006008:	d02b      	beq.n	8006062 <HAL_GPIO_Init+0x9a>
 800600a:	2b02      	cmp	r3, #2
 800600c:	d804      	bhi.n	8006018 <HAL_GPIO_Init+0x50>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d031      	beq.n	8006076 <HAL_GPIO_Init+0xae>
 8006012:	2b01      	cmp	r3, #1
 8006014:	d01c      	beq.n	8006050 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006016:	e048      	b.n	80060aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006018:	2b03      	cmp	r3, #3
 800601a:	d043      	beq.n	80060a4 <HAL_GPIO_Init+0xdc>
 800601c:	2b11      	cmp	r3, #17
 800601e:	d01b      	beq.n	8006058 <HAL_GPIO_Init+0x90>
          break;
 8006020:	e043      	b.n	80060aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006022:	4a89      	ldr	r2, [pc, #548]	; (8006248 <HAL_GPIO_Init+0x280>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d026      	beq.n	8006076 <HAL_GPIO_Init+0xae>
 8006028:	4a87      	ldr	r2, [pc, #540]	; (8006248 <HAL_GPIO_Init+0x280>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d806      	bhi.n	800603c <HAL_GPIO_Init+0x74>
 800602e:	4a87      	ldr	r2, [pc, #540]	; (800624c <HAL_GPIO_Init+0x284>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d020      	beq.n	8006076 <HAL_GPIO_Init+0xae>
 8006034:	4a86      	ldr	r2, [pc, #536]	; (8006250 <HAL_GPIO_Init+0x288>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d01d      	beq.n	8006076 <HAL_GPIO_Init+0xae>
          break;
 800603a:	e036      	b.n	80060aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800603c:	4a85      	ldr	r2, [pc, #532]	; (8006254 <HAL_GPIO_Init+0x28c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d019      	beq.n	8006076 <HAL_GPIO_Init+0xae>
 8006042:	4a85      	ldr	r2, [pc, #532]	; (8006258 <HAL_GPIO_Init+0x290>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d016      	beq.n	8006076 <HAL_GPIO_Init+0xae>
 8006048:	4a84      	ldr	r2, [pc, #528]	; (800625c <HAL_GPIO_Init+0x294>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <HAL_GPIO_Init+0xae>
          break;
 800604e:	e02c      	b.n	80060aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	623b      	str	r3, [r7, #32]
          break;
 8006056:	e028      	b.n	80060aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	3304      	adds	r3, #4
 800605e:	623b      	str	r3, [r7, #32]
          break;
 8006060:	e023      	b.n	80060aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	3308      	adds	r3, #8
 8006068:	623b      	str	r3, [r7, #32]
          break;
 800606a:	e01e      	b.n	80060aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	330c      	adds	r3, #12
 8006072:	623b      	str	r3, [r7, #32]
          break;
 8006074:	e019      	b.n	80060aa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d102      	bne.n	8006084 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800607e:	2304      	movs	r3, #4
 8006080:	623b      	str	r3, [r7, #32]
          break;
 8006082:	e012      	b.n	80060aa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d105      	bne.n	8006098 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800608c:	2308      	movs	r3, #8
 800608e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	611a      	str	r2, [r3, #16]
          break;
 8006096:	e008      	b.n	80060aa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006098:	2308      	movs	r3, #8
 800609a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	615a      	str	r2, [r3, #20]
          break;
 80060a2:	e002      	b.n	80060aa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80060a4:	2300      	movs	r3, #0
 80060a6:	623b      	str	r3, [r7, #32]
          break;
 80060a8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	2bff      	cmp	r3, #255	; 0xff
 80060ae:	d801      	bhi.n	80060b4 <HAL_GPIO_Init+0xec>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	e001      	b.n	80060b8 <HAL_GPIO_Init+0xf0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	3304      	adds	r3, #4
 80060b8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	2bff      	cmp	r3, #255	; 0xff
 80060be:	d802      	bhi.n	80060c6 <HAL_GPIO_Init+0xfe>
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	e002      	b.n	80060cc <HAL_GPIO_Init+0x104>
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	3b08      	subs	r3, #8
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	210f      	movs	r1, #15
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	fa01 f303 	lsl.w	r3, r1, r3
 80060da:	43db      	mvns	r3, r3
 80060dc:	401a      	ands	r2, r3
 80060de:	6a39      	ldr	r1, [r7, #32]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	fa01 f303 	lsl.w	r3, r1, r3
 80060e6:	431a      	orrs	r2, r3
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8096 	beq.w	8006226 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80060fa:	4b59      	ldr	r3, [pc, #356]	; (8006260 <HAL_GPIO_Init+0x298>)
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	4a58      	ldr	r2, [pc, #352]	; (8006260 <HAL_GPIO_Init+0x298>)
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	6193      	str	r3, [r2, #24]
 8006106:	4b56      	ldr	r3, [pc, #344]	; (8006260 <HAL_GPIO_Init+0x298>)
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	60bb      	str	r3, [r7, #8]
 8006110:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006112:	4a54      	ldr	r2, [pc, #336]	; (8006264 <HAL_GPIO_Init+0x29c>)
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	089b      	lsrs	r3, r3, #2
 8006118:	3302      	adds	r3, #2
 800611a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800611e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	f003 0303 	and.w	r3, r3, #3
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	220f      	movs	r2, #15
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	43db      	mvns	r3, r3
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4013      	ands	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a4b      	ldr	r2, [pc, #300]	; (8006268 <HAL_GPIO_Init+0x2a0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d013      	beq.n	8006166 <HAL_GPIO_Init+0x19e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a4a      	ldr	r2, [pc, #296]	; (800626c <HAL_GPIO_Init+0x2a4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00d      	beq.n	8006162 <HAL_GPIO_Init+0x19a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a49      	ldr	r2, [pc, #292]	; (8006270 <HAL_GPIO_Init+0x2a8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d007      	beq.n	800615e <HAL_GPIO_Init+0x196>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a48      	ldr	r2, [pc, #288]	; (8006274 <HAL_GPIO_Init+0x2ac>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d101      	bne.n	800615a <HAL_GPIO_Init+0x192>
 8006156:	2303      	movs	r3, #3
 8006158:	e006      	b.n	8006168 <HAL_GPIO_Init+0x1a0>
 800615a:	2304      	movs	r3, #4
 800615c:	e004      	b.n	8006168 <HAL_GPIO_Init+0x1a0>
 800615e:	2302      	movs	r3, #2
 8006160:	e002      	b.n	8006168 <HAL_GPIO_Init+0x1a0>
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <HAL_GPIO_Init+0x1a0>
 8006166:	2300      	movs	r3, #0
 8006168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616a:	f002 0203 	and.w	r2, r2, #3
 800616e:	0092      	lsls	r2, r2, #2
 8006170:	4093      	lsls	r3, r2
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006178:	493a      	ldr	r1, [pc, #232]	; (8006264 <HAL_GPIO_Init+0x29c>)
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	089b      	lsrs	r3, r3, #2
 800617e:	3302      	adds	r3, #2
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d006      	beq.n	80061a0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006192:	4b39      	ldr	r3, [pc, #228]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4938      	ldr	r1, [pc, #224]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	4313      	orrs	r3, r2
 800619c:	600b      	str	r3, [r1, #0]
 800619e:	e006      	b.n	80061ae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80061a0:	4b35      	ldr	r3, [pc, #212]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	43db      	mvns	r3, r3
 80061a8:	4933      	ldr	r1, [pc, #204]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d006      	beq.n	80061c8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80061ba:	4b2f      	ldr	r3, [pc, #188]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	492e      	ldr	r1, [pc, #184]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	604b      	str	r3, [r1, #4]
 80061c6:	e006      	b.n	80061d6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80061c8:	4b2b      	ldr	r3, [pc, #172]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	43db      	mvns	r3, r3
 80061d0:	4929      	ldr	r1, [pc, #164]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d006      	beq.n	80061f0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80061e2:	4b25      	ldr	r3, [pc, #148]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	4924      	ldr	r1, [pc, #144]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	608b      	str	r3, [r1, #8]
 80061ee:	e006      	b.n	80061fe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80061f0:	4b21      	ldr	r3, [pc, #132]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	43db      	mvns	r3, r3
 80061f8:	491f      	ldr	r1, [pc, #124]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d006      	beq.n	8006218 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	491a      	ldr	r1, [pc, #104]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	4313      	orrs	r3, r2
 8006214:	60cb      	str	r3, [r1, #12]
 8006216:	e006      	b.n	8006226 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006218:	4b17      	ldr	r3, [pc, #92]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	43db      	mvns	r3, r3
 8006220:	4915      	ldr	r1, [pc, #84]	; (8006278 <HAL_GPIO_Init+0x2b0>)
 8006222:	4013      	ands	r3, r2
 8006224:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	3301      	adds	r3, #1
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	fa22 f303 	lsr.w	r3, r2, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	f47f aed0 	bne.w	8005fdc <HAL_GPIO_Init+0x14>
  }
}
 800623c:	bf00      	nop
 800623e:	372c      	adds	r7, #44	; 0x2c
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	10210000 	.word	0x10210000
 800624c:	10110000 	.word	0x10110000
 8006250:	10120000 	.word	0x10120000
 8006254:	10310000 	.word	0x10310000
 8006258:	10320000 	.word	0x10320000
 800625c:	10220000 	.word	0x10220000
 8006260:	40021000 	.word	0x40021000
 8006264:	40010000 	.word	0x40010000
 8006268:	40010800 	.word	0x40010800
 800626c:	40010c00 	.word	0x40010c00
 8006270:	40011000 	.word	0x40011000
 8006274:	40011400 	.word	0x40011400
 8006278:	40010400 	.word	0x40010400

0800627c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	887b      	ldrh	r3, [r7, #2]
 800628e:	4013      	ands	r3, r2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
 8006298:	e001      	b.n	800629e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800629e:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bc80      	pop	{r7}
 80062a8:	4770      	bx	lr

080062aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	460b      	mov	r3, r1
 80062b4:	807b      	strh	r3, [r7, #2]
 80062b6:	4613      	mov	r3, r2
 80062b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062ba:	787b      	ldrb	r3, [r7, #1]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062c0:	887a      	ldrh	r2, [r7, #2]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80062c6:	e003      	b.n	80062d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80062c8:	887b      	ldrh	r3, [r7, #2]
 80062ca:	041a      	lsls	r2, r3, #16
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	611a      	str	r2, [r3, #16]
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bc80      	pop	{r7}
 80062d8:	4770      	bx	lr
	...

080062dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80062e6:	4b08      	ldr	r3, [pc, #32]	; (8006308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062e8:	695a      	ldr	r2, [r3, #20]
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	4013      	ands	r3, r2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d006      	beq.n	8006300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062f2:	4a05      	ldr	r2, [pc, #20]	; (8006308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062f4:	88fb      	ldrh	r3, [r7, #6]
 80062f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062f8:	88fb      	ldrh	r3, [r7, #6]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fd fe62 	bl	8003fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40010400 	.word	0x40010400

0800630c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800630c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800630e:	b08b      	sub	sp, #44	; 0x2c
 8006310:	af06      	add	r7, sp, #24
 8006312:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e0d3      	b.n	80064c6 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fe fa48 	bl	80047c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2203      	movs	r2, #3
 800633c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4618      	mov	r0, r3
 8006346:	f002 f86c 	bl	8008422 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	687e      	ldr	r6, [r7, #4]
 8006352:	466d      	mov	r5, sp
 8006354:	f106 0410 	add.w	r4, r6, #16
 8006358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800635a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	1d33      	adds	r3, r6, #4
 8006362:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006364:	6838      	ldr	r0, [r7, #0]
 8006366:	f002 f835 	bl	80083d4 <USB_CoreInit>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d005      	beq.n	800637c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e0a4      	b.n	80064c6 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f002 f869 	bl	800845a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]
 800638c:	e035      	b.n	80063fa <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	015b      	lsls	r3, r3, #5
 8006394:	4413      	add	r3, r2
 8006396:	3329      	adds	r3, #41	; 0x29
 8006398:	2201      	movs	r2, #1
 800639a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	015b      	lsls	r3, r3, #5
 80063a2:	4413      	add	r3, r2
 80063a4:	3328      	adds	r3, #40	; 0x28
 80063a6:	7bfa      	ldrb	r2, [r7, #15]
 80063a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	7bfa      	ldrb	r2, [r7, #15]
 80063ae:	b291      	uxth	r1, r2
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	015b      	lsls	r3, r3, #5
 80063b4:	4413      	add	r3, r2
 80063b6:	3336      	adds	r3, #54	; 0x36
 80063b8:	460a      	mov	r2, r1
 80063ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	015b      	lsls	r3, r3, #5
 80063c2:	4413      	add	r3, r2
 80063c4:	332b      	adds	r3, #43	; 0x2b
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	015b      	lsls	r3, r3, #5
 80063d0:	4413      	add	r3, r2
 80063d2:	3338      	adds	r3, #56	; 0x38
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	015b      	lsls	r3, r3, #5
 80063de:	4413      	add	r3, r2
 80063e0:	333c      	adds	r3, #60	; 0x3c
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	3302      	adds	r3, #2
 80063ec:	015b      	lsls	r3, r3, #5
 80063ee:	4413      	add	r3, r2
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	3301      	adds	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
 80063fa:	7bfa      	ldrb	r2, [r7, #15]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d3c4      	bcc.n	800638e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]
 8006408:	e031      	b.n	800646e <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	015b      	lsls	r3, r3, #5
 8006410:	4413      	add	r3, r2
 8006412:	f203 1329 	addw	r3, r3, #297	; 0x129
 8006416:	2200      	movs	r2, #0
 8006418:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	015b      	lsls	r3, r3, #5
 8006420:	4413      	add	r3, r2
 8006422:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8006426:	7bfa      	ldrb	r2, [r7, #15]
 8006428:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	015b      	lsls	r3, r3, #5
 8006430:	4413      	add	r3, r2
 8006432:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8006436:	2200      	movs	r2, #0
 8006438:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	015b      	lsls	r3, r3, #5
 8006440:	4413      	add	r3, r2
 8006442:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	015b      	lsls	r3, r3, #5
 8006450:	4413      	add	r3, r2
 8006452:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	330a      	adds	r3, #10
 8006460:	015b      	lsls	r3, r3, #5
 8006462:	4413      	add	r3, r2
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	3301      	adds	r3, #1
 800646c:	73fb      	strb	r3, [r7, #15]
 800646e:	7bfa      	ldrb	r2, [r7, #15]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d3c8      	bcc.n	800640a <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	603b      	str	r3, [r7, #0]
 800647e:	687e      	ldr	r6, [r7, #4]
 8006480:	466d      	mov	r5, sp
 8006482:	f106 0410 	add.w	r4, r6, #16
 8006486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006488:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	1d33      	adds	r3, r6, #4
 8006490:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006492:	6838      	ldr	r0, [r7, #0]
 8006494:	f001 ffed 	bl	8008472 <USB_DevInit>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2202      	movs	r2, #2
 80064a2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e00d      	b.n	80064c6 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 fffb 	bl	80084ba <USB_DevDisconnect>

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080064d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80064d4:	4b03      	ldr	r3, [pc, #12]	; (80064e4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	601a      	str	r2, [r3, #0]
}
 80064da:	bf00      	nop
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	420e0020 	.word	0x420e0020

080064e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e26c      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 8087 	beq.w	8006616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006508:	4b92      	ldr	r3, [pc, #584]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f003 030c 	and.w	r3, r3, #12
 8006510:	2b04      	cmp	r3, #4
 8006512:	d00c      	beq.n	800652e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006514:	4b8f      	ldr	r3, [pc, #572]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f003 030c 	and.w	r3, r3, #12
 800651c:	2b08      	cmp	r3, #8
 800651e:	d112      	bne.n	8006546 <HAL_RCC_OscConfig+0x5e>
 8006520:	4b8c      	ldr	r3, [pc, #560]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652c:	d10b      	bne.n	8006546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800652e:	4b89      	ldr	r3, [pc, #548]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d06c      	beq.n	8006614 <HAL_RCC_OscConfig+0x12c>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d168      	bne.n	8006614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e246      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800654e:	d106      	bne.n	800655e <HAL_RCC_OscConfig+0x76>
 8006550:	4b80      	ldr	r3, [pc, #512]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a7f      	ldr	r2, [pc, #508]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	e02e      	b.n	80065bc <HAL_RCC_OscConfig+0xd4>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10c      	bne.n	8006580 <HAL_RCC_OscConfig+0x98>
 8006566:	4b7b      	ldr	r3, [pc, #492]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a7a      	ldr	r2, [pc, #488]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 800656c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	4b78      	ldr	r3, [pc, #480]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a77      	ldr	r2, [pc, #476]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	e01d      	b.n	80065bc <HAL_RCC_OscConfig+0xd4>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006588:	d10c      	bne.n	80065a4 <HAL_RCC_OscConfig+0xbc>
 800658a:	4b72      	ldr	r3, [pc, #456]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a71      	ldr	r2, [pc, #452]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	4b6f      	ldr	r3, [pc, #444]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a6e      	ldr	r2, [pc, #440]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 800659c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	e00b      	b.n	80065bc <HAL_RCC_OscConfig+0xd4>
 80065a4:	4b6b      	ldr	r3, [pc, #428]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a6a      	ldr	r2, [pc, #424]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 80065aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	4b68      	ldr	r3, [pc, #416]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a67      	ldr	r2, [pc, #412]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 80065b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d013      	beq.n	80065ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c4:	f7fe f99c 	bl	8004900 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ca:	e008      	b.n	80065de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065cc:	f7fe f998 	bl	8004900 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b64      	cmp	r3, #100	; 0x64
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e1fa      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065de:	4b5d      	ldr	r3, [pc, #372]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCC_OscConfig+0xe4>
 80065ea:	e014      	b.n	8006616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ec:	f7fe f988 	bl	8004900 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f4:	f7fe f984 	bl	8004900 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b64      	cmp	r3, #100	; 0x64
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e1e6      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006606:	4b53      	ldr	r3, [pc, #332]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0x10c>
 8006612:	e000      	b.n	8006616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d063      	beq.n	80066ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006622:	4b4c      	ldr	r3, [pc, #304]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f003 030c 	and.w	r3, r3, #12
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00b      	beq.n	8006646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800662e:	4b49      	ldr	r3, [pc, #292]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f003 030c 	and.w	r3, r3, #12
 8006636:	2b08      	cmp	r3, #8
 8006638:	d11c      	bne.n	8006674 <HAL_RCC_OscConfig+0x18c>
 800663a:	4b46      	ldr	r3, [pc, #280]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d116      	bne.n	8006674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006646:	4b43      	ldr	r3, [pc, #268]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d005      	beq.n	800665e <HAL_RCC_OscConfig+0x176>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d001      	beq.n	800665e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e1ba      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800665e:	4b3d      	ldr	r3, [pc, #244]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	4939      	ldr	r1, [pc, #228]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 800666e:	4313      	orrs	r3, r2
 8006670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006672:	e03a      	b.n	80066ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d020      	beq.n	80066be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800667c:	4b36      	ldr	r3, [pc, #216]	; (8006758 <HAL_RCC_OscConfig+0x270>)
 800667e:	2201      	movs	r2, #1
 8006680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006682:	f7fe f93d 	bl	8004900 <HAL_GetTick>
 8006686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800668a:	f7fe f939 	bl	8004900 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e19b      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800669c:	4b2d      	ldr	r3, [pc, #180]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0f0      	beq.n	800668a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a8:	4b2a      	ldr	r3, [pc, #168]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4927      	ldr	r1, [pc, #156]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	600b      	str	r3, [r1, #0]
 80066bc:	e015      	b.n	80066ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066be:	4b26      	ldr	r3, [pc, #152]	; (8006758 <HAL_RCC_OscConfig+0x270>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c4:	f7fe f91c 	bl	8004900 <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066cc:	f7fe f918 	bl	8004900 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e17a      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066de:	4b1d      	ldr	r3, [pc, #116]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d03a      	beq.n	800676c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d019      	beq.n	8006732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066fe:	4b17      	ldr	r3, [pc, #92]	; (800675c <HAL_RCC_OscConfig+0x274>)
 8006700:	2201      	movs	r2, #1
 8006702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006704:	f7fe f8fc 	bl	8004900 <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800670c:	f7fe f8f8 	bl	8004900 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e15a      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800671e:	4b0d      	ldr	r3, [pc, #52]	; (8006754 <HAL_RCC_OscConfig+0x26c>)
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800672a:	2001      	movs	r0, #1
 800672c:	f000 fada 	bl	8006ce4 <RCC_Delay>
 8006730:	e01c      	b.n	800676c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006732:	4b0a      	ldr	r3, [pc, #40]	; (800675c <HAL_RCC_OscConfig+0x274>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006738:	f7fe f8e2 	bl	8004900 <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800673e:	e00f      	b.n	8006760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006740:	f7fe f8de 	bl	8004900 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d908      	bls.n	8006760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e140      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
 8006752:	bf00      	nop
 8006754:	40021000 	.word	0x40021000
 8006758:	42420000 	.word	0x42420000
 800675c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006760:	4b9e      	ldr	r3, [pc, #632]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e9      	bne.n	8006740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80a6 	beq.w	80068c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800677e:	4b97      	ldr	r3, [pc, #604]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10d      	bne.n	80067a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800678a:	4b94      	ldr	r3, [pc, #592]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	4a93      	ldr	r2, [pc, #588]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006794:	61d3      	str	r3, [r2, #28]
 8006796:	4b91      	ldr	r3, [pc, #580]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067a2:	2301      	movs	r3, #1
 80067a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a6:	4b8e      	ldr	r3, [pc, #568]	; (80069e0 <HAL_RCC_OscConfig+0x4f8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d118      	bne.n	80067e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067b2:	4b8b      	ldr	r3, [pc, #556]	; (80069e0 <HAL_RCC_OscConfig+0x4f8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a8a      	ldr	r2, [pc, #552]	; (80069e0 <HAL_RCC_OscConfig+0x4f8>)
 80067b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067be:	f7fe f89f 	bl	8004900 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c6:	f7fe f89b 	bl	8004900 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b64      	cmp	r3, #100	; 0x64
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e0fd      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067d8:	4b81      	ldr	r3, [pc, #516]	; (80069e0 <HAL_RCC_OscConfig+0x4f8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f0      	beq.n	80067c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d106      	bne.n	80067fa <HAL_RCC_OscConfig+0x312>
 80067ec:	4b7b      	ldr	r3, [pc, #492]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	4a7a      	ldr	r2, [pc, #488]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 80067f2:	f043 0301 	orr.w	r3, r3, #1
 80067f6:	6213      	str	r3, [r2, #32]
 80067f8:	e02d      	b.n	8006856 <HAL_RCC_OscConfig+0x36e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10c      	bne.n	800681c <HAL_RCC_OscConfig+0x334>
 8006802:	4b76      	ldr	r3, [pc, #472]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	4a75      	ldr	r2, [pc, #468]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	6213      	str	r3, [r2, #32]
 800680e:	4b73      	ldr	r3, [pc, #460]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	4a72      	ldr	r2, [pc, #456]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006814:	f023 0304 	bic.w	r3, r3, #4
 8006818:	6213      	str	r3, [r2, #32]
 800681a:	e01c      	b.n	8006856 <HAL_RCC_OscConfig+0x36e>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	2b05      	cmp	r3, #5
 8006822:	d10c      	bne.n	800683e <HAL_RCC_OscConfig+0x356>
 8006824:	4b6d      	ldr	r3, [pc, #436]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	4a6c      	ldr	r2, [pc, #432]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 800682a:	f043 0304 	orr.w	r3, r3, #4
 800682e:	6213      	str	r3, [r2, #32]
 8006830:	4b6a      	ldr	r3, [pc, #424]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	4a69      	ldr	r2, [pc, #420]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006836:	f043 0301 	orr.w	r3, r3, #1
 800683a:	6213      	str	r3, [r2, #32]
 800683c:	e00b      	b.n	8006856 <HAL_RCC_OscConfig+0x36e>
 800683e:	4b67      	ldr	r3, [pc, #412]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	4a66      	ldr	r2, [pc, #408]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006844:	f023 0301 	bic.w	r3, r3, #1
 8006848:	6213      	str	r3, [r2, #32]
 800684a:	4b64      	ldr	r3, [pc, #400]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	4a63      	ldr	r2, [pc, #396]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006850:	f023 0304 	bic.w	r3, r3, #4
 8006854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d015      	beq.n	800688a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800685e:	f7fe f84f 	bl	8004900 <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006864:	e00a      	b.n	800687c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006866:	f7fe f84b 	bl	8004900 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	f241 3288 	movw	r2, #5000	; 0x1388
 8006874:	4293      	cmp	r3, r2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e0ab      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800687c:	4b57      	ldr	r3, [pc, #348]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0ee      	beq.n	8006866 <HAL_RCC_OscConfig+0x37e>
 8006888:	e014      	b.n	80068b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800688a:	f7fe f839 	bl	8004900 <HAL_GetTick>
 800688e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006890:	e00a      	b.n	80068a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006892:	f7fe f835 	bl	8004900 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e095      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068a8:	4b4c      	ldr	r3, [pc, #304]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1ee      	bne.n	8006892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d105      	bne.n	80068c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068ba:	4b48      	ldr	r3, [pc, #288]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	4a47      	ldr	r2, [pc, #284]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 80068c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8081 	beq.w	80069d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068d0:	4b42      	ldr	r3, [pc, #264]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f003 030c 	and.w	r3, r3, #12
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d061      	beq.n	80069a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d146      	bne.n	8006972 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e4:	4b3f      	ldr	r3, [pc, #252]	; (80069e4 <HAL_RCC_OscConfig+0x4fc>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ea:	f7fe f809 	bl	8004900 <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068f0:	e008      	b.n	8006904 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f2:	f7fe f805 	bl	8004900 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d901      	bls.n	8006904 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e067      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006904:	4b35      	ldr	r3, [pc, #212]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1f0      	bne.n	80068f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006918:	d108      	bne.n	800692c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800691a:	4b30      	ldr	r3, [pc, #192]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	492d      	ldr	r1, [pc, #180]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006928:	4313      	orrs	r3, r2
 800692a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800692c:	4b2b      	ldr	r3, [pc, #172]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a19      	ldr	r1, [r3, #32]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	430b      	orrs	r3, r1
 800693e:	4927      	ldr	r1, [pc, #156]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006940:	4313      	orrs	r3, r2
 8006942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006944:	4b27      	ldr	r3, [pc, #156]	; (80069e4 <HAL_RCC_OscConfig+0x4fc>)
 8006946:	2201      	movs	r2, #1
 8006948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800694a:	f7fd ffd9 	bl	8004900 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006952:	f7fd ffd5 	bl	8004900 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e037      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006964:	4b1d      	ldr	r3, [pc, #116]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0f0      	beq.n	8006952 <HAL_RCC_OscConfig+0x46a>
 8006970:	e02f      	b.n	80069d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006972:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <HAL_RCC_OscConfig+0x4fc>)
 8006974:	2200      	movs	r2, #0
 8006976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006978:	f7fd ffc2 	bl	8004900 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006980:	f7fd ffbe 	bl	8004900 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e020      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006992:	4b12      	ldr	r3, [pc, #72]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1f0      	bne.n	8006980 <HAL_RCC_OscConfig+0x498>
 800699e:	e018      	b.n	80069d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69db      	ldr	r3, [r3, #28]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e013      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80069ac:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <HAL_RCC_OscConfig+0x4f4>)
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d106      	bne.n	80069ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d001      	beq.n	80069d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3718      	adds	r7, #24
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40021000 	.word	0x40021000
 80069e0:	40007000 	.word	0x40007000
 80069e4:	42420060 	.word	0x42420060

080069e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e0d0      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069fc:	4b6a      	ldr	r3, [pc, #424]	; (8006ba8 <HAL_RCC_ClockConfig+0x1c0>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d910      	bls.n	8006a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a0a:	4b67      	ldr	r3, [pc, #412]	; (8006ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f023 0207 	bic.w	r2, r3, #7
 8006a12:	4965      	ldr	r1, [pc, #404]	; (8006ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1a:	4b63      	ldr	r3, [pc, #396]	; (8006ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d001      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e0b8      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d020      	beq.n	8006a7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a44:	4b59      	ldr	r3, [pc, #356]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	4a58      	ldr	r2, [pc, #352]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006a4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0308 	and.w	r3, r3, #8
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d005      	beq.n	8006a68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a5c:	4b53      	ldr	r3, [pc, #332]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	4a52      	ldr	r2, [pc, #328]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006a62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006a66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a68:	4b50      	ldr	r3, [pc, #320]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	494d      	ldr	r1, [pc, #308]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d040      	beq.n	8006b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d107      	bne.n	8006a9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a8e:	4b47      	ldr	r3, [pc, #284]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d115      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e07f      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d107      	bne.n	8006ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aa6:	4b41      	ldr	r3, [pc, #260]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d109      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e073      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ab6:	4b3d      	ldr	r3, [pc, #244]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e06b      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ac6:	4b39      	ldr	r3, [pc, #228]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f023 0203 	bic.w	r2, r3, #3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	4936      	ldr	r1, [pc, #216]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ad8:	f7fd ff12 	bl	8004900 <HAL_GetTick>
 8006adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ade:	e00a      	b.n	8006af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ae0:	f7fd ff0e 	bl	8004900 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e053      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006af6:	4b2d      	ldr	r3, [pc, #180]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f003 020c 	and.w	r2, r3, #12
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d1eb      	bne.n	8006ae0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b08:	4b27      	ldr	r3, [pc, #156]	; (8006ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0307 	and.w	r3, r3, #7
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d210      	bcs.n	8006b38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b16:	4b24      	ldr	r3, [pc, #144]	; (8006ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f023 0207 	bic.w	r2, r3, #7
 8006b1e:	4922      	ldr	r1, [pc, #136]	; (8006ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b26:	4b20      	ldr	r3, [pc, #128]	; (8006ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d001      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e032      	b.n	8006b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b44:	4b19      	ldr	r3, [pc, #100]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	4916      	ldr	r1, [pc, #88]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b62:	4b12      	ldr	r3, [pc, #72]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	490e      	ldr	r1, [pc, #56]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b76:	f000 f821 	bl	8006bbc <HAL_RCC_GetSysClockFreq>
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	4b0b      	ldr	r3, [pc, #44]	; (8006bac <HAL_RCC_ClockConfig+0x1c4>)
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	091b      	lsrs	r3, r3, #4
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	4a0a      	ldr	r2, [pc, #40]	; (8006bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8006b88:	5cd3      	ldrb	r3, [r2, r3]
 8006b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8006b8e:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <HAL_RCC_ClockConfig+0x1cc>)
 8006b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <HAL_RCC_ClockConfig+0x1d0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fd fe70 	bl	800487c <HAL_InitTick>

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	40022000 	.word	0x40022000
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	0800b5dc 	.word	0x0800b5dc
 8006bb4:	2000002c 	.word	0x2000002c
 8006bb8:	20000030 	.word	0x20000030

08006bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bbc:	b490      	push	{r4, r7}
 8006bbe:	b08a      	sub	sp, #40	; 0x28
 8006bc0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006bc2:	4b2a      	ldr	r3, [pc, #168]	; (8006c6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8006bc4:	1d3c      	adds	r4, r7, #4
 8006bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006bcc:	4b28      	ldr	r3, [pc, #160]	; (8006c70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006be6:	4b23      	ldr	r3, [pc, #140]	; (8006c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f003 030c 	and.w	r3, r3, #12
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d002      	beq.n	8006bfc <HAL_RCC_GetSysClockFreq+0x40>
 8006bf6:	2b08      	cmp	r3, #8
 8006bf8:	d003      	beq.n	8006c02 <HAL_RCC_GetSysClockFreq+0x46>
 8006bfa:	e02d      	b.n	8006c58 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006bfc:	4b1e      	ldr	r3, [pc, #120]	; (8006c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006bfe:	623b      	str	r3, [r7, #32]
      break;
 8006c00:	e02d      	b.n	8006c5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	0c9b      	lsrs	r3, r3, #18
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006c0e:	4413      	add	r3, r2
 8006c10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006c14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d013      	beq.n	8006c48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006c20:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	0c5b      	lsrs	r3, r3, #17
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006c2e:	4413      	add	r3, r2
 8006c30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006c34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	4a0f      	ldr	r2, [pc, #60]	; (8006c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c3a:	fb02 f203 	mul.w	r2, r2, r3
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
 8006c46:	e004      	b.n	8006c52 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c4c:	fb02 f303 	mul.w	r3, r2, r3
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	623b      	str	r3, [r7, #32]
      break;
 8006c56:	e002      	b.n	8006c5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c5a:	623b      	str	r3, [r7, #32]
      break;
 8006c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3728      	adds	r7, #40	; 0x28
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc90      	pop	{r4, r7}
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	0800b5b4 	.word	0x0800b5b4
 8006c70:	0800b5c4 	.word	0x0800b5c4
 8006c74:	40021000 	.word	0x40021000
 8006c78:	007a1200 	.word	0x007a1200
 8006c7c:	003d0900 	.word	0x003d0900

08006c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c84:	4b02      	ldr	r3, [pc, #8]	; (8006c90 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c86:	681b      	ldr	r3, [r3, #0]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr
 8006c90:	2000002c 	.word	0x2000002c

08006c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c98:	f7ff fff2 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006c9c:	4601      	mov	r1, r0
 8006c9e:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	0a1b      	lsrs	r3, r3, #8
 8006ca4:	f003 0307 	and.w	r3, r3, #7
 8006ca8:	4a03      	ldr	r2, [pc, #12]	; (8006cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006caa:	5cd3      	ldrb	r3, [r2, r3]
 8006cac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	40021000 	.word	0x40021000
 8006cb8:	0800b5ec 	.word	0x0800b5ec

08006cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006cc0:	f7ff ffde 	bl	8006c80 <HAL_RCC_GetHCLKFreq>
 8006cc4:	4601      	mov	r1, r0
 8006cc6:	4b05      	ldr	r3, [pc, #20]	; (8006cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	0adb      	lsrs	r3, r3, #11
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	4a03      	ldr	r2, [pc, #12]	; (8006ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cd2:	5cd3      	ldrb	r3, [r2, r3]
 8006cd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40021000 	.word	0x40021000
 8006ce0:	0800b5ec 	.word	0x0800b5ec

08006ce4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006cec:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <RCC_Delay+0x34>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a0a      	ldr	r2, [pc, #40]	; (8006d1c <RCC_Delay+0x38>)
 8006cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf6:	0a5b      	lsrs	r3, r3, #9
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006d00:	bf00      	nop
  }
  while (Delay --);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	1e5a      	subs	r2, r3, #1
 8006d06:	60fa      	str	r2, [r7, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1f9      	bne.n	8006d00 <RCC_Delay+0x1c>
}
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	2000002c 	.word	0x2000002c
 8006d1c:	10624dd3 	.word	0x10624dd3

08006d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d07d      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d40:	4b4f      	ldr	r3, [pc, #316]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10d      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d4c:	4b4c      	ldr	r3, [pc, #304]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	4a4b      	ldr	r2, [pc, #300]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d56:	61d3      	str	r3, [r2, #28]
 8006d58:	4b49      	ldr	r3, [pc, #292]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d60:	60bb      	str	r3, [r7, #8]
 8006d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d68:	4b46      	ldr	r3, [pc, #280]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d118      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d74:	4b43      	ldr	r3, [pc, #268]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a42      	ldr	r2, [pc, #264]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d80:	f7fd fdbe 	bl	8004900 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d86:	e008      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d88:	f7fd fdba 	bl	8004900 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b64      	cmp	r3, #100	; 0x64
 8006d94:	d901      	bls.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e06d      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d9a:	4b3a      	ldr	r3, [pc, #232]	; (8006e84 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0f0      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006da6:	4b36      	ldr	r3, [pc, #216]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d02e      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d027      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dc4:	4b2e      	ldr	r3, [pc, #184]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dcc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006dce:	4b2e      	ldr	r3, [pc, #184]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dd4:	4b2c      	ldr	r3, [pc, #176]	; (8006e88 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006dda:	4a29      	ldr	r2, [pc, #164]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f003 0301 	and.w	r3, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d014      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dea:	f7fd fd89 	bl	8004900 <HAL_GetTick>
 8006dee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df0:	e00a      	b.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df2:	f7fd fd85 	bl	8004900 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d901      	bls.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e036      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e08:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d0ee      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e14:	4b1a      	ldr	r3, [pc, #104]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	4917      	ldr	r1, [pc, #92]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d105      	bne.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e2c:	4b14      	ldr	r3, [pc, #80]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	4a13      	ldr	r2, [pc, #76]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d008      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e44:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	490b      	ldr	r1, [pc, #44]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0310 	and.w	r3, r3, #16
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d008      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e62:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	4904      	ldr	r1, [pc, #16]	; (8006e80 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40021000 	.word	0x40021000
 8006e84:	40007000 	.word	0x40007000
 8006e88:	42420440 	.word	0x42420440

08006e8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e8c:	b590      	push	{r4, r7, lr}
 8006e8e:	b08d      	sub	sp, #52	; 0x34
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e94:	4b55      	ldr	r3, [pc, #340]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006e96:	f107 040c 	add.w	r4, r7, #12
 8006e9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006ea0:	4b53      	ldr	r3, [pc, #332]	; (8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006ea2:	881b      	ldrh	r3, [r3, #0]
 8006ea4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eaa:	2300      	movs	r3, #0
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eae:	2300      	movs	r3, #0
 8006eb0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d07f      	beq.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d002      	beq.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d048      	beq.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006ec8:	e08b      	b.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8006eca:	4b4a      	ldr	r3, [pc, #296]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006ed0:	4b48      	ldr	r3, [pc, #288]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d07f      	beq.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	0c9b      	lsrs	r3, r3, #18
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006ee8:	4413      	add	r3, r2
 8006eea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006eee:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d018      	beq.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006efa:	4b3e      	ldr	r3, [pc, #248]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	0c5b      	lsrs	r3, r3, #17
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006f08:	4413      	add	r3, r2
 8006f0a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00d      	beq.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006f1a:	4a37      	ldr	r2, [pc, #220]	; (8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f22:	6a3b      	ldr	r3, [r7, #32]
 8006f24:	fb02 f303 	mul.w	r3, r2, r3
 8006f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f2a:	e004      	b.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	4a33      	ldr	r2, [pc, #204]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006f30:	fb02 f303 	mul.w	r3, r2, r3
 8006f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006f36:	4b2f      	ldr	r3, [pc, #188]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f42:	d102      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006f48:	e048      	b.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	4a2c      	ldr	r2, [pc, #176]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006f50:	fba2 2303 	umull	r2, r3, r2, r3
 8006f54:	085b      	lsrs	r3, r3, #1
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006f58:	e040      	b.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8006f5a:	4b26      	ldr	r3, [pc, #152]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f6a:	d108      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8006f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f7c:	e01f      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f88:	d109      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8006f8a:	4b1a      	ldr	r3, [pc, #104]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	f003 0302 	and.w	r3, r3, #2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8006f96:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f9c:	e00f      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa8:	d11a      	bne.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006faa:	4b12      	ldr	r3, [pc, #72]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d014      	beq.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8006fb6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006fbc:	e010      	b.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006fbe:	e00f      	b.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006fc0:	f7ff fe7c 	bl	8006cbc <HAL_RCC_GetPCLK2Freq>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	0b9b      	lsrs	r3, r3, #14
 8006fcc:	f003 0303 	and.w	r3, r3, #3
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006fda:	e002      	b.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006fdc:	bf00      	nop
 8006fde:	e000      	b.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006fe0:	bf00      	nop
    }
  }
  return (frequency);
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3734      	adds	r7, #52	; 0x34
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd90      	pop	{r4, r7, pc}
 8006fec:	0800b5c8 	.word	0x0800b5c8
 8006ff0:	0800b5d8 	.word	0x0800b5d8
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	007a1200 	.word	0x007a1200
 8006ffc:	003d0900 	.word	0x003d0900
 8007000:	aaaaaaab 	.word	0xaaaaaaab

08007004 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e084      	b.n	8007124 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	7c5b      	ldrb	r3, [r3, #17]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fd f88a 	bl	8004144 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f9c8 	bl	80073cc <HAL_RTC_WaitForSynchro>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2204      	movs	r2, #4
 8007046:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e06b      	b.n	8007124 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fa81 	bl	8007554 <RTC_EnterInitMode>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d004      	beq.n	8007062 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2204      	movs	r2, #4
 800705c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e060      	b.n	8007124 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0207 	bic.w	r2, r2, #7
 8007070:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800707a:	4b2c      	ldr	r3, [pc, #176]	; (800712c <HAL_RTC_Init+0x128>)
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	4a2b      	ldr	r2, [pc, #172]	; (800712c <HAL_RTC_Init+0x128>)
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007086:	4b29      	ldr	r3, [pc, #164]	; (800712c <HAL_RTC_Init+0x128>)
 8007088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	4926      	ldr	r1, [pc, #152]	; (800712c <HAL_RTC_Init+0x128>)
 8007094:	4313      	orrs	r3, r2
 8007096:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d003      	beq.n	80070aa <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	e00e      	b.n	80070c8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80070aa:	2001      	movs	r0, #1
 80070ac:	f7ff feee 	bl	8006e8c <HAL_RCCEx_GetPeriphCLKFreq>
 80070b0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d104      	bne.n	80070c2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2204      	movs	r2, #4
 80070bc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e030      	b.n	8007124 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f023 010f 	bic.w	r1, r3, #15
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	0c1a      	lsrs	r2, r3, #16
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	0c1b      	lsrs	r3, r3, #16
 80070e6:	041b      	lsls	r3, r3, #16
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	b291      	uxth	r1, r2
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	6812      	ldr	r2, [r2, #0]
 80070f0:	430b      	orrs	r3, r1
 80070f2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa55 	bl	80075a4 <RTC_ExitInitMode>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2204      	movs	r2, #4
 8007104:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e00c      	b.n	8007124 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007122:	2300      	movs	r3, #0
  }
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40006c00 	.word	0x40006c00

08007130 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007130:	b590      	push	{r4, r7, lr}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	2300      	movs	r3, #0
 8007142:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <HAL_RTC_SetTime+0x20>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e080      	b.n	8007256 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	7c1b      	ldrb	r3, [r3, #16]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_RTC_SetTime+0x30>
 800715c:	2302      	movs	r3, #2
 800715e:	e07a      	b.n	8007256 <HAL_RTC_SetTime+0x126>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2202      	movs	r2, #2
 800716a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d113      	bne.n	800719a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800717c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	4619      	mov	r1, r3
 8007186:	460b      	mov	r3, r1
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	1a5b      	subs	r3, r3, r1
 800718c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800718e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007194:	4413      	add	r3, r2
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	e01e      	b.n	80071d8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 fa28 	bl	80075f4 <RTC_Bcd2ToByte>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80071ac:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	785b      	ldrb	r3, [r3, #1]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fa1d 	bl	80075f4 <RTC_Bcd2ToByte>
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	4613      	mov	r3, r2
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80071c6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	789b      	ldrb	r3, [r3, #2]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fa11 	bl	80075f4 <RTC_Bcd2ToByte>
 80071d2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80071d4:	4423      	add	r3, r4
 80071d6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80071d8:	6979      	ldr	r1, [r7, #20]
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f953 	bl	8007486 <RTC_WriteTimeCounter>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2204      	movs	r2, #4
 80071ea:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e02f      	b.n	8007256 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0205 	bic.w	r2, r2, #5
 8007204:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 f964 	bl	80074d4 <RTC_ReadAlarmCounter>
 800720c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007214:	d018      	beq.n	8007248 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	429a      	cmp	r2, r3
 800721c:	d214      	bcs.n	8007248 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007224:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007228:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800722a:	6939      	ldr	r1, [r7, #16]
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 f96a 	bl	8007506 <RTC_WriteAlarmCounter>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2204      	movs	r2, #4
 800723c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e006      	b.n	8007256 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2201      	movs	r2, #1
 800724c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8007254:	2300      	movs	r3, #0
  }
}
 8007256:	4618      	mov	r0, r3
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	bd90      	pop	{r4, r7, pc}
	...

08007260 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	61fb      	str	r3, [r7, #28]
 8007270:	2300      	movs	r3, #0
 8007272:	61bb      	str	r3, [r7, #24]
 8007274:	2300      	movs	r3, #0
 8007276:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <HAL_RTC_SetDate+0x24>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e097      	b.n	80073b8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	7c1b      	ldrb	r3, [r3, #16]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_RTC_SetDate+0x34>
 8007290:	2302      	movs	r3, #2
 8007292:	e091      	b.n	80073b8 <HAL_RTC_SetDate+0x158>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2201      	movs	r2, #1
 8007298:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2202      	movs	r2, #2
 800729e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10c      	bne.n	80072c0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	78da      	ldrb	r2, [r3, #3]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	785a      	ldrb	r2, [r3, #1]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	789a      	ldrb	r2, [r3, #2]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	739a      	strb	r2, [r3, #14]
 80072be:	e01a      	b.n	80072f6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	78db      	ldrb	r3, [r3, #3]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 f995 	bl	80075f4 <RTC_Bcd2ToByte>
 80072ca:	4603      	mov	r3, r0
 80072cc:	461a      	mov	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 f98c 	bl	80075f4 <RTC_Bcd2ToByte>
 80072dc:	4603      	mov	r3, r0
 80072de:	461a      	mov	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	789b      	ldrb	r3, [r3, #2]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 f983 	bl	80075f4 <RTC_Bcd2ToByte>
 80072ee:	4603      	mov	r3, r0
 80072f0:	461a      	mov	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	7bdb      	ldrb	r3, [r3, #15]
 80072fa:	4618      	mov	r0, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	7b59      	ldrb	r1, [r3, #13]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	7b9b      	ldrb	r3, [r3, #14]
 8007304:	461a      	mov	r2, r3
 8007306:	f000 f993 	bl	8007630 <RTC_WeekDayNum>
 800730a:	4603      	mov	r3, r0
 800730c:	461a      	mov	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	7b1a      	ldrb	r2, [r3, #12]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 f883 	bl	8007426 <RTC_ReadTimeCounter>
 8007320:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4a26      	ldr	r2, [pc, #152]	; (80073c0 <HAL_RTC_SetDate+0x160>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	0adb      	lsrs	r3, r3, #11
 800732c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2b18      	cmp	r3, #24
 8007332:	d93a      	bls.n	80073aa <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	4a23      	ldr	r2, [pc, #140]	; (80073c4 <HAL_RTC_SetDate+0x164>)
 8007338:	fba2 2303 	umull	r2, r3, r2, r3
 800733c:	091b      	lsrs	r3, r3, #4
 800733e:	4a22      	ldr	r2, [pc, #136]	; (80073c8 <HAL_RTC_SetDate+0x168>)
 8007340:	fb02 f303 	mul.w	r3, r2, r3
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800734a:	69f9      	ldr	r1, [r7, #28]
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f89a 	bl	8007486 <RTC_WriteTimeCounter>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d007      	beq.n	8007368 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2204      	movs	r2, #4
 800735c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2200      	movs	r2, #0
 8007362:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e027      	b.n	80073b8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f8b3 	bl	80074d4 <RTC_ReadAlarmCounter>
 800736e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007376:	d018      	beq.n	80073aa <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	429a      	cmp	r2, r3
 800737e:	d214      	bcs.n	80073aa <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007386:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800738a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800738c:	69b9      	ldr	r1, [r7, #24]
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 f8b9 	bl	8007506 <RTC_WriteAlarmCounter>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d007      	beq.n	80073aa <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2204      	movs	r2, #4
 800739e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e006      	b.n	80073b8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2201      	movs	r2, #1
 80073ae:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3720      	adds	r7, #32
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	91a2b3c5 	.word	0x91a2b3c5
 80073c4:	aaaaaaab 	.word	0xaaaaaaab
 80073c8:	00015180 	.word	0x00015180

080073cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e01d      	b.n	800741e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0208 	bic.w	r2, r2, #8
 80073f0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80073f2:	f7fd fa85 	bl	8004900 <HAL_GetTick>
 80073f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80073f8:	e009      	b.n	800740e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80073fa:	f7fd fa81 	bl	8004900 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007408:	d901      	bls.n	800740e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e007      	b.n	800741e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f003 0308 	and.w	r3, r3, #8
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0ee      	beq.n	80073fa <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8007426:	b480      	push	{r7}
 8007428:	b087      	sub	sp, #28
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	827b      	strh	r3, [r7, #18]
 8007432:	2300      	movs	r3, #0
 8007434:	823b      	strh	r3, [r7, #16]
 8007436:	2300      	movs	r3, #0
 8007438:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8007456:	8a7a      	ldrh	r2, [r7, #18]
 8007458:	8a3b      	ldrh	r3, [r7, #16]
 800745a:	429a      	cmp	r2, r3
 800745c:	d008      	beq.n	8007470 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800745e:	8a3b      	ldrh	r3, [r7, #16]
 8007460:	041a      	lsls	r2, r3, #16
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	b29b      	uxth	r3, r3
 800746a:	4313      	orrs	r3, r2
 800746c:	617b      	str	r3, [r7, #20]
 800746e:	e004      	b.n	800747a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007470:	8a7b      	ldrh	r3, [r7, #18]
 8007472:	041a      	lsls	r2, r3, #16
 8007474:	89fb      	ldrh	r3, [r7, #14]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800747a:	697b      	ldr	r3, [r7, #20]
}
 800747c:	4618      	mov	r0, r3
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	bc80      	pop	{r7}
 8007484:	4770      	bx	lr

08007486 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f85d 	bl	8007554 <RTC_EnterInitMode>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
 80074a4:	e011      	b.n	80074ca <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	0c12      	lsrs	r2, r2, #16
 80074ae:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	b292      	uxth	r2, r2
 80074b8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f872 	bl	80075a4 <RTC_ExitInitMode>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	81fb      	strh	r3, [r7, #14]
 80074e0:	2300      	movs	r3, #0
 80074e2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80074f4:	89fb      	ldrh	r3, [r7, #14]
 80074f6:	041a      	lsls	r2, r3, #16
 80074f8:	89bb      	ldrh	r3, [r7, #12]
 80074fa:	4313      	orrs	r3, r2
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	bc80      	pop	{r7}
 8007504:	4770      	bx	lr

08007506 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f81d 	bl	8007554 <RTC_EnterInitMode>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	73fb      	strb	r3, [r7, #15]
 8007524:	e011      	b.n	800754a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	0c12      	lsrs	r2, r2, #16
 800752e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	b292      	uxth	r2, r2
 8007538:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f832 	bl	80075a4 <RTC_ExitInitMode>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800755c:	2300      	movs	r3, #0
 800755e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007560:	f7fd f9ce 	bl	8004900 <HAL_GetTick>
 8007564:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007566:	e009      	b.n	800757c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007568:	f7fd f9ca 	bl	8004900 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007576:	d901      	bls.n	800757c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e00f      	b.n	800759c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0ee      	beq.n	8007568 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f042 0210 	orr.w	r2, r2, #16
 8007598:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0210 	bic.w	r2, r2, #16
 80075be:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80075c0:	f7fd f99e 	bl	8004900 <HAL_GetTick>
 80075c4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80075c6:	e009      	b.n	80075dc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80075c8:	f7fd f99a 	bl	8004900 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075d6:	d901      	bls.n	80075dc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e007      	b.n	80075ec <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f003 0320 	and.w	r3, r3, #32
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d0ee      	beq.n	80075c8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	4603      	mov	r3, r0
 80075fc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	091b      	lsrs	r3, r3, #4
 8007606:	b2db      	uxtb	r3, r3
 8007608:	461a      	mov	r2, r3
 800760a:	4613      	mov	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	b2da      	uxtb	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	4413      	add	r3, r2
 8007622:	b2db      	uxtb	r3, r3
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	bc80      	pop	{r7}
 800762c:	4770      	bx	lr
	...

08007630 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	70fb      	strb	r3, [r7, #3]
 800763c:	4613      	mov	r3, r2
 800763e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	60bb      	str	r3, [r7, #8]
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800764e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	2b02      	cmp	r3, #2
 8007654:	d82d      	bhi.n	80076b2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007656:	78fa      	ldrb	r2, [r7, #3]
 8007658:	4613      	mov	r3, r2
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	4413      	add	r3, r2
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	1a9b      	subs	r3, r3, r2
 8007662:	4a2c      	ldr	r2, [pc, #176]	; (8007714 <RTC_WeekDayNum+0xe4>)
 8007664:	fba2 2303 	umull	r2, r3, r2, r3
 8007668:	085a      	lsrs	r2, r3, #1
 800766a:	78bb      	ldrb	r3, [r7, #2]
 800766c:	441a      	add	r2, r3
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	441a      	add	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	3b01      	subs	r3, #1
 8007676:	089b      	lsrs	r3, r3, #2
 8007678:	441a      	add	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	3b01      	subs	r3, #1
 800767e:	4926      	ldr	r1, [pc, #152]	; (8007718 <RTC_WeekDayNum+0xe8>)
 8007680:	fba1 1303 	umull	r1, r3, r1, r3
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	1ad2      	subs	r2, r2, r3
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	3b01      	subs	r3, #1
 800768c:	4922      	ldr	r1, [pc, #136]	; (8007718 <RTC_WeekDayNum+0xe8>)
 800768e:	fba1 1303 	umull	r1, r3, r1, r3
 8007692:	09db      	lsrs	r3, r3, #7
 8007694:	4413      	add	r3, r2
 8007696:	1d1a      	adds	r2, r3, #4
 8007698:	4b20      	ldr	r3, [pc, #128]	; (800771c <RTC_WeekDayNum+0xec>)
 800769a:	fba3 1302 	umull	r1, r3, r3, r2
 800769e:	1ad1      	subs	r1, r2, r3
 80076a0:	0849      	lsrs	r1, r1, #1
 80076a2:	440b      	add	r3, r1
 80076a4:	0899      	lsrs	r1, r3, #2
 80076a6:	460b      	mov	r3, r1
 80076a8:	00db      	lsls	r3, r3, #3
 80076aa:	1a5b      	subs	r3, r3, r1
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	e029      	b.n	8007706 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80076b2:	78fa      	ldrb	r2, [r7, #3]
 80076b4:	4613      	mov	r3, r2
 80076b6:	005b      	lsls	r3, r3, #1
 80076b8:	4413      	add	r3, r2
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	1a9b      	subs	r3, r3, r2
 80076be:	4a15      	ldr	r2, [pc, #84]	; (8007714 <RTC_WeekDayNum+0xe4>)
 80076c0:	fba2 2303 	umull	r2, r3, r2, r3
 80076c4:	085a      	lsrs	r2, r3, #1
 80076c6:	78bb      	ldrb	r3, [r7, #2]
 80076c8:	441a      	add	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	441a      	add	r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	089b      	lsrs	r3, r3, #2
 80076d2:	441a      	add	r2, r3
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4910      	ldr	r1, [pc, #64]	; (8007718 <RTC_WeekDayNum+0xe8>)
 80076d8:	fba1 1303 	umull	r1, r3, r1, r3
 80076dc:	095b      	lsrs	r3, r3, #5
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	490d      	ldr	r1, [pc, #52]	; (8007718 <RTC_WeekDayNum+0xe8>)
 80076e4:	fba1 1303 	umull	r1, r3, r1, r3
 80076e8:	09db      	lsrs	r3, r3, #7
 80076ea:	4413      	add	r3, r2
 80076ec:	1c9a      	adds	r2, r3, #2
 80076ee:	4b0b      	ldr	r3, [pc, #44]	; (800771c <RTC_WeekDayNum+0xec>)
 80076f0:	fba3 1302 	umull	r1, r3, r3, r2
 80076f4:	1ad1      	subs	r1, r2, r3
 80076f6:	0849      	lsrs	r1, r1, #1
 80076f8:	440b      	add	r3, r1
 80076fa:	0899      	lsrs	r1, r3, #2
 80076fc:	460b      	mov	r3, r1
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	1a5b      	subs	r3, r3, r1
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	b2db      	uxtb	r3, r3
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	bc80      	pop	{r7}
 8007712:	4770      	bx	lr
 8007714:	38e38e39 	.word	0x38e38e39
 8007718:	51eb851f 	.word	0x51eb851f
 800771c:	24924925 	.word	0x24924925

08007720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e01d      	b.n	800776e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d106      	bne.n	800774c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7fc fefe 	bl	8004548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3304      	adds	r3, #4
 800775c:	4619      	mov	r1, r3
 800775e:	4610      	mov	r0, r2
 8007760:	f000 fa3a 	bl	8007bd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007776:	b480      	push	{r7}
 8007778:	b085      	sub	sp, #20
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f042 0201 	orr.w	r2, r2, #1
 800778c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b06      	cmp	r3, #6
 800779e:	d007      	beq.n	80077b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0201 	orr.w	r2, r2, #1
 80077ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bc80      	pop	{r7}
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0201 	bic.w	r2, r2, #1
 80077d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6a1a      	ldr	r2, [r3, #32]
 80077da:	f241 1311 	movw	r3, #4369	; 0x1111
 80077de:	4013      	ands	r3, r2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10f      	bne.n	8007804 <HAL_TIM_Base_Stop_IT+0x48>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6a1a      	ldr	r2, [r3, #32]
 80077ea:	f240 4344 	movw	r3, #1092	; 0x444
 80077ee:	4013      	ands	r3, r2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d107      	bne.n	8007804 <HAL_TIM_Base_Stop_IT+0x48>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0201 	bic.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr

08007810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b02      	cmp	r3, #2
 8007824:	d122      	bne.n	800786c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b02      	cmp	r3, #2
 8007832:	d11b      	bne.n	800786c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f06f 0202 	mvn.w	r2, #2
 800783c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	f003 0303 	and.w	r3, r3, #3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f9a4 	bl	8007ba0 <HAL_TIM_IC_CaptureCallback>
 8007858:	e005      	b.n	8007866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f997 	bl	8007b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f9a6 	bl	8007bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	f003 0304 	and.w	r3, r3, #4
 8007876:	2b04      	cmp	r3, #4
 8007878:	d122      	bne.n	80078c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b04      	cmp	r3, #4
 8007886:	d11b      	bne.n	80078c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f06f 0204 	mvn.w	r2, #4
 8007890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2202      	movs	r2, #2
 8007896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f97a 	bl	8007ba0 <HAL_TIM_IC_CaptureCallback>
 80078ac:	e005      	b.n	80078ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f96d 	bl	8007b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f97c 	bl	8007bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	f003 0308 	and.w	r3, r3, #8
 80078ca:	2b08      	cmp	r3, #8
 80078cc:	d122      	bne.n	8007914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b08      	cmp	r3, #8
 80078da:	d11b      	bne.n	8007914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0208 	mvn.w	r2, #8
 80078e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2204      	movs	r2, #4
 80078ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f003 0303 	and.w	r3, r3, #3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f950 	bl	8007ba0 <HAL_TIM_IC_CaptureCallback>
 8007900:	e005      	b.n	800790e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f943 	bl	8007b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f952 	bl	8007bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	f003 0310 	and.w	r3, r3, #16
 800791e:	2b10      	cmp	r3, #16
 8007920:	d122      	bne.n	8007968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	f003 0310 	and.w	r3, r3, #16
 800792c:	2b10      	cmp	r3, #16
 800792e:	d11b      	bne.n	8007968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f06f 0210 	mvn.w	r2, #16
 8007938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2208      	movs	r2, #8
 800793e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f926 	bl	8007ba0 <HAL_TIM_IC_CaptureCallback>
 8007954:	e005      	b.n	8007962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f919 	bl	8007b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 f928 	bl	8007bb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b01      	cmp	r3, #1
 8007974:	d10e      	bne.n	8007994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b01      	cmp	r3, #1
 8007982:	d107      	bne.n	8007994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f06f 0201 	mvn.w	r2, #1
 800798c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7fc fb26 	bl	8003fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799e:	2b80      	cmp	r3, #128	; 0x80
 80079a0:	d10e      	bne.n	80079c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ac:	2b80      	cmp	r3, #128	; 0x80
 80079ae:	d107      	bne.n	80079c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fa51 	bl	8007e62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ca:	2b40      	cmp	r3, #64	; 0x40
 80079cc:	d10e      	bne.n	80079ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d8:	2b40      	cmp	r3, #64	; 0x40
 80079da:	d107      	bne.n	80079ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f8ec 	bl	8007bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	d10e      	bne.n	8007a18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f003 0320 	and.w	r3, r3, #32
 8007a04:	2b20      	cmp	r3, #32
 8007a06:	d107      	bne.n	8007a18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0220 	mvn.w	r2, #32
 8007a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa1c 	bl	8007e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_TIM_ConfigClockSource+0x18>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e0a6      	b.n	8007b86 <HAL_TIM_ConfigClockSource+0x166>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b40      	cmp	r3, #64	; 0x40
 8007a6e:	d067      	beq.n	8007b40 <HAL_TIM_ConfigClockSource+0x120>
 8007a70:	2b40      	cmp	r3, #64	; 0x40
 8007a72:	d80b      	bhi.n	8007a8c <HAL_TIM_ConfigClockSource+0x6c>
 8007a74:	2b10      	cmp	r3, #16
 8007a76:	d073      	beq.n	8007b60 <HAL_TIM_ConfigClockSource+0x140>
 8007a78:	2b10      	cmp	r3, #16
 8007a7a:	d802      	bhi.n	8007a82 <HAL_TIM_ConfigClockSource+0x62>
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d06f      	beq.n	8007b60 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007a80:	e078      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	d06c      	beq.n	8007b60 <HAL_TIM_ConfigClockSource+0x140>
 8007a86:	2b30      	cmp	r3, #48	; 0x30
 8007a88:	d06a      	beq.n	8007b60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007a8a:	e073      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007a8c:	2b70      	cmp	r3, #112	; 0x70
 8007a8e:	d00d      	beq.n	8007aac <HAL_TIM_ConfigClockSource+0x8c>
 8007a90:	2b70      	cmp	r3, #112	; 0x70
 8007a92:	d804      	bhi.n	8007a9e <HAL_TIM_ConfigClockSource+0x7e>
 8007a94:	2b50      	cmp	r3, #80	; 0x50
 8007a96:	d033      	beq.n	8007b00 <HAL_TIM_ConfigClockSource+0xe0>
 8007a98:	2b60      	cmp	r3, #96	; 0x60
 8007a9a:	d041      	beq.n	8007b20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007a9c:	e06a      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa2:	d066      	beq.n	8007b72 <HAL_TIM_ConfigClockSource+0x152>
 8007aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa8:	d017      	beq.n	8007ada <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007aaa:	e063      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	6899      	ldr	r1, [r3, #8]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f000 f965 	bl	8007d8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ace:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	609a      	str	r2, [r3, #8]
      break;
 8007ad8:	e04c      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	6899      	ldr	r1, [r3, #8]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f000 f94e 	bl	8007d8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689a      	ldr	r2, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007afc:	609a      	str	r2, [r3, #8]
      break;
 8007afe:	e039      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6818      	ldr	r0, [r3, #0]
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	6859      	ldr	r1, [r3, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	f000 f8c5 	bl	8007c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2150      	movs	r1, #80	; 0x50
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 f91c 	bl	8007d56 <TIM_ITRx_SetConfig>
      break;
 8007b1e:	e029      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	6859      	ldr	r1, [r3, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	f000 f8e3 	bl	8007cf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2160      	movs	r1, #96	; 0x60
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 f90c 	bl	8007d56 <TIM_ITRx_SetConfig>
      break;
 8007b3e:	e019      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6818      	ldr	r0, [r3, #0]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	6859      	ldr	r1, [r3, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f000 f8a5 	bl	8007c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2140      	movs	r1, #64	; 0x40
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 f8fc 	bl	8007d56 <TIM_ITRx_SetConfig>
      break;
 8007b5e:	e009      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	4610      	mov	r0, r2
 8007b6c:	f000 f8f3 	bl	8007d56 <TIM_ITRx_SetConfig>
      break;
 8007b70:	e000      	b.n	8007b74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007b72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bc80      	pop	{r7}
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bc80      	pop	{r7}
 8007bb0:	4770      	bx	lr

08007bb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr
	...

08007bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a29      	ldr	r2, [pc, #164]	; (8007c90 <TIM_Base_SetConfig+0xb8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d00b      	beq.n	8007c08 <TIM_Base_SetConfig+0x30>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf6:	d007      	beq.n	8007c08 <TIM_Base_SetConfig+0x30>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a26      	ldr	r2, [pc, #152]	; (8007c94 <TIM_Base_SetConfig+0xbc>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d003      	beq.n	8007c08 <TIM_Base_SetConfig+0x30>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a25      	ldr	r2, [pc, #148]	; (8007c98 <TIM_Base_SetConfig+0xc0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d108      	bne.n	8007c1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a1c      	ldr	r2, [pc, #112]	; (8007c90 <TIM_Base_SetConfig+0xb8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00b      	beq.n	8007c3a <TIM_Base_SetConfig+0x62>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c28:	d007      	beq.n	8007c3a <TIM_Base_SetConfig+0x62>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a19      	ldr	r2, [pc, #100]	; (8007c94 <TIM_Base_SetConfig+0xbc>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d003      	beq.n	8007c3a <TIM_Base_SetConfig+0x62>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a18      	ldr	r2, [pc, #96]	; (8007c98 <TIM_Base_SetConfig+0xc0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d108      	bne.n	8007c4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a07      	ldr	r2, [pc, #28]	; (8007c90 <TIM_Base_SetConfig+0xb8>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d103      	bne.n	8007c80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	691a      	ldr	r2, [r3, #16]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	615a      	str	r2, [r3, #20]
}
 8007c86:	bf00      	nop
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr
 8007c90:	40012c00 	.word	0x40012c00
 8007c94:	40000400 	.word	0x40000400
 8007c98:	40000800 	.word	0x40000800

08007c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	f023 0201 	bic.w	r2, r3, #1
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f023 030a 	bic.w	r3, r3, #10
 8007cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	f023 0210 	bic.w	r2, r3, #16
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	031b      	lsls	r3, r3, #12
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	621a      	str	r2, [r3, #32]
}
 8007d4c:	bf00      	nop
 8007d4e:	371c      	adds	r7, #28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bc80      	pop	{r7}
 8007d54:	4770      	bx	lr

08007d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	f043 0307 	orr.w	r3, r3, #7
 8007d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	609a      	str	r2, [r3, #8]
}
 8007d80:	bf00      	nop
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bc80      	pop	{r7}
 8007d88:	4770      	bx	lr

08007d8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b087      	sub	sp, #28
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007da4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	021a      	lsls	r2, r3, #8
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	431a      	orrs	r2, r3
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	609a      	str	r2, [r3, #8]
}
 8007dbe:	bf00      	nop
 8007dc0:	371c      	adds	r7, #28
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bc80      	pop	{r7}
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d101      	bne.n	8007de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e032      	b.n	8007e46 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e18:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr

08007e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bc80      	pop	{r7}
 8007e60:	4770      	bx	lr

08007e62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e6a:	bf00      	nop
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr

08007e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e03f      	b.n	8007f06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d106      	bne.n	8007ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7fc fbea 	bl	8004674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2224      	movs	r2, #36	; 0x24
 8007ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f9b1 	bl	8008220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	691a      	ldr	r2, [r3, #16]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	695a      	ldr	r2, [r3, #20]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2220      	movs	r2, #32
 8007ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2220      	movs	r2, #32
 8007f00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b088      	sub	sp, #32
 8007f12:	af02      	add	r7, sp, #8
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	60b9      	str	r1, [r7, #8]
 8007f18:	603b      	str	r3, [r7, #0]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	f040 8083 	bne.w	8008036 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d002      	beq.n	8007f3c <HAL_UART_Transmit+0x2e>
 8007f36:	88fb      	ldrh	r3, [r7, #6]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e07b      	b.n	8008038 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <HAL_UART_Transmit+0x40>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e074      	b.n	8008038 <HAL_UART_Transmit+0x12a>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2221      	movs	r2, #33	; 0x21
 8007f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007f64:	f7fc fccc 	bl	8004900 <HAL_GetTick>
 8007f68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	88fa      	ldrh	r2, [r7, #6]
 8007f6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	88fa      	ldrh	r2, [r7, #6]
 8007f74:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f76:	e042      	b.n	8007ffe <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f8e:	d122      	bne.n	8007fd6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2200      	movs	r2, #0
 8007f98:	2180      	movs	r1, #128	; 0x80
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 f8f6 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e046      	b.n	8008038 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fbc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d103      	bne.n	8007fce <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	3302      	adds	r3, #2
 8007fca:	60bb      	str	r3, [r7, #8]
 8007fcc:	e017      	b.n	8007ffe <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	60bb      	str	r3, [r7, #8]
 8007fd4:	e013      	b.n	8007ffe <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2180      	movs	r1, #128	; 0x80
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 f8d3 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e023      	b.n	8008038 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	60ba      	str	r2, [r7, #8]
 8007ff6:	781a      	ldrb	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008002:	b29b      	uxth	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1b7      	bne.n	8007f78 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2200      	movs	r2, #0
 8008010:	2140      	movs	r1, #64	; 0x40
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f8ba 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e00a      	b.n	8008038 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2220      	movs	r2, #32
 8008026:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	e000      	b.n	8008038 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008036:	2302      	movs	r3, #2
  }
}
 8008038:	4618      	mov	r0, r3
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af02      	add	r7, sp, #8
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	4613      	mov	r3, r2
 800804e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b20      	cmp	r3, #32
 800805e:	f040 8090 	bne.w	8008182 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <HAL_UART_Receive+0x2e>
 8008068:	88fb      	ldrh	r3, [r7, #6]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e088      	b.n	8008184 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008078:	2b01      	cmp	r3, #1
 800807a:	d101      	bne.n	8008080 <HAL_UART_Receive+0x40>
 800807c:	2302      	movs	r3, #2
 800807e:	e081      	b.n	8008184 <HAL_UART_Receive+0x144>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2222      	movs	r2, #34	; 0x22
 8008092:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008096:	f7fc fc33 	bl	8004900 <HAL_GetTick>
 800809a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	88fa      	ldrh	r2, [r7, #6]
 80080a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	88fa      	ldrh	r2, [r7, #6]
 80080a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80080a8:	e05c      	b.n	8008164 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c0:	d12b      	bne.n	800811a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2200      	movs	r2, #0
 80080ca:	2120      	movs	r1, #32
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f85d 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e053      	b.n	8008184 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10c      	bne.n	8008102 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	3302      	adds	r3, #2
 80080fe:	60bb      	str	r3, [r7, #8]
 8008100:	e030      	b.n	8008164 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	b29b      	uxth	r3, r3
 800810a:	b2db      	uxtb	r3, r3
 800810c:	b29a      	uxth	r2, r3
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	3301      	adds	r3, #1
 8008116:	60bb      	str	r3, [r7, #8]
 8008118:	e024      	b.n	8008164 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2200      	movs	r2, #0
 8008122:	2120      	movs	r1, #32
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 f831 	bl	800818c <UART_WaitOnFlagUntilTimeout>
 800812a:	4603      	mov	r3, r0
 800812c:	2b00      	cmp	r3, #0
 800812e:	d001      	beq.n	8008134 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e027      	b.n	8008184 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d108      	bne.n	800814e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6859      	ldr	r1, [r3, #4]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	60ba      	str	r2, [r7, #8]
 8008148:	b2ca      	uxtb	r2, r1
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	e00a      	b.n	8008164 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	b2da      	uxtb	r2, r3
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	1c59      	adds	r1, r3, #1
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008160:	b2d2      	uxtb	r2, r2
 8008162:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008168:	b29b      	uxth	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d19d      	bne.n	80080aa <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	e000      	b.n	8008184 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008182:	2302      	movs	r3, #2
  }
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	4613      	mov	r3, r2
 800819a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800819c:	e02c      	b.n	80081f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a4:	d028      	beq.n	80081f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d007      	beq.n	80081bc <UART_WaitOnFlagUntilTimeout+0x30>
 80081ac:	f7fc fba8 	bl	8004900 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	69ba      	ldr	r2, [r7, #24]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d21d      	bcs.n	80081f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80081ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	695a      	ldr	r2, [r3, #20]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f022 0201 	bic.w	r2, r2, #1
 80081da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2220      	movs	r2, #32
 80081e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e00f      	b.n	8008218 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	4013      	ands	r3, r2
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	429a      	cmp	r2, r3
 8008206:	bf0c      	ite	eq
 8008208:	2301      	moveq	r3, #1
 800820a:	2300      	movne	r3, #0
 800820c:	b2db      	uxtb	r3, r3
 800820e:	461a      	mov	r2, r3
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	429a      	cmp	r2, r3
 8008214:	d0c3      	beq.n	800819e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	431a      	orrs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	4313      	orrs	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800825a:	f023 030c 	bic.w	r3, r3, #12
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	6812      	ldr	r2, [r2, #0]
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	430b      	orrs	r3, r1
 8008266:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a52      	ldr	r2, [pc, #328]	; (80083cc <UART_SetConfig+0x1ac>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d14e      	bne.n	8008326 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008288:	f7fe fd18 	bl	8006cbc <HAL_RCC_GetPCLK2Freq>
 800828c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	009a      	lsls	r2, r3, #2
 8008298:	441a      	add	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a4:	4a4a      	ldr	r2, [pc, #296]	; (80083d0 <UART_SetConfig+0x1b0>)
 80082a6:	fba2 2303 	umull	r2, r3, r2, r3
 80082aa:	095b      	lsrs	r3, r3, #5
 80082ac:	0119      	lsls	r1, r3, #4
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	009a      	lsls	r2, r3, #2
 80082b8:	441a      	add	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80082c4:	4b42      	ldr	r3, [pc, #264]	; (80083d0 <UART_SetConfig+0x1b0>)
 80082c6:	fba3 0302 	umull	r0, r3, r3, r2
 80082ca:	095b      	lsrs	r3, r3, #5
 80082cc:	2064      	movs	r0, #100	; 0x64
 80082ce:	fb00 f303 	mul.w	r3, r0, r3
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	3332      	adds	r3, #50	; 0x32
 80082d8:	4a3d      	ldr	r2, [pc, #244]	; (80083d0 <UART_SetConfig+0x1b0>)
 80082da:	fba2 2303 	umull	r2, r3, r2, r3
 80082de:	095b      	lsrs	r3, r3, #5
 80082e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082e4:	4419      	add	r1, r3
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	4613      	mov	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	009a      	lsls	r2, r3, #2
 80082f0:	441a      	add	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80082fc:	4b34      	ldr	r3, [pc, #208]	; (80083d0 <UART_SetConfig+0x1b0>)
 80082fe:	fba3 0302 	umull	r0, r3, r3, r2
 8008302:	095b      	lsrs	r3, r3, #5
 8008304:	2064      	movs	r0, #100	; 0x64
 8008306:	fb00 f303 	mul.w	r3, r0, r3
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	3332      	adds	r3, #50	; 0x32
 8008310:	4a2f      	ldr	r2, [pc, #188]	; (80083d0 <UART_SetConfig+0x1b0>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	095b      	lsrs	r3, r3, #5
 8008318:	f003 020f 	and.w	r2, r3, #15
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	440a      	add	r2, r1
 8008322:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8008324:	e04d      	b.n	80083c2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8008326:	f7fe fcb5 	bl	8006c94 <HAL_RCC_GetPCLK1Freq>
 800832a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009a      	lsls	r2, r3, #2
 8008336:	441a      	add	r2, r3
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008342:	4a23      	ldr	r2, [pc, #140]	; (80083d0 <UART_SetConfig+0x1b0>)
 8008344:	fba2 2303 	umull	r2, r3, r2, r3
 8008348:	095b      	lsrs	r3, r3, #5
 800834a:	0119      	lsls	r1, r3, #4
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	4613      	mov	r3, r2
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	009a      	lsls	r2, r3, #2
 8008356:	441a      	add	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008362:	4b1b      	ldr	r3, [pc, #108]	; (80083d0 <UART_SetConfig+0x1b0>)
 8008364:	fba3 0302 	umull	r0, r3, r3, r2
 8008368:	095b      	lsrs	r3, r3, #5
 800836a:	2064      	movs	r0, #100	; 0x64
 800836c:	fb00 f303 	mul.w	r3, r0, r3
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	011b      	lsls	r3, r3, #4
 8008374:	3332      	adds	r3, #50	; 0x32
 8008376:	4a16      	ldr	r2, [pc, #88]	; (80083d0 <UART_SetConfig+0x1b0>)
 8008378:	fba2 2303 	umull	r2, r3, r2, r3
 800837c:	095b      	lsrs	r3, r3, #5
 800837e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008382:	4419      	add	r1, r3
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	4613      	mov	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	009a      	lsls	r2, r3, #2
 800838e:	441a      	add	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	fbb2 f2f3 	udiv	r2, r2, r3
 800839a:	4b0d      	ldr	r3, [pc, #52]	; (80083d0 <UART_SetConfig+0x1b0>)
 800839c:	fba3 0302 	umull	r0, r3, r3, r2
 80083a0:	095b      	lsrs	r3, r3, #5
 80083a2:	2064      	movs	r0, #100	; 0x64
 80083a4:	fb00 f303 	mul.w	r3, r0, r3
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	3332      	adds	r3, #50	; 0x32
 80083ae:	4a08      	ldr	r2, [pc, #32]	; (80083d0 <UART_SetConfig+0x1b0>)
 80083b0:	fba2 2303 	umull	r2, r3, r2, r3
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	f003 020f 	and.w	r2, r3, #15
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	440a      	add	r2, r1
 80083c0:	609a      	str	r2, [r3, #8]
}
 80083c2:	bf00      	nop
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	40013800 	.word	0x40013800
 80083d0:	51eb851f 	.word	0x51eb851f

080083d4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80083d4:	b084      	sub	sp, #16
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	f107 0014 	add.w	r0, r7, #20
 80083e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bc80      	pop	{r7}
 80083f0:	b004      	add	sp, #16
 80083f2:	4770      	bx	lr

080083f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80083fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008400:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008408:	b29a      	uxth	r2, r3
 800840a:	89fb      	ldrh	r3, [r7, #14]
 800840c:	4313      	orrs	r3, r2
 800840e:	b29a      	uxth	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr

08008422 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800842a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800842e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008436:	b29b      	uxth	r3, r3
 8008438:	b21a      	sxth	r2, r3
 800843a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800843e:	43db      	mvns	r3, r3
 8008440:	b21b      	sxth	r3, r3
 8008442:	4013      	ands	r3, r2
 8008444:	b21b      	sxth	r3, r3
 8008446:	b29a      	uxth	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	bc80      	pop	{r7}
 8008458:	4770      	bx	lr

0800845a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	bc80      	pop	{r7}
 8008470:	4770      	bx	lr

08008472 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008472:	b084      	sub	sp, #16
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	f107 0014 	add.w	r0, r7, #20
 8008480:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7ff ffa5 	bl	80083f4 <USB_EnableGlobalInt>

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084b6:	b004      	add	sp, #16
 80084b8:	4770      	bx	lr

080084ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bc80      	pop	{r7}
 80084cc:	4770      	bx	lr

080084ce <atoi>:
 80084ce:	220a      	movs	r2, #10
 80084d0:	2100      	movs	r1, #0
 80084d2:	f000 bdaf 	b.w	8009034 <strtol>
	...

080084d8 <__errno>:
 80084d8:	4b01      	ldr	r3, [pc, #4]	; (80084e0 <__errno+0x8>)
 80084da:	6818      	ldr	r0, [r3, #0]
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	20000038 	.word	0x20000038

080084e4 <__libc_init_array>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	2500      	movs	r5, #0
 80084e8:	4e0c      	ldr	r6, [pc, #48]	; (800851c <__libc_init_array+0x38>)
 80084ea:	4c0d      	ldr	r4, [pc, #52]	; (8008520 <__libc_init_array+0x3c>)
 80084ec:	1ba4      	subs	r4, r4, r6
 80084ee:	10a4      	asrs	r4, r4, #2
 80084f0:	42a5      	cmp	r5, r4
 80084f2:	d109      	bne.n	8008508 <__libc_init_array+0x24>
 80084f4:	f002 fe44 	bl	800b180 <_init>
 80084f8:	2500      	movs	r5, #0
 80084fa:	4e0a      	ldr	r6, [pc, #40]	; (8008524 <__libc_init_array+0x40>)
 80084fc:	4c0a      	ldr	r4, [pc, #40]	; (8008528 <__libc_init_array+0x44>)
 80084fe:	1ba4      	subs	r4, r4, r6
 8008500:	10a4      	asrs	r4, r4, #2
 8008502:	42a5      	cmp	r5, r4
 8008504:	d105      	bne.n	8008512 <__libc_init_array+0x2e>
 8008506:	bd70      	pop	{r4, r5, r6, pc}
 8008508:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800850c:	4798      	blx	r3
 800850e:	3501      	adds	r5, #1
 8008510:	e7ee      	b.n	80084f0 <__libc_init_array+0xc>
 8008512:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008516:	4798      	blx	r3
 8008518:	3501      	adds	r5, #1
 800851a:	e7f2      	b.n	8008502 <__libc_init_array+0x1e>
 800851c:	0800b8b8 	.word	0x0800b8b8
 8008520:	0800b8b8 	.word	0x0800b8b8
 8008524:	0800b8b8 	.word	0x0800b8b8
 8008528:	0800b8bc 	.word	0x0800b8bc

0800852c <memset>:
 800852c:	4603      	mov	r3, r0
 800852e:	4402      	add	r2, r0
 8008530:	4293      	cmp	r3, r2
 8008532:	d100      	bne.n	8008536 <memset+0xa>
 8008534:	4770      	bx	lr
 8008536:	f803 1b01 	strb.w	r1, [r3], #1
 800853a:	e7f9      	b.n	8008530 <memset+0x4>

0800853c <__cvt>:
 800853c:	2b00      	cmp	r3, #0
 800853e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008542:	461e      	mov	r6, r3
 8008544:	bfbb      	ittet	lt
 8008546:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800854a:	461e      	movlt	r6, r3
 800854c:	2300      	movge	r3, #0
 800854e:	232d      	movlt	r3, #45	; 0x2d
 8008550:	b088      	sub	sp, #32
 8008552:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008554:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8008558:	f027 0720 	bic.w	r7, r7, #32
 800855c:	2f46      	cmp	r7, #70	; 0x46
 800855e:	4614      	mov	r4, r2
 8008560:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008562:	700b      	strb	r3, [r1, #0]
 8008564:	d004      	beq.n	8008570 <__cvt+0x34>
 8008566:	2f45      	cmp	r7, #69	; 0x45
 8008568:	d100      	bne.n	800856c <__cvt+0x30>
 800856a:	3501      	adds	r5, #1
 800856c:	2302      	movs	r3, #2
 800856e:	e000      	b.n	8008572 <__cvt+0x36>
 8008570:	2303      	movs	r3, #3
 8008572:	aa07      	add	r2, sp, #28
 8008574:	9204      	str	r2, [sp, #16]
 8008576:	aa06      	add	r2, sp, #24
 8008578:	e9cd a202 	strd	sl, r2, [sp, #8]
 800857c:	e9cd 3500 	strd	r3, r5, [sp]
 8008580:	4622      	mov	r2, r4
 8008582:	4633      	mov	r3, r6
 8008584:	f000 febc 	bl	8009300 <_dtoa_r>
 8008588:	2f47      	cmp	r7, #71	; 0x47
 800858a:	4680      	mov	r8, r0
 800858c:	d102      	bne.n	8008594 <__cvt+0x58>
 800858e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008590:	07db      	lsls	r3, r3, #31
 8008592:	d526      	bpl.n	80085e2 <__cvt+0xa6>
 8008594:	2f46      	cmp	r7, #70	; 0x46
 8008596:	eb08 0905 	add.w	r9, r8, r5
 800859a:	d111      	bne.n	80085c0 <__cvt+0x84>
 800859c:	f898 3000 	ldrb.w	r3, [r8]
 80085a0:	2b30      	cmp	r3, #48	; 0x30
 80085a2:	d10a      	bne.n	80085ba <__cvt+0x7e>
 80085a4:	2200      	movs	r2, #0
 80085a6:	2300      	movs	r3, #0
 80085a8:	4620      	mov	r0, r4
 80085aa:	4631      	mov	r1, r6
 80085ac:	f7f8 f9fc 	bl	80009a8 <__aeabi_dcmpeq>
 80085b0:	b918      	cbnz	r0, 80085ba <__cvt+0x7e>
 80085b2:	f1c5 0501 	rsb	r5, r5, #1
 80085b6:	f8ca 5000 	str.w	r5, [sl]
 80085ba:	f8da 3000 	ldr.w	r3, [sl]
 80085be:	4499      	add	r9, r3
 80085c0:	2200      	movs	r2, #0
 80085c2:	2300      	movs	r3, #0
 80085c4:	4620      	mov	r0, r4
 80085c6:	4631      	mov	r1, r6
 80085c8:	f7f8 f9ee 	bl	80009a8 <__aeabi_dcmpeq>
 80085cc:	b938      	cbnz	r0, 80085de <__cvt+0xa2>
 80085ce:	2230      	movs	r2, #48	; 0x30
 80085d0:	9b07      	ldr	r3, [sp, #28]
 80085d2:	454b      	cmp	r3, r9
 80085d4:	d205      	bcs.n	80085e2 <__cvt+0xa6>
 80085d6:	1c59      	adds	r1, r3, #1
 80085d8:	9107      	str	r1, [sp, #28]
 80085da:	701a      	strb	r2, [r3, #0]
 80085dc:	e7f8      	b.n	80085d0 <__cvt+0x94>
 80085de:	f8cd 901c 	str.w	r9, [sp, #28]
 80085e2:	4640      	mov	r0, r8
 80085e4:	9b07      	ldr	r3, [sp, #28]
 80085e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80085e8:	eba3 0308 	sub.w	r3, r3, r8
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	b008      	add	sp, #32
 80085f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080085f4 <__exponent>:
 80085f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085f6:	2900      	cmp	r1, #0
 80085f8:	bfb4      	ite	lt
 80085fa:	232d      	movlt	r3, #45	; 0x2d
 80085fc:	232b      	movge	r3, #43	; 0x2b
 80085fe:	4604      	mov	r4, r0
 8008600:	bfb8      	it	lt
 8008602:	4249      	neglt	r1, r1
 8008604:	2909      	cmp	r1, #9
 8008606:	f804 2b02 	strb.w	r2, [r4], #2
 800860a:	7043      	strb	r3, [r0, #1]
 800860c:	dd21      	ble.n	8008652 <__exponent+0x5e>
 800860e:	f10d 0307 	add.w	r3, sp, #7
 8008612:	461f      	mov	r7, r3
 8008614:	260a      	movs	r6, #10
 8008616:	fb91 f5f6 	sdiv	r5, r1, r6
 800861a:	fb06 1115 	mls	r1, r6, r5, r1
 800861e:	2d09      	cmp	r5, #9
 8008620:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008624:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008628:	f103 32ff 	add.w	r2, r3, #4294967295
 800862c:	4629      	mov	r1, r5
 800862e:	dc09      	bgt.n	8008644 <__exponent+0x50>
 8008630:	3130      	adds	r1, #48	; 0x30
 8008632:	3b02      	subs	r3, #2
 8008634:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008638:	42bb      	cmp	r3, r7
 800863a:	4622      	mov	r2, r4
 800863c:	d304      	bcc.n	8008648 <__exponent+0x54>
 800863e:	1a10      	subs	r0, r2, r0
 8008640:	b003      	add	sp, #12
 8008642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008644:	4613      	mov	r3, r2
 8008646:	e7e6      	b.n	8008616 <__exponent+0x22>
 8008648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800864c:	f804 2b01 	strb.w	r2, [r4], #1
 8008650:	e7f2      	b.n	8008638 <__exponent+0x44>
 8008652:	2330      	movs	r3, #48	; 0x30
 8008654:	4419      	add	r1, r3
 8008656:	7083      	strb	r3, [r0, #2]
 8008658:	1d02      	adds	r2, r0, #4
 800865a:	70c1      	strb	r1, [r0, #3]
 800865c:	e7ef      	b.n	800863e <__exponent+0x4a>
	...

08008660 <_printf_float>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	b091      	sub	sp, #68	; 0x44
 8008666:	460c      	mov	r4, r1
 8008668:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800866a:	4693      	mov	fp, r2
 800866c:	461e      	mov	r6, r3
 800866e:	4605      	mov	r5, r0
 8008670:	f001 fd78 	bl	800a164 <_localeconv_r>
 8008674:	6803      	ldr	r3, [r0, #0]
 8008676:	4618      	mov	r0, r3
 8008678:	9309      	str	r3, [sp, #36]	; 0x24
 800867a:	f7f7 fd69 	bl	8000150 <strlen>
 800867e:	2300      	movs	r3, #0
 8008680:	930e      	str	r3, [sp, #56]	; 0x38
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	900a      	str	r0, [sp, #40]	; 0x28
 8008686:	3307      	adds	r3, #7
 8008688:	f023 0307 	bic.w	r3, r3, #7
 800868c:	f103 0208 	add.w	r2, r3, #8
 8008690:	f894 8018 	ldrb.w	r8, [r4, #24]
 8008694:	f8d4 a000 	ldr.w	sl, [r4]
 8008698:	603a      	str	r2, [r7, #0]
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086a2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80086a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80086ac:	f04f 32ff 	mov.w	r2, #4294967295
 80086b0:	4ba6      	ldr	r3, [pc, #664]	; (800894c <_printf_float+0x2ec>)
 80086b2:	4638      	mov	r0, r7
 80086b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086b6:	f7f8 f9a9 	bl	8000a0c <__aeabi_dcmpun>
 80086ba:	bb68      	cbnz	r0, 8008718 <_printf_float+0xb8>
 80086bc:	f04f 32ff 	mov.w	r2, #4294967295
 80086c0:	4ba2      	ldr	r3, [pc, #648]	; (800894c <_printf_float+0x2ec>)
 80086c2:	4638      	mov	r0, r7
 80086c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086c6:	f7f8 f983 	bl	80009d0 <__aeabi_dcmple>
 80086ca:	bb28      	cbnz	r0, 8008718 <_printf_float+0xb8>
 80086cc:	2200      	movs	r2, #0
 80086ce:	2300      	movs	r3, #0
 80086d0:	4638      	mov	r0, r7
 80086d2:	4649      	mov	r1, r9
 80086d4:	f7f8 f972 	bl	80009bc <__aeabi_dcmplt>
 80086d8:	b110      	cbz	r0, 80086e0 <_printf_float+0x80>
 80086da:	232d      	movs	r3, #45	; 0x2d
 80086dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e0:	4f9b      	ldr	r7, [pc, #620]	; (8008950 <_printf_float+0x2f0>)
 80086e2:	4b9c      	ldr	r3, [pc, #624]	; (8008954 <_printf_float+0x2f4>)
 80086e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086e8:	bf98      	it	ls
 80086ea:	461f      	movls	r7, r3
 80086ec:	2303      	movs	r3, #3
 80086ee:	f04f 0900 	mov.w	r9, #0
 80086f2:	6123      	str	r3, [r4, #16]
 80086f4:	f02a 0304 	bic.w	r3, sl, #4
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	9600      	str	r6, [sp, #0]
 80086fc:	465b      	mov	r3, fp
 80086fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8008700:	4621      	mov	r1, r4
 8008702:	4628      	mov	r0, r5
 8008704:	f000 f9e2 	bl	8008acc <_printf_common>
 8008708:	3001      	adds	r0, #1
 800870a:	f040 8090 	bne.w	800882e <_printf_float+0x1ce>
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	b011      	add	sp, #68	; 0x44
 8008714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008718:	463a      	mov	r2, r7
 800871a:	464b      	mov	r3, r9
 800871c:	4638      	mov	r0, r7
 800871e:	4649      	mov	r1, r9
 8008720:	f7f8 f974 	bl	8000a0c <__aeabi_dcmpun>
 8008724:	b110      	cbz	r0, 800872c <_printf_float+0xcc>
 8008726:	4f8c      	ldr	r7, [pc, #560]	; (8008958 <_printf_float+0x2f8>)
 8008728:	4b8c      	ldr	r3, [pc, #560]	; (800895c <_printf_float+0x2fc>)
 800872a:	e7db      	b.n	80086e4 <_printf_float+0x84>
 800872c:	6863      	ldr	r3, [r4, #4]
 800872e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8008732:	1c59      	adds	r1, r3, #1
 8008734:	a80d      	add	r0, sp, #52	; 0x34
 8008736:	a90e      	add	r1, sp, #56	; 0x38
 8008738:	d140      	bne.n	80087bc <_printf_float+0x15c>
 800873a:	2306      	movs	r3, #6
 800873c:	6063      	str	r3, [r4, #4]
 800873e:	f04f 0c00 	mov.w	ip, #0
 8008742:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8008746:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800874a:	6863      	ldr	r3, [r4, #4]
 800874c:	6022      	str	r2, [r4, #0]
 800874e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	463a      	mov	r2, r7
 8008756:	464b      	mov	r3, r9
 8008758:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800875c:	4628      	mov	r0, r5
 800875e:	f7ff feed 	bl	800853c <__cvt>
 8008762:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8008766:	2b47      	cmp	r3, #71	; 0x47
 8008768:	4607      	mov	r7, r0
 800876a:	d109      	bne.n	8008780 <_printf_float+0x120>
 800876c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800876e:	1cd8      	adds	r0, r3, #3
 8008770:	db02      	blt.n	8008778 <_printf_float+0x118>
 8008772:	6862      	ldr	r2, [r4, #4]
 8008774:	4293      	cmp	r3, r2
 8008776:	dd47      	ble.n	8008808 <_printf_float+0x1a8>
 8008778:	f1a8 0802 	sub.w	r8, r8, #2
 800877c:	fa5f f888 	uxtb.w	r8, r8
 8008780:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008784:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008786:	d824      	bhi.n	80087d2 <_printf_float+0x172>
 8008788:	3901      	subs	r1, #1
 800878a:	4642      	mov	r2, r8
 800878c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008790:	910d      	str	r1, [sp, #52]	; 0x34
 8008792:	f7ff ff2f 	bl	80085f4 <__exponent>
 8008796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008798:	4681      	mov	r9, r0
 800879a:	1813      	adds	r3, r2, r0
 800879c:	2a01      	cmp	r2, #1
 800879e:	6123      	str	r3, [r4, #16]
 80087a0:	dc02      	bgt.n	80087a8 <_printf_float+0x148>
 80087a2:	6822      	ldr	r2, [r4, #0]
 80087a4:	07d1      	lsls	r1, r2, #31
 80087a6:	d501      	bpl.n	80087ac <_printf_float+0x14c>
 80087a8:	3301      	adds	r3, #1
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d0a2      	beq.n	80086fa <_printf_float+0x9a>
 80087b4:	232d      	movs	r3, #45	; 0x2d
 80087b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ba:	e79e      	b.n	80086fa <_printf_float+0x9a>
 80087bc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80087c0:	f000 816e 	beq.w	8008aa0 <_printf_float+0x440>
 80087c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087c8:	d1b9      	bne.n	800873e <_printf_float+0xde>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1b7      	bne.n	800873e <_printf_float+0xde>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e7b4      	b.n	800873c <_printf_float+0xdc>
 80087d2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80087d6:	d119      	bne.n	800880c <_printf_float+0x1ac>
 80087d8:	2900      	cmp	r1, #0
 80087da:	6863      	ldr	r3, [r4, #4]
 80087dc:	dd0c      	ble.n	80087f8 <_printf_float+0x198>
 80087de:	6121      	str	r1, [r4, #16]
 80087e0:	b913      	cbnz	r3, 80087e8 <_printf_float+0x188>
 80087e2:	6822      	ldr	r2, [r4, #0]
 80087e4:	07d2      	lsls	r2, r2, #31
 80087e6:	d502      	bpl.n	80087ee <_printf_float+0x18e>
 80087e8:	3301      	adds	r3, #1
 80087ea:	440b      	add	r3, r1
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087f0:	f04f 0900 	mov.w	r9, #0
 80087f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80087f6:	e7d9      	b.n	80087ac <_printf_float+0x14c>
 80087f8:	b913      	cbnz	r3, 8008800 <_printf_float+0x1a0>
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	07d0      	lsls	r0, r2, #31
 80087fe:	d501      	bpl.n	8008804 <_printf_float+0x1a4>
 8008800:	3302      	adds	r3, #2
 8008802:	e7f3      	b.n	80087ec <_printf_float+0x18c>
 8008804:	2301      	movs	r3, #1
 8008806:	e7f1      	b.n	80087ec <_printf_float+0x18c>
 8008808:	f04f 0867 	mov.w	r8, #103	; 0x67
 800880c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008810:	4293      	cmp	r3, r2
 8008812:	db05      	blt.n	8008820 <_printf_float+0x1c0>
 8008814:	6822      	ldr	r2, [r4, #0]
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	07d1      	lsls	r1, r2, #31
 800881a:	d5e8      	bpl.n	80087ee <_printf_float+0x18e>
 800881c:	3301      	adds	r3, #1
 800881e:	e7e5      	b.n	80087ec <_printf_float+0x18c>
 8008820:	2b00      	cmp	r3, #0
 8008822:	bfcc      	ite	gt
 8008824:	2301      	movgt	r3, #1
 8008826:	f1c3 0302 	rsble	r3, r3, #2
 800882a:	4413      	add	r3, r2
 800882c:	e7de      	b.n	80087ec <_printf_float+0x18c>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	055a      	lsls	r2, r3, #21
 8008832:	d407      	bmi.n	8008844 <_printf_float+0x1e4>
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	463a      	mov	r2, r7
 8008838:	4659      	mov	r1, fp
 800883a:	4628      	mov	r0, r5
 800883c:	47b0      	blx	r6
 800883e:	3001      	adds	r0, #1
 8008840:	d129      	bne.n	8008896 <_printf_float+0x236>
 8008842:	e764      	b.n	800870e <_printf_float+0xae>
 8008844:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8008848:	f240 80d7 	bls.w	80089fa <_printf_float+0x39a>
 800884c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008850:	2200      	movs	r2, #0
 8008852:	2300      	movs	r3, #0
 8008854:	f7f8 f8a8 	bl	80009a8 <__aeabi_dcmpeq>
 8008858:	b388      	cbz	r0, 80088be <_printf_float+0x25e>
 800885a:	2301      	movs	r3, #1
 800885c:	4a40      	ldr	r2, [pc, #256]	; (8008960 <_printf_float+0x300>)
 800885e:	4659      	mov	r1, fp
 8008860:	4628      	mov	r0, r5
 8008862:	47b0      	blx	r6
 8008864:	3001      	adds	r0, #1
 8008866:	f43f af52 	beq.w	800870e <_printf_float+0xae>
 800886a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800886e:	429a      	cmp	r2, r3
 8008870:	db02      	blt.n	8008878 <_printf_float+0x218>
 8008872:	6823      	ldr	r3, [r4, #0]
 8008874:	07d8      	lsls	r0, r3, #31
 8008876:	d50e      	bpl.n	8008896 <_printf_float+0x236>
 8008878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800887c:	4659      	mov	r1, fp
 800887e:	4628      	mov	r0, r5
 8008880:	47b0      	blx	r6
 8008882:	3001      	adds	r0, #1
 8008884:	f43f af43 	beq.w	800870e <_printf_float+0xae>
 8008888:	2700      	movs	r7, #0
 800888a:	f104 081a 	add.w	r8, r4, #26
 800888e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008890:	3b01      	subs	r3, #1
 8008892:	42bb      	cmp	r3, r7
 8008894:	dc09      	bgt.n	80088aa <_printf_float+0x24a>
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	079f      	lsls	r7, r3, #30
 800889a:	f100 80fd 	bmi.w	8008a98 <_printf_float+0x438>
 800889e:	68e0      	ldr	r0, [r4, #12]
 80088a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088a2:	4298      	cmp	r0, r3
 80088a4:	bfb8      	it	lt
 80088a6:	4618      	movlt	r0, r3
 80088a8:	e733      	b.n	8008712 <_printf_float+0xb2>
 80088aa:	2301      	movs	r3, #1
 80088ac:	4642      	mov	r2, r8
 80088ae:	4659      	mov	r1, fp
 80088b0:	4628      	mov	r0, r5
 80088b2:	47b0      	blx	r6
 80088b4:	3001      	adds	r0, #1
 80088b6:	f43f af2a 	beq.w	800870e <_printf_float+0xae>
 80088ba:	3701      	adds	r7, #1
 80088bc:	e7e7      	b.n	800888e <_printf_float+0x22e>
 80088be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	dc2b      	bgt.n	800891c <_printf_float+0x2bc>
 80088c4:	2301      	movs	r3, #1
 80088c6:	4a26      	ldr	r2, [pc, #152]	; (8008960 <_printf_float+0x300>)
 80088c8:	4659      	mov	r1, fp
 80088ca:	4628      	mov	r0, r5
 80088cc:	47b0      	blx	r6
 80088ce:	3001      	adds	r0, #1
 80088d0:	f43f af1d 	beq.w	800870e <_printf_float+0xae>
 80088d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088d6:	b923      	cbnz	r3, 80088e2 <_printf_float+0x282>
 80088d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088da:	b913      	cbnz	r3, 80088e2 <_printf_float+0x282>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	07d9      	lsls	r1, r3, #31
 80088e0:	d5d9      	bpl.n	8008896 <_printf_float+0x236>
 80088e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088e6:	4659      	mov	r1, fp
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b0      	blx	r6
 80088ec:	3001      	adds	r0, #1
 80088ee:	f43f af0e 	beq.w	800870e <_printf_float+0xae>
 80088f2:	f04f 0800 	mov.w	r8, #0
 80088f6:	f104 091a 	add.w	r9, r4, #26
 80088fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088fc:	425b      	negs	r3, r3
 80088fe:	4543      	cmp	r3, r8
 8008900:	dc01      	bgt.n	8008906 <_printf_float+0x2a6>
 8008902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008904:	e797      	b.n	8008836 <_printf_float+0x1d6>
 8008906:	2301      	movs	r3, #1
 8008908:	464a      	mov	r2, r9
 800890a:	4659      	mov	r1, fp
 800890c:	4628      	mov	r0, r5
 800890e:	47b0      	blx	r6
 8008910:	3001      	adds	r0, #1
 8008912:	f43f aefc 	beq.w	800870e <_printf_float+0xae>
 8008916:	f108 0801 	add.w	r8, r8, #1
 800891a:	e7ee      	b.n	80088fa <_printf_float+0x29a>
 800891c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800891e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008920:	429a      	cmp	r2, r3
 8008922:	bfa8      	it	ge
 8008924:	461a      	movge	r2, r3
 8008926:	2a00      	cmp	r2, #0
 8008928:	4690      	mov	r8, r2
 800892a:	dd07      	ble.n	800893c <_printf_float+0x2dc>
 800892c:	4613      	mov	r3, r2
 800892e:	4659      	mov	r1, fp
 8008930:	463a      	mov	r2, r7
 8008932:	4628      	mov	r0, r5
 8008934:	47b0      	blx	r6
 8008936:	3001      	adds	r0, #1
 8008938:	f43f aee9 	beq.w	800870e <_printf_float+0xae>
 800893c:	f104 031a 	add.w	r3, r4, #26
 8008940:	f04f 0a00 	mov.w	sl, #0
 8008944:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008948:	930b      	str	r3, [sp, #44]	; 0x2c
 800894a:	e015      	b.n	8008978 <_printf_float+0x318>
 800894c:	7fefffff 	.word	0x7fefffff
 8008950:	0800b5fc 	.word	0x0800b5fc
 8008954:	0800b5f8 	.word	0x0800b5f8
 8008958:	0800b604 	.word	0x0800b604
 800895c:	0800b600 	.word	0x0800b600
 8008960:	0800b608 	.word	0x0800b608
 8008964:	2301      	movs	r3, #1
 8008966:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008968:	4659      	mov	r1, fp
 800896a:	4628      	mov	r0, r5
 800896c:	47b0      	blx	r6
 800896e:	3001      	adds	r0, #1
 8008970:	f43f aecd 	beq.w	800870e <_printf_float+0xae>
 8008974:	f10a 0a01 	add.w	sl, sl, #1
 8008978:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800897c:	eba9 0308 	sub.w	r3, r9, r8
 8008980:	4553      	cmp	r3, sl
 8008982:	dcef      	bgt.n	8008964 <_printf_float+0x304>
 8008984:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008988:	429a      	cmp	r2, r3
 800898a:	444f      	add	r7, r9
 800898c:	db14      	blt.n	80089b8 <_printf_float+0x358>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	07da      	lsls	r2, r3, #31
 8008992:	d411      	bmi.n	80089b8 <_printf_float+0x358>
 8008994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008996:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008998:	eba3 0209 	sub.w	r2, r3, r9
 800899c:	eba3 0901 	sub.w	r9, r3, r1
 80089a0:	4591      	cmp	r9, r2
 80089a2:	bfa8      	it	ge
 80089a4:	4691      	movge	r9, r2
 80089a6:	f1b9 0f00 	cmp.w	r9, #0
 80089aa:	dc0d      	bgt.n	80089c8 <_printf_float+0x368>
 80089ac:	2700      	movs	r7, #0
 80089ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089b2:	f104 081a 	add.w	r8, r4, #26
 80089b6:	e018      	b.n	80089ea <_printf_float+0x38a>
 80089b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089bc:	4659      	mov	r1, fp
 80089be:	4628      	mov	r0, r5
 80089c0:	47b0      	blx	r6
 80089c2:	3001      	adds	r0, #1
 80089c4:	d1e6      	bne.n	8008994 <_printf_float+0x334>
 80089c6:	e6a2      	b.n	800870e <_printf_float+0xae>
 80089c8:	464b      	mov	r3, r9
 80089ca:	463a      	mov	r2, r7
 80089cc:	4659      	mov	r1, fp
 80089ce:	4628      	mov	r0, r5
 80089d0:	47b0      	blx	r6
 80089d2:	3001      	adds	r0, #1
 80089d4:	d1ea      	bne.n	80089ac <_printf_float+0x34c>
 80089d6:	e69a      	b.n	800870e <_printf_float+0xae>
 80089d8:	2301      	movs	r3, #1
 80089da:	4642      	mov	r2, r8
 80089dc:	4659      	mov	r1, fp
 80089de:	4628      	mov	r0, r5
 80089e0:	47b0      	blx	r6
 80089e2:	3001      	adds	r0, #1
 80089e4:	f43f ae93 	beq.w	800870e <_printf_float+0xae>
 80089e8:	3701      	adds	r7, #1
 80089ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80089ee:	1a9b      	subs	r3, r3, r2
 80089f0:	eba3 0309 	sub.w	r3, r3, r9
 80089f4:	42bb      	cmp	r3, r7
 80089f6:	dcef      	bgt.n	80089d8 <_printf_float+0x378>
 80089f8:	e74d      	b.n	8008896 <_printf_float+0x236>
 80089fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089fc:	2a01      	cmp	r2, #1
 80089fe:	dc01      	bgt.n	8008a04 <_printf_float+0x3a4>
 8008a00:	07db      	lsls	r3, r3, #31
 8008a02:	d538      	bpl.n	8008a76 <_printf_float+0x416>
 8008a04:	2301      	movs	r3, #1
 8008a06:	463a      	mov	r2, r7
 8008a08:	4659      	mov	r1, fp
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	47b0      	blx	r6
 8008a0e:	3001      	adds	r0, #1
 8008a10:	f43f ae7d 	beq.w	800870e <_printf_float+0xae>
 8008a14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a18:	4659      	mov	r1, fp
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b0      	blx	r6
 8008a1e:	3001      	adds	r0, #1
 8008a20:	f107 0701 	add.w	r7, r7, #1
 8008a24:	f43f ae73 	beq.w	800870e <_printf_float+0xae>
 8008a28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f103 38ff 	add.w	r8, r3, #4294967295
 8008a34:	2300      	movs	r3, #0
 8008a36:	f7f7 ffb7 	bl	80009a8 <__aeabi_dcmpeq>
 8008a3a:	b9c0      	cbnz	r0, 8008a6e <_printf_float+0x40e>
 8008a3c:	4643      	mov	r3, r8
 8008a3e:	463a      	mov	r2, r7
 8008a40:	4659      	mov	r1, fp
 8008a42:	4628      	mov	r0, r5
 8008a44:	47b0      	blx	r6
 8008a46:	3001      	adds	r0, #1
 8008a48:	d10d      	bne.n	8008a66 <_printf_float+0x406>
 8008a4a:	e660      	b.n	800870e <_printf_float+0xae>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4642      	mov	r2, r8
 8008a50:	4659      	mov	r1, fp
 8008a52:	4628      	mov	r0, r5
 8008a54:	47b0      	blx	r6
 8008a56:	3001      	adds	r0, #1
 8008a58:	f43f ae59 	beq.w	800870e <_printf_float+0xae>
 8008a5c:	3701      	adds	r7, #1
 8008a5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a60:	3b01      	subs	r3, #1
 8008a62:	42bb      	cmp	r3, r7
 8008a64:	dcf2      	bgt.n	8008a4c <_printf_float+0x3ec>
 8008a66:	464b      	mov	r3, r9
 8008a68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a6c:	e6e4      	b.n	8008838 <_printf_float+0x1d8>
 8008a6e:	2700      	movs	r7, #0
 8008a70:	f104 081a 	add.w	r8, r4, #26
 8008a74:	e7f3      	b.n	8008a5e <_printf_float+0x3fe>
 8008a76:	2301      	movs	r3, #1
 8008a78:	e7e1      	b.n	8008a3e <_printf_float+0x3de>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4642      	mov	r2, r8
 8008a7e:	4659      	mov	r1, fp
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b0      	blx	r6
 8008a84:	3001      	adds	r0, #1
 8008a86:	f43f ae42 	beq.w	800870e <_printf_float+0xae>
 8008a8a:	3701      	adds	r7, #1
 8008a8c:	68e3      	ldr	r3, [r4, #12]
 8008a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a90:	1a9b      	subs	r3, r3, r2
 8008a92:	42bb      	cmp	r3, r7
 8008a94:	dcf1      	bgt.n	8008a7a <_printf_float+0x41a>
 8008a96:	e702      	b.n	800889e <_printf_float+0x23e>
 8008a98:	2700      	movs	r7, #0
 8008a9a:	f104 0819 	add.w	r8, r4, #25
 8008a9e:	e7f5      	b.n	8008a8c <_printf_float+0x42c>
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f43f ae94 	beq.w	80087ce <_printf_float+0x16e>
 8008aa6:	f04f 0c00 	mov.w	ip, #0
 8008aaa:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008aae:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8008ab2:	6022      	str	r2, [r4, #0]
 8008ab4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008ab8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	463a      	mov	r2, r7
 8008ac0:	464b      	mov	r3, r9
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	f7ff fd3a 	bl	800853c <__cvt>
 8008ac8:	4607      	mov	r7, r0
 8008aca:	e64f      	b.n	800876c <_printf_float+0x10c>

08008acc <_printf_common>:
 8008acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad0:	4691      	mov	r9, r2
 8008ad2:	461f      	mov	r7, r3
 8008ad4:	688a      	ldr	r2, [r1, #8]
 8008ad6:	690b      	ldr	r3, [r1, #16]
 8008ad8:	4606      	mov	r6, r0
 8008ada:	4293      	cmp	r3, r2
 8008adc:	bfb8      	it	lt
 8008ade:	4613      	movlt	r3, r2
 8008ae0:	f8c9 3000 	str.w	r3, [r9]
 8008ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ae8:	460c      	mov	r4, r1
 8008aea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008aee:	b112      	cbz	r2, 8008af6 <_printf_common+0x2a>
 8008af0:	3301      	adds	r3, #1
 8008af2:	f8c9 3000 	str.w	r3, [r9]
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	0699      	lsls	r1, r3, #26
 8008afa:	bf42      	ittt	mi
 8008afc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b00:	3302      	addmi	r3, #2
 8008b02:	f8c9 3000 	strmi.w	r3, [r9]
 8008b06:	6825      	ldr	r5, [r4, #0]
 8008b08:	f015 0506 	ands.w	r5, r5, #6
 8008b0c:	d107      	bne.n	8008b1e <_printf_common+0x52>
 8008b0e:	f104 0a19 	add.w	sl, r4, #25
 8008b12:	68e3      	ldr	r3, [r4, #12]
 8008b14:	f8d9 2000 	ldr.w	r2, [r9]
 8008b18:	1a9b      	subs	r3, r3, r2
 8008b1a:	42ab      	cmp	r3, r5
 8008b1c:	dc29      	bgt.n	8008b72 <_printf_common+0xa6>
 8008b1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b22:	6822      	ldr	r2, [r4, #0]
 8008b24:	3300      	adds	r3, #0
 8008b26:	bf18      	it	ne
 8008b28:	2301      	movne	r3, #1
 8008b2a:	0692      	lsls	r2, r2, #26
 8008b2c:	d42e      	bmi.n	8008b8c <_printf_common+0xc0>
 8008b2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b32:	4639      	mov	r1, r7
 8008b34:	4630      	mov	r0, r6
 8008b36:	47c0      	blx	r8
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d021      	beq.n	8008b80 <_printf_common+0xb4>
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	68e5      	ldr	r5, [r4, #12]
 8008b40:	f003 0306 	and.w	r3, r3, #6
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	bf18      	it	ne
 8008b48:	2500      	movne	r5, #0
 8008b4a:	f8d9 2000 	ldr.w	r2, [r9]
 8008b4e:	f04f 0900 	mov.w	r9, #0
 8008b52:	bf08      	it	eq
 8008b54:	1aad      	subeq	r5, r5, r2
 8008b56:	68a3      	ldr	r3, [r4, #8]
 8008b58:	6922      	ldr	r2, [r4, #16]
 8008b5a:	bf08      	it	eq
 8008b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b60:	4293      	cmp	r3, r2
 8008b62:	bfc4      	itt	gt
 8008b64:	1a9b      	subgt	r3, r3, r2
 8008b66:	18ed      	addgt	r5, r5, r3
 8008b68:	341a      	adds	r4, #26
 8008b6a:	454d      	cmp	r5, r9
 8008b6c:	d11a      	bne.n	8008ba4 <_printf_common+0xd8>
 8008b6e:	2000      	movs	r0, #0
 8008b70:	e008      	b.n	8008b84 <_printf_common+0xb8>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4652      	mov	r2, sl
 8008b76:	4639      	mov	r1, r7
 8008b78:	4630      	mov	r0, r6
 8008b7a:	47c0      	blx	r8
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d103      	bne.n	8008b88 <_printf_common+0xbc>
 8008b80:	f04f 30ff 	mov.w	r0, #4294967295
 8008b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b88:	3501      	adds	r5, #1
 8008b8a:	e7c2      	b.n	8008b12 <_printf_common+0x46>
 8008b8c:	2030      	movs	r0, #48	; 0x30
 8008b8e:	18e1      	adds	r1, r4, r3
 8008b90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b94:	1c5a      	adds	r2, r3, #1
 8008b96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b9a:	4422      	add	r2, r4
 8008b9c:	3302      	adds	r3, #2
 8008b9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ba2:	e7c4      	b.n	8008b2e <_printf_common+0x62>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	4639      	mov	r1, r7
 8008baa:	4630      	mov	r0, r6
 8008bac:	47c0      	blx	r8
 8008bae:	3001      	adds	r0, #1
 8008bb0:	d0e6      	beq.n	8008b80 <_printf_common+0xb4>
 8008bb2:	f109 0901 	add.w	r9, r9, #1
 8008bb6:	e7d8      	b.n	8008b6a <_printf_common+0x9e>

08008bb8 <_printf_i>:
 8008bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	7e09      	ldrb	r1, [r1, #24]
 8008bc4:	b085      	sub	sp, #20
 8008bc6:	296e      	cmp	r1, #110	; 0x6e
 8008bc8:	4617      	mov	r7, r2
 8008bca:	4606      	mov	r6, r0
 8008bcc:	4698      	mov	r8, r3
 8008bce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bd0:	f000 80b3 	beq.w	8008d3a <_printf_i+0x182>
 8008bd4:	d822      	bhi.n	8008c1c <_printf_i+0x64>
 8008bd6:	2963      	cmp	r1, #99	; 0x63
 8008bd8:	d036      	beq.n	8008c48 <_printf_i+0x90>
 8008bda:	d80a      	bhi.n	8008bf2 <_printf_i+0x3a>
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	f000 80b9 	beq.w	8008d54 <_printf_i+0x19c>
 8008be2:	2958      	cmp	r1, #88	; 0x58
 8008be4:	f000 8083 	beq.w	8008cee <_printf_i+0x136>
 8008be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008bf0:	e032      	b.n	8008c58 <_printf_i+0xa0>
 8008bf2:	2964      	cmp	r1, #100	; 0x64
 8008bf4:	d001      	beq.n	8008bfa <_printf_i+0x42>
 8008bf6:	2969      	cmp	r1, #105	; 0x69
 8008bf8:	d1f6      	bne.n	8008be8 <_printf_i+0x30>
 8008bfa:	6820      	ldr	r0, [r4, #0]
 8008bfc:	6813      	ldr	r3, [r2, #0]
 8008bfe:	0605      	lsls	r5, r0, #24
 8008c00:	f103 0104 	add.w	r1, r3, #4
 8008c04:	d52a      	bpl.n	8008c5c <_printf_i+0xa4>
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6011      	str	r1, [r2, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	da03      	bge.n	8008c16 <_printf_i+0x5e>
 8008c0e:	222d      	movs	r2, #45	; 0x2d
 8008c10:	425b      	negs	r3, r3
 8008c12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c16:	486f      	ldr	r0, [pc, #444]	; (8008dd4 <_printf_i+0x21c>)
 8008c18:	220a      	movs	r2, #10
 8008c1a:	e039      	b.n	8008c90 <_printf_i+0xd8>
 8008c1c:	2973      	cmp	r1, #115	; 0x73
 8008c1e:	f000 809d 	beq.w	8008d5c <_printf_i+0x1a4>
 8008c22:	d808      	bhi.n	8008c36 <_printf_i+0x7e>
 8008c24:	296f      	cmp	r1, #111	; 0x6f
 8008c26:	d020      	beq.n	8008c6a <_printf_i+0xb2>
 8008c28:	2970      	cmp	r1, #112	; 0x70
 8008c2a:	d1dd      	bne.n	8008be8 <_printf_i+0x30>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	f043 0320 	orr.w	r3, r3, #32
 8008c32:	6023      	str	r3, [r4, #0]
 8008c34:	e003      	b.n	8008c3e <_printf_i+0x86>
 8008c36:	2975      	cmp	r1, #117	; 0x75
 8008c38:	d017      	beq.n	8008c6a <_printf_i+0xb2>
 8008c3a:	2978      	cmp	r1, #120	; 0x78
 8008c3c:	d1d4      	bne.n	8008be8 <_printf_i+0x30>
 8008c3e:	2378      	movs	r3, #120	; 0x78
 8008c40:	4865      	ldr	r0, [pc, #404]	; (8008dd8 <_printf_i+0x220>)
 8008c42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c46:	e055      	b.n	8008cf4 <_printf_i+0x13c>
 8008c48:	6813      	ldr	r3, [r2, #0]
 8008c4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c4e:	1d19      	adds	r1, r3, #4
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6011      	str	r1, [r2, #0]
 8008c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e08c      	b.n	8008d76 <_printf_i+0x1be>
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c62:	6011      	str	r1, [r2, #0]
 8008c64:	bf18      	it	ne
 8008c66:	b21b      	sxthne	r3, r3
 8008c68:	e7cf      	b.n	8008c0a <_printf_i+0x52>
 8008c6a:	6813      	ldr	r3, [r2, #0]
 8008c6c:	6825      	ldr	r5, [r4, #0]
 8008c6e:	1d18      	adds	r0, r3, #4
 8008c70:	6010      	str	r0, [r2, #0]
 8008c72:	0628      	lsls	r0, r5, #24
 8008c74:	d501      	bpl.n	8008c7a <_printf_i+0xc2>
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	e002      	b.n	8008c80 <_printf_i+0xc8>
 8008c7a:	0668      	lsls	r0, r5, #25
 8008c7c:	d5fb      	bpl.n	8008c76 <_printf_i+0xbe>
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	296f      	cmp	r1, #111	; 0x6f
 8008c82:	bf14      	ite	ne
 8008c84:	220a      	movne	r2, #10
 8008c86:	2208      	moveq	r2, #8
 8008c88:	4852      	ldr	r0, [pc, #328]	; (8008dd4 <_printf_i+0x21c>)
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c90:	6865      	ldr	r5, [r4, #4]
 8008c92:	2d00      	cmp	r5, #0
 8008c94:	60a5      	str	r5, [r4, #8]
 8008c96:	f2c0 8095 	blt.w	8008dc4 <_printf_i+0x20c>
 8008c9a:	6821      	ldr	r1, [r4, #0]
 8008c9c:	f021 0104 	bic.w	r1, r1, #4
 8008ca0:	6021      	str	r1, [r4, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d13d      	bne.n	8008d22 <_printf_i+0x16a>
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	f040 808e 	bne.w	8008dc8 <_printf_i+0x210>
 8008cac:	4665      	mov	r5, ip
 8008cae:	2a08      	cmp	r2, #8
 8008cb0:	d10b      	bne.n	8008cca <_printf_i+0x112>
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	07db      	lsls	r3, r3, #31
 8008cb6:	d508      	bpl.n	8008cca <_printf_i+0x112>
 8008cb8:	6923      	ldr	r3, [r4, #16]
 8008cba:	6862      	ldr	r2, [r4, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	bfde      	ittt	le
 8008cc0:	2330      	movle	r3, #48	; 0x30
 8008cc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cca:	ebac 0305 	sub.w	r3, ip, r5
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	f8cd 8000 	str.w	r8, [sp]
 8008cd4:	463b      	mov	r3, r7
 8008cd6:	aa03      	add	r2, sp, #12
 8008cd8:	4621      	mov	r1, r4
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7ff fef6 	bl	8008acc <_printf_common>
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d14d      	bne.n	8008d80 <_printf_i+0x1c8>
 8008ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce8:	b005      	add	sp, #20
 8008cea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cee:	4839      	ldr	r0, [pc, #228]	; (8008dd4 <_printf_i+0x21c>)
 8008cf0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008cf4:	6813      	ldr	r3, [r2, #0]
 8008cf6:	6821      	ldr	r1, [r4, #0]
 8008cf8:	1d1d      	adds	r5, r3, #4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6015      	str	r5, [r2, #0]
 8008cfe:	060a      	lsls	r2, r1, #24
 8008d00:	d50b      	bpl.n	8008d1a <_printf_i+0x162>
 8008d02:	07ca      	lsls	r2, r1, #31
 8008d04:	bf44      	itt	mi
 8008d06:	f041 0120 	orrmi.w	r1, r1, #32
 8008d0a:	6021      	strmi	r1, [r4, #0]
 8008d0c:	b91b      	cbnz	r3, 8008d16 <_printf_i+0x15e>
 8008d0e:	6822      	ldr	r2, [r4, #0]
 8008d10:	f022 0220 	bic.w	r2, r2, #32
 8008d14:	6022      	str	r2, [r4, #0]
 8008d16:	2210      	movs	r2, #16
 8008d18:	e7b7      	b.n	8008c8a <_printf_i+0xd2>
 8008d1a:	064d      	lsls	r5, r1, #25
 8008d1c:	bf48      	it	mi
 8008d1e:	b29b      	uxthmi	r3, r3
 8008d20:	e7ef      	b.n	8008d02 <_printf_i+0x14a>
 8008d22:	4665      	mov	r5, ip
 8008d24:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d28:	fb02 3311 	mls	r3, r2, r1, r3
 8008d2c:	5cc3      	ldrb	r3, [r0, r3]
 8008d2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008d32:	460b      	mov	r3, r1
 8008d34:	2900      	cmp	r1, #0
 8008d36:	d1f5      	bne.n	8008d24 <_printf_i+0x16c>
 8008d38:	e7b9      	b.n	8008cae <_printf_i+0xf6>
 8008d3a:	6813      	ldr	r3, [r2, #0]
 8008d3c:	6825      	ldr	r5, [r4, #0]
 8008d3e:	1d18      	adds	r0, r3, #4
 8008d40:	6961      	ldr	r1, [r4, #20]
 8008d42:	6010      	str	r0, [r2, #0]
 8008d44:	0628      	lsls	r0, r5, #24
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	d501      	bpl.n	8008d4e <_printf_i+0x196>
 8008d4a:	6019      	str	r1, [r3, #0]
 8008d4c:	e002      	b.n	8008d54 <_printf_i+0x19c>
 8008d4e:	066a      	lsls	r2, r5, #25
 8008d50:	d5fb      	bpl.n	8008d4a <_printf_i+0x192>
 8008d52:	8019      	strh	r1, [r3, #0]
 8008d54:	2300      	movs	r3, #0
 8008d56:	4665      	mov	r5, ip
 8008d58:	6123      	str	r3, [r4, #16]
 8008d5a:	e7b9      	b.n	8008cd0 <_printf_i+0x118>
 8008d5c:	6813      	ldr	r3, [r2, #0]
 8008d5e:	1d19      	adds	r1, r3, #4
 8008d60:	6011      	str	r1, [r2, #0]
 8008d62:	681d      	ldr	r5, [r3, #0]
 8008d64:	6862      	ldr	r2, [r4, #4]
 8008d66:	2100      	movs	r1, #0
 8008d68:	4628      	mov	r0, r5
 8008d6a:	f001 fa87 	bl	800a27c <memchr>
 8008d6e:	b108      	cbz	r0, 8008d74 <_printf_i+0x1bc>
 8008d70:	1b40      	subs	r0, r0, r5
 8008d72:	6060      	str	r0, [r4, #4]
 8008d74:	6863      	ldr	r3, [r4, #4]
 8008d76:	6123      	str	r3, [r4, #16]
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d7e:	e7a7      	b.n	8008cd0 <_printf_i+0x118>
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	462a      	mov	r2, r5
 8008d84:	4639      	mov	r1, r7
 8008d86:	4630      	mov	r0, r6
 8008d88:	47c0      	blx	r8
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	d0aa      	beq.n	8008ce4 <_printf_i+0x12c>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	079b      	lsls	r3, r3, #30
 8008d92:	d413      	bmi.n	8008dbc <_printf_i+0x204>
 8008d94:	68e0      	ldr	r0, [r4, #12]
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	4298      	cmp	r0, r3
 8008d9a:	bfb8      	it	lt
 8008d9c:	4618      	movlt	r0, r3
 8008d9e:	e7a3      	b.n	8008ce8 <_printf_i+0x130>
 8008da0:	2301      	movs	r3, #1
 8008da2:	464a      	mov	r2, r9
 8008da4:	4639      	mov	r1, r7
 8008da6:	4630      	mov	r0, r6
 8008da8:	47c0      	blx	r8
 8008daa:	3001      	adds	r0, #1
 8008dac:	d09a      	beq.n	8008ce4 <_printf_i+0x12c>
 8008dae:	3501      	adds	r5, #1
 8008db0:	68e3      	ldr	r3, [r4, #12]
 8008db2:	9a03      	ldr	r2, [sp, #12]
 8008db4:	1a9b      	subs	r3, r3, r2
 8008db6:	42ab      	cmp	r3, r5
 8008db8:	dcf2      	bgt.n	8008da0 <_printf_i+0x1e8>
 8008dba:	e7eb      	b.n	8008d94 <_printf_i+0x1dc>
 8008dbc:	2500      	movs	r5, #0
 8008dbe:	f104 0919 	add.w	r9, r4, #25
 8008dc2:	e7f5      	b.n	8008db0 <_printf_i+0x1f8>
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1ac      	bne.n	8008d22 <_printf_i+0x16a>
 8008dc8:	7803      	ldrb	r3, [r0, #0]
 8008dca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dd2:	e76c      	b.n	8008cae <_printf_i+0xf6>
 8008dd4:	0800b60a 	.word	0x0800b60a
 8008dd8:	0800b61b 	.word	0x0800b61b

08008ddc <iprintf>:
 8008ddc:	b40f      	push	{r0, r1, r2, r3}
 8008dde:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <iprintf+0x2c>)
 8008de0:	b513      	push	{r0, r1, r4, lr}
 8008de2:	681c      	ldr	r4, [r3, #0]
 8008de4:	b124      	cbz	r4, 8008df0 <iprintf+0x14>
 8008de6:	69a3      	ldr	r3, [r4, #24]
 8008de8:	b913      	cbnz	r3, 8008df0 <iprintf+0x14>
 8008dea:	4620      	mov	r0, r4
 8008dec:	f001 f92c 	bl	800a048 <__sinit>
 8008df0:	ab05      	add	r3, sp, #20
 8008df2:	9a04      	ldr	r2, [sp, #16]
 8008df4:	68a1      	ldr	r1, [r4, #8]
 8008df6:	4620      	mov	r0, r4
 8008df8:	9301      	str	r3, [sp, #4]
 8008dfa:	f001 ff63 	bl	800acc4 <_vfiprintf_r>
 8008dfe:	b002      	add	sp, #8
 8008e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e04:	b004      	add	sp, #16
 8008e06:	4770      	bx	lr
 8008e08:	20000038 	.word	0x20000038

08008e0c <putchar>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4b08      	ldr	r3, [pc, #32]	; (8008e30 <putchar+0x24>)
 8008e10:	4605      	mov	r5, r0
 8008e12:	681c      	ldr	r4, [r3, #0]
 8008e14:	b124      	cbz	r4, 8008e20 <putchar+0x14>
 8008e16:	69a3      	ldr	r3, [r4, #24]
 8008e18:	b913      	cbnz	r3, 8008e20 <putchar+0x14>
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f001 f914 	bl	800a048 <__sinit>
 8008e20:	68a2      	ldr	r2, [r4, #8]
 8008e22:	4629      	mov	r1, r5
 8008e24:	4620      	mov	r0, r4
 8008e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e2a:	f002 b861 	b.w	800aef0 <_putc_r>
 8008e2e:	bf00      	nop
 8008e30:	20000038 	.word	0x20000038

08008e34 <_puts_r>:
 8008e34:	b570      	push	{r4, r5, r6, lr}
 8008e36:	460e      	mov	r6, r1
 8008e38:	4605      	mov	r5, r0
 8008e3a:	b118      	cbz	r0, 8008e44 <_puts_r+0x10>
 8008e3c:	6983      	ldr	r3, [r0, #24]
 8008e3e:	b90b      	cbnz	r3, 8008e44 <_puts_r+0x10>
 8008e40:	f001 f902 	bl	800a048 <__sinit>
 8008e44:	69ab      	ldr	r3, [r5, #24]
 8008e46:	68ac      	ldr	r4, [r5, #8]
 8008e48:	b913      	cbnz	r3, 8008e50 <_puts_r+0x1c>
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f001 f8fc 	bl	800a048 <__sinit>
 8008e50:	4b23      	ldr	r3, [pc, #140]	; (8008ee0 <_puts_r+0xac>)
 8008e52:	429c      	cmp	r4, r3
 8008e54:	d117      	bne.n	8008e86 <_puts_r+0x52>
 8008e56:	686c      	ldr	r4, [r5, #4]
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	071b      	lsls	r3, r3, #28
 8008e5c:	d51d      	bpl.n	8008e9a <_puts_r+0x66>
 8008e5e:	6923      	ldr	r3, [r4, #16]
 8008e60:	b1db      	cbz	r3, 8008e9a <_puts_r+0x66>
 8008e62:	3e01      	subs	r6, #1
 8008e64:	68a3      	ldr	r3, [r4, #8]
 8008e66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	60a3      	str	r3, [r4, #8]
 8008e6e:	b9e9      	cbnz	r1, 8008eac <_puts_r+0x78>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	da2e      	bge.n	8008ed2 <_puts_r+0x9e>
 8008e74:	4622      	mov	r2, r4
 8008e76:	210a      	movs	r1, #10
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f000 f8f1 	bl	8009060 <__swbuf_r>
 8008e7e:	3001      	adds	r0, #1
 8008e80:	d011      	beq.n	8008ea6 <_puts_r+0x72>
 8008e82:	200a      	movs	r0, #10
 8008e84:	e011      	b.n	8008eaa <_puts_r+0x76>
 8008e86:	4b17      	ldr	r3, [pc, #92]	; (8008ee4 <_puts_r+0xb0>)
 8008e88:	429c      	cmp	r4, r3
 8008e8a:	d101      	bne.n	8008e90 <_puts_r+0x5c>
 8008e8c:	68ac      	ldr	r4, [r5, #8]
 8008e8e:	e7e3      	b.n	8008e58 <_puts_r+0x24>
 8008e90:	4b15      	ldr	r3, [pc, #84]	; (8008ee8 <_puts_r+0xb4>)
 8008e92:	429c      	cmp	r4, r3
 8008e94:	bf08      	it	eq
 8008e96:	68ec      	ldreq	r4, [r5, #12]
 8008e98:	e7de      	b.n	8008e58 <_puts_r+0x24>
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f000 f931 	bl	8009104 <__swsetup_r>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d0dd      	beq.n	8008e62 <_puts_r+0x2e>
 8008ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	da04      	bge.n	8008eba <_puts_r+0x86>
 8008eb0:	69a2      	ldr	r2, [r4, #24]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	dc06      	bgt.n	8008ec4 <_puts_r+0x90>
 8008eb6:	290a      	cmp	r1, #10
 8008eb8:	d004      	beq.n	8008ec4 <_puts_r+0x90>
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	6022      	str	r2, [r4, #0]
 8008ec0:	7019      	strb	r1, [r3, #0]
 8008ec2:	e7cf      	b.n	8008e64 <_puts_r+0x30>
 8008ec4:	4622      	mov	r2, r4
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f000 f8ca 	bl	8009060 <__swbuf_r>
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d1c9      	bne.n	8008e64 <_puts_r+0x30>
 8008ed0:	e7e9      	b.n	8008ea6 <_puts_r+0x72>
 8008ed2:	200a      	movs	r0, #10
 8008ed4:	6823      	ldr	r3, [r4, #0]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	6022      	str	r2, [r4, #0]
 8008eda:	7018      	strb	r0, [r3, #0]
 8008edc:	e7e5      	b.n	8008eaa <_puts_r+0x76>
 8008ede:	bf00      	nop
 8008ee0:	0800b65c 	.word	0x0800b65c
 8008ee4:	0800b67c 	.word	0x0800b67c
 8008ee8:	0800b63c 	.word	0x0800b63c

08008eec <puts>:
 8008eec:	4b02      	ldr	r3, [pc, #8]	; (8008ef8 <puts+0xc>)
 8008eee:	4601      	mov	r1, r0
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	f7ff bf9f 	b.w	8008e34 <_puts_r>
 8008ef6:	bf00      	nop
 8008ef8:	20000038 	.word	0x20000038

08008efc <siprintf>:
 8008efc:	b40e      	push	{r1, r2, r3}
 8008efe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f02:	b500      	push	{lr}
 8008f04:	b09c      	sub	sp, #112	; 0x70
 8008f06:	ab1d      	add	r3, sp, #116	; 0x74
 8008f08:	9002      	str	r0, [sp, #8]
 8008f0a:	9006      	str	r0, [sp, #24]
 8008f0c:	9107      	str	r1, [sp, #28]
 8008f0e:	9104      	str	r1, [sp, #16]
 8008f10:	4808      	ldr	r0, [pc, #32]	; (8008f34 <siprintf+0x38>)
 8008f12:	4909      	ldr	r1, [pc, #36]	; (8008f38 <siprintf+0x3c>)
 8008f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f18:	9105      	str	r1, [sp, #20]
 8008f1a:	6800      	ldr	r0, [r0, #0]
 8008f1c:	a902      	add	r1, sp, #8
 8008f1e:	9301      	str	r3, [sp, #4]
 8008f20:	f001 fdb0 	bl	800aa84 <_svfiprintf_r>
 8008f24:	2200      	movs	r2, #0
 8008f26:	9b02      	ldr	r3, [sp, #8]
 8008f28:	701a      	strb	r2, [r3, #0]
 8008f2a:	b01c      	add	sp, #112	; 0x70
 8008f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f30:	b003      	add	sp, #12
 8008f32:	4770      	bx	lr
 8008f34:	20000038 	.word	0x20000038
 8008f38:	ffff0208 	.word	0xffff0208

08008f3c <_strtol_l.isra.0>:
 8008f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f40:	4680      	mov	r8, r0
 8008f42:	4689      	mov	r9, r1
 8008f44:	4692      	mov	sl, r2
 8008f46:	461e      	mov	r6, r3
 8008f48:	460f      	mov	r7, r1
 8008f4a:	463d      	mov	r5, r7
 8008f4c:	9808      	ldr	r0, [sp, #32]
 8008f4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f52:	f001 f903 	bl	800a15c <__locale_ctype_ptr_l>
 8008f56:	4420      	add	r0, r4
 8008f58:	7843      	ldrb	r3, [r0, #1]
 8008f5a:	f013 0308 	ands.w	r3, r3, #8
 8008f5e:	d132      	bne.n	8008fc6 <_strtol_l.isra.0+0x8a>
 8008f60:	2c2d      	cmp	r4, #45	; 0x2d
 8008f62:	d132      	bne.n	8008fca <_strtol_l.isra.0+0x8e>
 8008f64:	2201      	movs	r2, #1
 8008f66:	787c      	ldrb	r4, [r7, #1]
 8008f68:	1cbd      	adds	r5, r7, #2
 8008f6a:	2e00      	cmp	r6, #0
 8008f6c:	d05d      	beq.n	800902a <_strtol_l.isra.0+0xee>
 8008f6e:	2e10      	cmp	r6, #16
 8008f70:	d109      	bne.n	8008f86 <_strtol_l.isra.0+0x4a>
 8008f72:	2c30      	cmp	r4, #48	; 0x30
 8008f74:	d107      	bne.n	8008f86 <_strtol_l.isra.0+0x4a>
 8008f76:	782b      	ldrb	r3, [r5, #0]
 8008f78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f7c:	2b58      	cmp	r3, #88	; 0x58
 8008f7e:	d14f      	bne.n	8009020 <_strtol_l.isra.0+0xe4>
 8008f80:	2610      	movs	r6, #16
 8008f82:	786c      	ldrb	r4, [r5, #1]
 8008f84:	3502      	adds	r5, #2
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	bf14      	ite	ne
 8008f8a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008f8e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008f92:	2700      	movs	r7, #0
 8008f94:	fbb1 fcf6 	udiv	ip, r1, r6
 8008f98:	4638      	mov	r0, r7
 8008f9a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008f9e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008fa2:	2b09      	cmp	r3, #9
 8008fa4:	d817      	bhi.n	8008fd6 <_strtol_l.isra.0+0x9a>
 8008fa6:	461c      	mov	r4, r3
 8008fa8:	42a6      	cmp	r6, r4
 8008faa:	dd23      	ble.n	8008ff4 <_strtol_l.isra.0+0xb8>
 8008fac:	1c7b      	adds	r3, r7, #1
 8008fae:	d007      	beq.n	8008fc0 <_strtol_l.isra.0+0x84>
 8008fb0:	4584      	cmp	ip, r0
 8008fb2:	d31c      	bcc.n	8008fee <_strtol_l.isra.0+0xb2>
 8008fb4:	d101      	bne.n	8008fba <_strtol_l.isra.0+0x7e>
 8008fb6:	45a6      	cmp	lr, r4
 8008fb8:	db19      	blt.n	8008fee <_strtol_l.isra.0+0xb2>
 8008fba:	2701      	movs	r7, #1
 8008fbc:	fb00 4006 	mla	r0, r0, r6, r4
 8008fc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fc4:	e7eb      	b.n	8008f9e <_strtol_l.isra.0+0x62>
 8008fc6:	462f      	mov	r7, r5
 8008fc8:	e7bf      	b.n	8008f4a <_strtol_l.isra.0+0xe>
 8008fca:	2c2b      	cmp	r4, #43	; 0x2b
 8008fcc:	bf04      	itt	eq
 8008fce:	1cbd      	addeq	r5, r7, #2
 8008fd0:	787c      	ldrbeq	r4, [r7, #1]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	e7c9      	b.n	8008f6a <_strtol_l.isra.0+0x2e>
 8008fd6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008fda:	2b19      	cmp	r3, #25
 8008fdc:	d801      	bhi.n	8008fe2 <_strtol_l.isra.0+0xa6>
 8008fde:	3c37      	subs	r4, #55	; 0x37
 8008fe0:	e7e2      	b.n	8008fa8 <_strtol_l.isra.0+0x6c>
 8008fe2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008fe6:	2b19      	cmp	r3, #25
 8008fe8:	d804      	bhi.n	8008ff4 <_strtol_l.isra.0+0xb8>
 8008fea:	3c57      	subs	r4, #87	; 0x57
 8008fec:	e7dc      	b.n	8008fa8 <_strtol_l.isra.0+0x6c>
 8008fee:	f04f 37ff 	mov.w	r7, #4294967295
 8008ff2:	e7e5      	b.n	8008fc0 <_strtol_l.isra.0+0x84>
 8008ff4:	1c7b      	adds	r3, r7, #1
 8008ff6:	d108      	bne.n	800900a <_strtol_l.isra.0+0xce>
 8008ff8:	2322      	movs	r3, #34	; 0x22
 8008ffa:	4608      	mov	r0, r1
 8008ffc:	f8c8 3000 	str.w	r3, [r8]
 8009000:	f1ba 0f00 	cmp.w	sl, #0
 8009004:	d107      	bne.n	8009016 <_strtol_l.isra.0+0xda>
 8009006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900a:	b102      	cbz	r2, 800900e <_strtol_l.isra.0+0xd2>
 800900c:	4240      	negs	r0, r0
 800900e:	f1ba 0f00 	cmp.w	sl, #0
 8009012:	d0f8      	beq.n	8009006 <_strtol_l.isra.0+0xca>
 8009014:	b10f      	cbz	r7, 800901a <_strtol_l.isra.0+0xde>
 8009016:	f105 39ff 	add.w	r9, r5, #4294967295
 800901a:	f8ca 9000 	str.w	r9, [sl]
 800901e:	e7f2      	b.n	8009006 <_strtol_l.isra.0+0xca>
 8009020:	2430      	movs	r4, #48	; 0x30
 8009022:	2e00      	cmp	r6, #0
 8009024:	d1af      	bne.n	8008f86 <_strtol_l.isra.0+0x4a>
 8009026:	2608      	movs	r6, #8
 8009028:	e7ad      	b.n	8008f86 <_strtol_l.isra.0+0x4a>
 800902a:	2c30      	cmp	r4, #48	; 0x30
 800902c:	d0a3      	beq.n	8008f76 <_strtol_l.isra.0+0x3a>
 800902e:	260a      	movs	r6, #10
 8009030:	e7a9      	b.n	8008f86 <_strtol_l.isra.0+0x4a>
	...

08009034 <strtol>:
 8009034:	4b08      	ldr	r3, [pc, #32]	; (8009058 <strtol+0x24>)
 8009036:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009038:	681c      	ldr	r4, [r3, #0]
 800903a:	4d08      	ldr	r5, [pc, #32]	; (800905c <strtol+0x28>)
 800903c:	6a23      	ldr	r3, [r4, #32]
 800903e:	2b00      	cmp	r3, #0
 8009040:	bf08      	it	eq
 8009042:	462b      	moveq	r3, r5
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	4613      	mov	r3, r2
 8009048:	460a      	mov	r2, r1
 800904a:	4601      	mov	r1, r0
 800904c:	4620      	mov	r0, r4
 800904e:	f7ff ff75 	bl	8008f3c <_strtol_l.isra.0>
 8009052:	b003      	add	sp, #12
 8009054:	bd30      	pop	{r4, r5, pc}
 8009056:	bf00      	nop
 8009058:	20000038 	.word	0x20000038
 800905c:	2000009c 	.word	0x2000009c

08009060 <__swbuf_r>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	460e      	mov	r6, r1
 8009064:	4614      	mov	r4, r2
 8009066:	4605      	mov	r5, r0
 8009068:	b118      	cbz	r0, 8009072 <__swbuf_r+0x12>
 800906a:	6983      	ldr	r3, [r0, #24]
 800906c:	b90b      	cbnz	r3, 8009072 <__swbuf_r+0x12>
 800906e:	f000 ffeb 	bl	800a048 <__sinit>
 8009072:	4b21      	ldr	r3, [pc, #132]	; (80090f8 <__swbuf_r+0x98>)
 8009074:	429c      	cmp	r4, r3
 8009076:	d12a      	bne.n	80090ce <__swbuf_r+0x6e>
 8009078:	686c      	ldr	r4, [r5, #4]
 800907a:	69a3      	ldr	r3, [r4, #24]
 800907c:	60a3      	str	r3, [r4, #8]
 800907e:	89a3      	ldrh	r3, [r4, #12]
 8009080:	071a      	lsls	r2, r3, #28
 8009082:	d52e      	bpl.n	80090e2 <__swbuf_r+0x82>
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	b363      	cbz	r3, 80090e2 <__swbuf_r+0x82>
 8009088:	6923      	ldr	r3, [r4, #16]
 800908a:	6820      	ldr	r0, [r4, #0]
 800908c:	b2f6      	uxtb	r6, r6
 800908e:	1ac0      	subs	r0, r0, r3
 8009090:	6963      	ldr	r3, [r4, #20]
 8009092:	4637      	mov	r7, r6
 8009094:	4283      	cmp	r3, r0
 8009096:	dc04      	bgt.n	80090a2 <__swbuf_r+0x42>
 8009098:	4621      	mov	r1, r4
 800909a:	4628      	mov	r0, r5
 800909c:	f000 ff6a 	bl	8009f74 <_fflush_r>
 80090a0:	bb28      	cbnz	r0, 80090ee <__swbuf_r+0x8e>
 80090a2:	68a3      	ldr	r3, [r4, #8]
 80090a4:	3001      	adds	r0, #1
 80090a6:	3b01      	subs	r3, #1
 80090a8:	60a3      	str	r3, [r4, #8]
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	1c5a      	adds	r2, r3, #1
 80090ae:	6022      	str	r2, [r4, #0]
 80090b0:	701e      	strb	r6, [r3, #0]
 80090b2:	6963      	ldr	r3, [r4, #20]
 80090b4:	4283      	cmp	r3, r0
 80090b6:	d004      	beq.n	80090c2 <__swbuf_r+0x62>
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	07db      	lsls	r3, r3, #31
 80090bc:	d519      	bpl.n	80090f2 <__swbuf_r+0x92>
 80090be:	2e0a      	cmp	r6, #10
 80090c0:	d117      	bne.n	80090f2 <__swbuf_r+0x92>
 80090c2:	4621      	mov	r1, r4
 80090c4:	4628      	mov	r0, r5
 80090c6:	f000 ff55 	bl	8009f74 <_fflush_r>
 80090ca:	b190      	cbz	r0, 80090f2 <__swbuf_r+0x92>
 80090cc:	e00f      	b.n	80090ee <__swbuf_r+0x8e>
 80090ce:	4b0b      	ldr	r3, [pc, #44]	; (80090fc <__swbuf_r+0x9c>)
 80090d0:	429c      	cmp	r4, r3
 80090d2:	d101      	bne.n	80090d8 <__swbuf_r+0x78>
 80090d4:	68ac      	ldr	r4, [r5, #8]
 80090d6:	e7d0      	b.n	800907a <__swbuf_r+0x1a>
 80090d8:	4b09      	ldr	r3, [pc, #36]	; (8009100 <__swbuf_r+0xa0>)
 80090da:	429c      	cmp	r4, r3
 80090dc:	bf08      	it	eq
 80090de:	68ec      	ldreq	r4, [r5, #12]
 80090e0:	e7cb      	b.n	800907a <__swbuf_r+0x1a>
 80090e2:	4621      	mov	r1, r4
 80090e4:	4628      	mov	r0, r5
 80090e6:	f000 f80d 	bl	8009104 <__swsetup_r>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d0cc      	beq.n	8009088 <__swbuf_r+0x28>
 80090ee:	f04f 37ff 	mov.w	r7, #4294967295
 80090f2:	4638      	mov	r0, r7
 80090f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090f6:	bf00      	nop
 80090f8:	0800b65c 	.word	0x0800b65c
 80090fc:	0800b67c 	.word	0x0800b67c
 8009100:	0800b63c 	.word	0x0800b63c

08009104 <__swsetup_r>:
 8009104:	4b32      	ldr	r3, [pc, #200]	; (80091d0 <__swsetup_r+0xcc>)
 8009106:	b570      	push	{r4, r5, r6, lr}
 8009108:	681d      	ldr	r5, [r3, #0]
 800910a:	4606      	mov	r6, r0
 800910c:	460c      	mov	r4, r1
 800910e:	b125      	cbz	r5, 800911a <__swsetup_r+0x16>
 8009110:	69ab      	ldr	r3, [r5, #24]
 8009112:	b913      	cbnz	r3, 800911a <__swsetup_r+0x16>
 8009114:	4628      	mov	r0, r5
 8009116:	f000 ff97 	bl	800a048 <__sinit>
 800911a:	4b2e      	ldr	r3, [pc, #184]	; (80091d4 <__swsetup_r+0xd0>)
 800911c:	429c      	cmp	r4, r3
 800911e:	d10f      	bne.n	8009140 <__swsetup_r+0x3c>
 8009120:	686c      	ldr	r4, [r5, #4]
 8009122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009126:	b29a      	uxth	r2, r3
 8009128:	0715      	lsls	r5, r2, #28
 800912a:	d42c      	bmi.n	8009186 <__swsetup_r+0x82>
 800912c:	06d0      	lsls	r0, r2, #27
 800912e:	d411      	bmi.n	8009154 <__swsetup_r+0x50>
 8009130:	2209      	movs	r2, #9
 8009132:	6032      	str	r2, [r6, #0]
 8009134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	f04f 30ff 	mov.w	r0, #4294967295
 800913e:	e03e      	b.n	80091be <__swsetup_r+0xba>
 8009140:	4b25      	ldr	r3, [pc, #148]	; (80091d8 <__swsetup_r+0xd4>)
 8009142:	429c      	cmp	r4, r3
 8009144:	d101      	bne.n	800914a <__swsetup_r+0x46>
 8009146:	68ac      	ldr	r4, [r5, #8]
 8009148:	e7eb      	b.n	8009122 <__swsetup_r+0x1e>
 800914a:	4b24      	ldr	r3, [pc, #144]	; (80091dc <__swsetup_r+0xd8>)
 800914c:	429c      	cmp	r4, r3
 800914e:	bf08      	it	eq
 8009150:	68ec      	ldreq	r4, [r5, #12]
 8009152:	e7e6      	b.n	8009122 <__swsetup_r+0x1e>
 8009154:	0751      	lsls	r1, r2, #29
 8009156:	d512      	bpl.n	800917e <__swsetup_r+0x7a>
 8009158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800915a:	b141      	cbz	r1, 800916e <__swsetup_r+0x6a>
 800915c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009160:	4299      	cmp	r1, r3
 8009162:	d002      	beq.n	800916a <__swsetup_r+0x66>
 8009164:	4630      	mov	r0, r6
 8009166:	f001 fb8d 	bl	800a884 <_free_r>
 800916a:	2300      	movs	r3, #0
 800916c:	6363      	str	r3, [r4, #52]	; 0x34
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	2300      	movs	r3, #0
 8009178:	6063      	str	r3, [r4, #4]
 800917a:	6923      	ldr	r3, [r4, #16]
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	f043 0308 	orr.w	r3, r3, #8
 8009184:	81a3      	strh	r3, [r4, #12]
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	b94b      	cbnz	r3, 800919e <__swsetup_r+0x9a>
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009194:	d003      	beq.n	800919e <__swsetup_r+0x9a>
 8009196:	4621      	mov	r1, r4
 8009198:	4630      	mov	r0, r6
 800919a:	f001 f815 	bl	800a1c8 <__smakebuf_r>
 800919e:	89a2      	ldrh	r2, [r4, #12]
 80091a0:	f012 0301 	ands.w	r3, r2, #1
 80091a4:	d00c      	beq.n	80091c0 <__swsetup_r+0xbc>
 80091a6:	2300      	movs	r3, #0
 80091a8:	60a3      	str	r3, [r4, #8]
 80091aa:	6963      	ldr	r3, [r4, #20]
 80091ac:	425b      	negs	r3, r3
 80091ae:	61a3      	str	r3, [r4, #24]
 80091b0:	6923      	ldr	r3, [r4, #16]
 80091b2:	b953      	cbnz	r3, 80091ca <__swsetup_r+0xc6>
 80091b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80091bc:	d1ba      	bne.n	8009134 <__swsetup_r+0x30>
 80091be:	bd70      	pop	{r4, r5, r6, pc}
 80091c0:	0792      	lsls	r2, r2, #30
 80091c2:	bf58      	it	pl
 80091c4:	6963      	ldrpl	r3, [r4, #20]
 80091c6:	60a3      	str	r3, [r4, #8]
 80091c8:	e7f2      	b.n	80091b0 <__swsetup_r+0xac>
 80091ca:	2000      	movs	r0, #0
 80091cc:	e7f7      	b.n	80091be <__swsetup_r+0xba>
 80091ce:	bf00      	nop
 80091d0:	20000038 	.word	0x20000038
 80091d4:	0800b65c 	.word	0x0800b65c
 80091d8:	0800b67c 	.word	0x0800b67c
 80091dc:	0800b63c 	.word	0x0800b63c

080091e0 <quorem>:
 80091e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	6903      	ldr	r3, [r0, #16]
 80091e6:	690c      	ldr	r4, [r1, #16]
 80091e8:	4680      	mov	r8, r0
 80091ea:	42a3      	cmp	r3, r4
 80091ec:	f2c0 8084 	blt.w	80092f8 <quorem+0x118>
 80091f0:	3c01      	subs	r4, #1
 80091f2:	f101 0714 	add.w	r7, r1, #20
 80091f6:	f100 0614 	add.w	r6, r0, #20
 80091fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80091fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009202:	3501      	adds	r5, #1
 8009204:	fbb0 f5f5 	udiv	r5, r0, r5
 8009208:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800920c:	eb06 030c 	add.w	r3, r6, ip
 8009210:	eb07 090c 	add.w	r9, r7, ip
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	b39d      	cbz	r5, 8009280 <quorem+0xa0>
 8009218:	f04f 0a00 	mov.w	sl, #0
 800921c:	4638      	mov	r0, r7
 800921e:	46b6      	mov	lr, r6
 8009220:	46d3      	mov	fp, sl
 8009222:	f850 2b04 	ldr.w	r2, [r0], #4
 8009226:	b293      	uxth	r3, r2
 8009228:	fb05 a303 	mla	r3, r5, r3, sl
 800922c:	0c12      	lsrs	r2, r2, #16
 800922e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009232:	fb05 a202 	mla	r2, r5, r2, sl
 8009236:	b29b      	uxth	r3, r3
 8009238:	ebab 0303 	sub.w	r3, fp, r3
 800923c:	f8de b000 	ldr.w	fp, [lr]
 8009240:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009244:	fa1f fb8b 	uxth.w	fp, fp
 8009248:	445b      	add	r3, fp
 800924a:	fa1f fb82 	uxth.w	fp, r2
 800924e:	f8de 2000 	ldr.w	r2, [lr]
 8009252:	4581      	cmp	r9, r0
 8009254:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009258:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800925c:	b29b      	uxth	r3, r3
 800925e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009262:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009266:	f84e 3b04 	str.w	r3, [lr], #4
 800926a:	d2da      	bcs.n	8009222 <quorem+0x42>
 800926c:	f856 300c 	ldr.w	r3, [r6, ip]
 8009270:	b933      	cbnz	r3, 8009280 <quorem+0xa0>
 8009272:	9b01      	ldr	r3, [sp, #4]
 8009274:	3b04      	subs	r3, #4
 8009276:	429e      	cmp	r6, r3
 8009278:	461a      	mov	r2, r3
 800927a:	d331      	bcc.n	80092e0 <quorem+0x100>
 800927c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009280:	4640      	mov	r0, r8
 8009282:	f001 fa29 	bl	800a6d8 <__mcmp>
 8009286:	2800      	cmp	r0, #0
 8009288:	db26      	blt.n	80092d8 <quorem+0xf8>
 800928a:	4630      	mov	r0, r6
 800928c:	f04f 0c00 	mov.w	ip, #0
 8009290:	3501      	adds	r5, #1
 8009292:	f857 1b04 	ldr.w	r1, [r7], #4
 8009296:	f8d0 e000 	ldr.w	lr, [r0]
 800929a:	b28b      	uxth	r3, r1
 800929c:	ebac 0303 	sub.w	r3, ip, r3
 80092a0:	fa1f f28e 	uxth.w	r2, lr
 80092a4:	4413      	add	r3, r2
 80092a6:	0c0a      	lsrs	r2, r1, #16
 80092a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80092ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092b6:	45b9      	cmp	r9, r7
 80092b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80092bc:	f840 3b04 	str.w	r3, [r0], #4
 80092c0:	d2e7      	bcs.n	8009292 <quorem+0xb2>
 80092c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80092c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80092ca:	b92a      	cbnz	r2, 80092d8 <quorem+0xf8>
 80092cc:	3b04      	subs	r3, #4
 80092ce:	429e      	cmp	r6, r3
 80092d0:	461a      	mov	r2, r3
 80092d2:	d30b      	bcc.n	80092ec <quorem+0x10c>
 80092d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80092d8:	4628      	mov	r0, r5
 80092da:	b003      	add	sp, #12
 80092dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e0:	6812      	ldr	r2, [r2, #0]
 80092e2:	3b04      	subs	r3, #4
 80092e4:	2a00      	cmp	r2, #0
 80092e6:	d1c9      	bne.n	800927c <quorem+0x9c>
 80092e8:	3c01      	subs	r4, #1
 80092ea:	e7c4      	b.n	8009276 <quorem+0x96>
 80092ec:	6812      	ldr	r2, [r2, #0]
 80092ee:	3b04      	subs	r3, #4
 80092f0:	2a00      	cmp	r2, #0
 80092f2:	d1ef      	bne.n	80092d4 <quorem+0xf4>
 80092f4:	3c01      	subs	r4, #1
 80092f6:	e7ea      	b.n	80092ce <quorem+0xee>
 80092f8:	2000      	movs	r0, #0
 80092fa:	e7ee      	b.n	80092da <quorem+0xfa>
 80092fc:	0000      	movs	r0, r0
	...

08009300 <_dtoa_r>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	4616      	mov	r6, r2
 8009306:	461f      	mov	r7, r3
 8009308:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800930a:	b095      	sub	sp, #84	; 0x54
 800930c:	4604      	mov	r4, r0
 800930e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8009312:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009316:	b93d      	cbnz	r5, 8009328 <_dtoa_r+0x28>
 8009318:	2010      	movs	r0, #16
 800931a:	f000 ff95 	bl	800a248 <malloc>
 800931e:	6260      	str	r0, [r4, #36]	; 0x24
 8009320:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009324:	6005      	str	r5, [r0, #0]
 8009326:	60c5      	str	r5, [r0, #12]
 8009328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800932a:	6819      	ldr	r1, [r3, #0]
 800932c:	b151      	cbz	r1, 8009344 <_dtoa_r+0x44>
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	2301      	movs	r3, #1
 8009332:	4093      	lsls	r3, r2
 8009334:	604a      	str	r2, [r1, #4]
 8009336:	608b      	str	r3, [r1, #8]
 8009338:	4620      	mov	r0, r4
 800933a:	f000 ffec 	bl	800a316 <_Bfree>
 800933e:	2200      	movs	r2, #0
 8009340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	1e3b      	subs	r3, r7, #0
 8009346:	bfaf      	iteee	ge
 8009348:	2300      	movge	r3, #0
 800934a:	2201      	movlt	r2, #1
 800934c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009350:	9303      	strlt	r3, [sp, #12]
 8009352:	bfac      	ite	ge
 8009354:	f8c8 3000 	strge.w	r3, [r8]
 8009358:	f8c8 2000 	strlt.w	r2, [r8]
 800935c:	4bae      	ldr	r3, [pc, #696]	; (8009618 <_dtoa_r+0x318>)
 800935e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009362:	ea33 0308 	bics.w	r3, r3, r8
 8009366:	d11b      	bne.n	80093a0 <_dtoa_r+0xa0>
 8009368:	f242 730f 	movw	r3, #9999	; 0x270f
 800936c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	9b02      	ldr	r3, [sp, #8]
 8009372:	b923      	cbnz	r3, 800937e <_dtoa_r+0x7e>
 8009374:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009378:	2800      	cmp	r0, #0
 800937a:	f000 8545 	beq.w	8009e08 <_dtoa_r+0xb08>
 800937e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009380:	b953      	cbnz	r3, 8009398 <_dtoa_r+0x98>
 8009382:	4ba6      	ldr	r3, [pc, #664]	; (800961c <_dtoa_r+0x31c>)
 8009384:	e021      	b.n	80093ca <_dtoa_r+0xca>
 8009386:	4ba6      	ldr	r3, [pc, #664]	; (8009620 <_dtoa_r+0x320>)
 8009388:	9306      	str	r3, [sp, #24]
 800938a:	3308      	adds	r3, #8
 800938c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	9806      	ldr	r0, [sp, #24]
 8009392:	b015      	add	sp, #84	; 0x54
 8009394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009398:	4ba0      	ldr	r3, [pc, #640]	; (800961c <_dtoa_r+0x31c>)
 800939a:	9306      	str	r3, [sp, #24]
 800939c:	3303      	adds	r3, #3
 800939e:	e7f5      	b.n	800938c <_dtoa_r+0x8c>
 80093a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093a4:	2200      	movs	r2, #0
 80093a6:	2300      	movs	r3, #0
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f7 fafc 	bl	80009a8 <__aeabi_dcmpeq>
 80093b0:	4682      	mov	sl, r0
 80093b2:	b160      	cbz	r0, 80093ce <_dtoa_r+0xce>
 80093b4:	2301      	movs	r3, #1
 80093b6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 8520 	beq.w	8009e02 <_dtoa_r+0xb02>
 80093c2:	4b98      	ldr	r3, [pc, #608]	; (8009624 <_dtoa_r+0x324>)
 80093c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	9306      	str	r3, [sp, #24]
 80093cc:	e7e0      	b.n	8009390 <_dtoa_r+0x90>
 80093ce:	ab12      	add	r3, sp, #72	; 0x48
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	ab13      	add	r3, sp, #76	; 0x4c
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	4632      	mov	r2, r6
 80093d8:	463b      	mov	r3, r7
 80093da:	4620      	mov	r0, r4
 80093dc:	f001 f9f4 	bl	800a7c8 <__d2b>
 80093e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80093e4:	4683      	mov	fp, r0
 80093e6:	2d00      	cmp	r5, #0
 80093e8:	d07d      	beq.n	80094e6 <_dtoa_r+0x1e6>
 80093ea:	46b0      	mov	r8, r6
 80093ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80093f0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80093f4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80093f8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80093fc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009400:	2200      	movs	r2, #0
 8009402:	4b89      	ldr	r3, [pc, #548]	; (8009628 <_dtoa_r+0x328>)
 8009404:	4640      	mov	r0, r8
 8009406:	4649      	mov	r1, r9
 8009408:	f7f6 feae 	bl	8000168 <__aeabi_dsub>
 800940c:	a37c      	add	r3, pc, #496	; (adr r3, 8009600 <_dtoa_r+0x300>)
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	f7f7 f861 	bl	80004d8 <__aeabi_dmul>
 8009416:	a37c      	add	r3, pc, #496	; (adr r3, 8009608 <_dtoa_r+0x308>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f7f6 fea6 	bl	800016c <__adddf3>
 8009420:	4606      	mov	r6, r0
 8009422:	4628      	mov	r0, r5
 8009424:	460f      	mov	r7, r1
 8009426:	f7f6 ffed 	bl	8000404 <__aeabi_i2d>
 800942a:	a379      	add	r3, pc, #484	; (adr r3, 8009610 <_dtoa_r+0x310>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	f7f7 f852 	bl	80004d8 <__aeabi_dmul>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4630      	mov	r0, r6
 800943a:	4639      	mov	r1, r7
 800943c:	f7f6 fe96 	bl	800016c <__adddf3>
 8009440:	4606      	mov	r6, r0
 8009442:	460f      	mov	r7, r1
 8009444:	f7f7 faf8 	bl	8000a38 <__aeabi_d2iz>
 8009448:	2200      	movs	r2, #0
 800944a:	4682      	mov	sl, r0
 800944c:	2300      	movs	r3, #0
 800944e:	4630      	mov	r0, r6
 8009450:	4639      	mov	r1, r7
 8009452:	f7f7 fab3 	bl	80009bc <__aeabi_dcmplt>
 8009456:	b148      	cbz	r0, 800946c <_dtoa_r+0x16c>
 8009458:	4650      	mov	r0, sl
 800945a:	f7f6 ffd3 	bl	8000404 <__aeabi_i2d>
 800945e:	4632      	mov	r2, r6
 8009460:	463b      	mov	r3, r7
 8009462:	f7f7 faa1 	bl	80009a8 <__aeabi_dcmpeq>
 8009466:	b908      	cbnz	r0, 800946c <_dtoa_r+0x16c>
 8009468:	f10a 3aff 	add.w	sl, sl, #4294967295
 800946c:	f1ba 0f16 	cmp.w	sl, #22
 8009470:	d85a      	bhi.n	8009528 <_dtoa_r+0x228>
 8009472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009476:	496d      	ldr	r1, [pc, #436]	; (800962c <_dtoa_r+0x32c>)
 8009478:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800947c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009480:	f7f7 faba 	bl	80009f8 <__aeabi_dcmpgt>
 8009484:	2800      	cmp	r0, #0
 8009486:	d051      	beq.n	800952c <_dtoa_r+0x22c>
 8009488:	2300      	movs	r3, #0
 800948a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800948e:	930d      	str	r3, [sp, #52]	; 0x34
 8009490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009492:	1b5d      	subs	r5, r3, r5
 8009494:	1e6b      	subs	r3, r5, #1
 8009496:	9307      	str	r3, [sp, #28]
 8009498:	bf43      	ittte	mi
 800949a:	2300      	movmi	r3, #0
 800949c:	f1c5 0901 	rsbmi	r9, r5, #1
 80094a0:	9307      	strmi	r3, [sp, #28]
 80094a2:	f04f 0900 	movpl.w	r9, #0
 80094a6:	f1ba 0f00 	cmp.w	sl, #0
 80094aa:	db41      	blt.n	8009530 <_dtoa_r+0x230>
 80094ac:	9b07      	ldr	r3, [sp, #28]
 80094ae:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80094b2:	4453      	add	r3, sl
 80094b4:	9307      	str	r3, [sp, #28]
 80094b6:	2300      	movs	r3, #0
 80094b8:	9308      	str	r3, [sp, #32]
 80094ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80094bc:	2b09      	cmp	r3, #9
 80094be:	f200 808f 	bhi.w	80095e0 <_dtoa_r+0x2e0>
 80094c2:	2b05      	cmp	r3, #5
 80094c4:	bfc4      	itt	gt
 80094c6:	3b04      	subgt	r3, #4
 80094c8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80094ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80094cc:	bfc8      	it	gt
 80094ce:	2500      	movgt	r5, #0
 80094d0:	f1a3 0302 	sub.w	r3, r3, #2
 80094d4:	bfd8      	it	le
 80094d6:	2501      	movle	r5, #1
 80094d8:	2b03      	cmp	r3, #3
 80094da:	f200 808d 	bhi.w	80095f8 <_dtoa_r+0x2f8>
 80094de:	e8df f003 	tbb	[pc, r3]
 80094e2:	7d7b      	.short	0x7d7b
 80094e4:	6f2f      	.short	0x6f2f
 80094e6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80094ea:	441d      	add	r5, r3
 80094ec:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80094f0:	2820      	cmp	r0, #32
 80094f2:	dd13      	ble.n	800951c <_dtoa_r+0x21c>
 80094f4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80094f8:	9b02      	ldr	r3, [sp, #8]
 80094fa:	fa08 f800 	lsl.w	r8, r8, r0
 80094fe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009502:	fa23 f000 	lsr.w	r0, r3, r0
 8009506:	ea48 0000 	orr.w	r0, r8, r0
 800950a:	f7f6 ff6b 	bl	80003e4 <__aeabi_ui2d>
 800950e:	2301      	movs	r3, #1
 8009510:	4680      	mov	r8, r0
 8009512:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009516:	3d01      	subs	r5, #1
 8009518:	9310      	str	r3, [sp, #64]	; 0x40
 800951a:	e771      	b.n	8009400 <_dtoa_r+0x100>
 800951c:	9b02      	ldr	r3, [sp, #8]
 800951e:	f1c0 0020 	rsb	r0, r0, #32
 8009522:	fa03 f000 	lsl.w	r0, r3, r0
 8009526:	e7f0      	b.n	800950a <_dtoa_r+0x20a>
 8009528:	2301      	movs	r3, #1
 800952a:	e7b0      	b.n	800948e <_dtoa_r+0x18e>
 800952c:	900d      	str	r0, [sp, #52]	; 0x34
 800952e:	e7af      	b.n	8009490 <_dtoa_r+0x190>
 8009530:	f1ca 0300 	rsb	r3, sl, #0
 8009534:	9308      	str	r3, [sp, #32]
 8009536:	2300      	movs	r3, #0
 8009538:	eba9 090a 	sub.w	r9, r9, sl
 800953c:	930c      	str	r3, [sp, #48]	; 0x30
 800953e:	e7bc      	b.n	80094ba <_dtoa_r+0x1ba>
 8009540:	2301      	movs	r3, #1
 8009542:	9309      	str	r3, [sp, #36]	; 0x24
 8009544:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009546:	2b00      	cmp	r3, #0
 8009548:	dd74      	ble.n	8009634 <_dtoa_r+0x334>
 800954a:	4698      	mov	r8, r3
 800954c:	9304      	str	r3, [sp, #16]
 800954e:	2200      	movs	r2, #0
 8009550:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009552:	6072      	str	r2, [r6, #4]
 8009554:	2204      	movs	r2, #4
 8009556:	f102 0014 	add.w	r0, r2, #20
 800955a:	4298      	cmp	r0, r3
 800955c:	6871      	ldr	r1, [r6, #4]
 800955e:	d96e      	bls.n	800963e <_dtoa_r+0x33e>
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fea4 	bl	800a2ae <_Balloc>
 8009566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009568:	6030      	str	r0, [r6, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f1b8 0f0e 	cmp.w	r8, #14
 8009570:	9306      	str	r3, [sp, #24]
 8009572:	f200 80ed 	bhi.w	8009750 <_dtoa_r+0x450>
 8009576:	2d00      	cmp	r5, #0
 8009578:	f000 80ea 	beq.w	8009750 <_dtoa_r+0x450>
 800957c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009580:	f1ba 0f00 	cmp.w	sl, #0
 8009584:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009588:	dd77      	ble.n	800967a <_dtoa_r+0x37a>
 800958a:	4a28      	ldr	r2, [pc, #160]	; (800962c <_dtoa_r+0x32c>)
 800958c:	f00a 030f 	and.w	r3, sl, #15
 8009590:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009594:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009598:	06f0      	lsls	r0, r6, #27
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80095a2:	d568      	bpl.n	8009676 <_dtoa_r+0x376>
 80095a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80095a8:	4b21      	ldr	r3, [pc, #132]	; (8009630 <_dtoa_r+0x330>)
 80095aa:	2503      	movs	r5, #3
 80095ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095b0:	f7f7 f8bc 	bl	800072c <__aeabi_ddiv>
 80095b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095b8:	f006 060f 	and.w	r6, r6, #15
 80095bc:	4f1c      	ldr	r7, [pc, #112]	; (8009630 <_dtoa_r+0x330>)
 80095be:	e04f      	b.n	8009660 <_dtoa_r+0x360>
 80095c0:	2301      	movs	r3, #1
 80095c2:	9309      	str	r3, [sp, #36]	; 0x24
 80095c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095c6:	4453      	add	r3, sl
 80095c8:	f103 0801 	add.w	r8, r3, #1
 80095cc:	9304      	str	r3, [sp, #16]
 80095ce:	4643      	mov	r3, r8
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	bfb8      	it	lt
 80095d4:	2301      	movlt	r3, #1
 80095d6:	e7ba      	b.n	800954e <_dtoa_r+0x24e>
 80095d8:	2300      	movs	r3, #0
 80095da:	e7b2      	b.n	8009542 <_dtoa_r+0x242>
 80095dc:	2300      	movs	r3, #0
 80095de:	e7f0      	b.n	80095c2 <_dtoa_r+0x2c2>
 80095e0:	2501      	movs	r5, #1
 80095e2:	2300      	movs	r3, #0
 80095e4:	9509      	str	r5, [sp, #36]	; 0x24
 80095e6:	931e      	str	r3, [sp, #120]	; 0x78
 80095e8:	f04f 33ff 	mov.w	r3, #4294967295
 80095ec:	2200      	movs	r2, #0
 80095ee:	9304      	str	r3, [sp, #16]
 80095f0:	4698      	mov	r8, r3
 80095f2:	2312      	movs	r3, #18
 80095f4:	921f      	str	r2, [sp, #124]	; 0x7c
 80095f6:	e7aa      	b.n	800954e <_dtoa_r+0x24e>
 80095f8:	2301      	movs	r3, #1
 80095fa:	9309      	str	r3, [sp, #36]	; 0x24
 80095fc:	e7f4      	b.n	80095e8 <_dtoa_r+0x2e8>
 80095fe:	bf00      	nop
 8009600:	636f4361 	.word	0x636f4361
 8009604:	3fd287a7 	.word	0x3fd287a7
 8009608:	8b60c8b3 	.word	0x8b60c8b3
 800960c:	3fc68a28 	.word	0x3fc68a28
 8009610:	509f79fb 	.word	0x509f79fb
 8009614:	3fd34413 	.word	0x3fd34413
 8009618:	7ff00000 	.word	0x7ff00000
 800961c:	0800b635 	.word	0x0800b635
 8009620:	0800b62c 	.word	0x0800b62c
 8009624:	0800b609 	.word	0x0800b609
 8009628:	3ff80000 	.word	0x3ff80000
 800962c:	0800b6d0 	.word	0x0800b6d0
 8009630:	0800b6a8 	.word	0x0800b6a8
 8009634:	2301      	movs	r3, #1
 8009636:	9304      	str	r3, [sp, #16]
 8009638:	4698      	mov	r8, r3
 800963a:	461a      	mov	r2, r3
 800963c:	e7da      	b.n	80095f4 <_dtoa_r+0x2f4>
 800963e:	3101      	adds	r1, #1
 8009640:	6071      	str	r1, [r6, #4]
 8009642:	0052      	lsls	r2, r2, #1
 8009644:	e787      	b.n	8009556 <_dtoa_r+0x256>
 8009646:	07f1      	lsls	r1, r6, #31
 8009648:	d508      	bpl.n	800965c <_dtoa_r+0x35c>
 800964a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800964e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009652:	f7f6 ff41 	bl	80004d8 <__aeabi_dmul>
 8009656:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800965a:	3501      	adds	r5, #1
 800965c:	1076      	asrs	r6, r6, #1
 800965e:	3708      	adds	r7, #8
 8009660:	2e00      	cmp	r6, #0
 8009662:	d1f0      	bne.n	8009646 <_dtoa_r+0x346>
 8009664:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800966c:	f7f7 f85e 	bl	800072c <__aeabi_ddiv>
 8009670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009674:	e01b      	b.n	80096ae <_dtoa_r+0x3ae>
 8009676:	2502      	movs	r5, #2
 8009678:	e7a0      	b.n	80095bc <_dtoa_r+0x2bc>
 800967a:	f000 80a4 	beq.w	80097c6 <_dtoa_r+0x4c6>
 800967e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009682:	f1ca 0600 	rsb	r6, sl, #0
 8009686:	4ba0      	ldr	r3, [pc, #640]	; (8009908 <_dtoa_r+0x608>)
 8009688:	f006 020f 	and.w	r2, r6, #15
 800968c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f7f6 ff20 	bl	80004d8 <__aeabi_dmul>
 8009698:	2502      	movs	r5, #2
 800969a:	2300      	movs	r3, #0
 800969c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096a0:	4f9a      	ldr	r7, [pc, #616]	; (800990c <_dtoa_r+0x60c>)
 80096a2:	1136      	asrs	r6, r6, #4
 80096a4:	2e00      	cmp	r6, #0
 80096a6:	f040 8083 	bne.w	80097b0 <_dtoa_r+0x4b0>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e0      	bne.n	8009670 <_dtoa_r+0x370>
 80096ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f000 808a 	beq.w	80097ca <_dtoa_r+0x4ca>
 80096b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80096be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096c2:	2200      	movs	r2, #0
 80096c4:	4b92      	ldr	r3, [pc, #584]	; (8009910 <_dtoa_r+0x610>)
 80096c6:	f7f7 f979 	bl	80009bc <__aeabi_dcmplt>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d07d      	beq.n	80097ca <_dtoa_r+0x4ca>
 80096ce:	f1b8 0f00 	cmp.w	r8, #0
 80096d2:	d07a      	beq.n	80097ca <_dtoa_r+0x4ca>
 80096d4:	9b04      	ldr	r3, [sp, #16]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	dd36      	ble.n	8009748 <_dtoa_r+0x448>
 80096da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80096de:	2200      	movs	r2, #0
 80096e0:	4b8c      	ldr	r3, [pc, #560]	; (8009914 <_dtoa_r+0x614>)
 80096e2:	f7f6 fef9 	bl	80004d8 <__aeabi_dmul>
 80096e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096ea:	9e04      	ldr	r6, [sp, #16]
 80096ec:	f10a 37ff 	add.w	r7, sl, #4294967295
 80096f0:	3501      	adds	r5, #1
 80096f2:	4628      	mov	r0, r5
 80096f4:	f7f6 fe86 	bl	8000404 <__aeabi_i2d>
 80096f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096fc:	f7f6 feec 	bl	80004d8 <__aeabi_dmul>
 8009700:	2200      	movs	r2, #0
 8009702:	4b85      	ldr	r3, [pc, #532]	; (8009918 <_dtoa_r+0x618>)
 8009704:	f7f6 fd32 	bl	800016c <__adddf3>
 8009708:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800970c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009710:	950b      	str	r5, [sp, #44]	; 0x2c
 8009712:	2e00      	cmp	r6, #0
 8009714:	d15c      	bne.n	80097d0 <_dtoa_r+0x4d0>
 8009716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800971a:	2200      	movs	r2, #0
 800971c:	4b7f      	ldr	r3, [pc, #508]	; (800991c <_dtoa_r+0x61c>)
 800971e:	f7f6 fd23 	bl	8000168 <__aeabi_dsub>
 8009722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009724:	462b      	mov	r3, r5
 8009726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800972a:	f7f7 f965 	bl	80009f8 <__aeabi_dcmpgt>
 800972e:	2800      	cmp	r0, #0
 8009730:	f040 8281 	bne.w	8009c36 <_dtoa_r+0x936>
 8009734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800973a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800973e:	f7f7 f93d 	bl	80009bc <__aeabi_dcmplt>
 8009742:	2800      	cmp	r0, #0
 8009744:	f040 8275 	bne.w	8009c32 <_dtoa_r+0x932>
 8009748:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800974c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009750:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009752:	2b00      	cmp	r3, #0
 8009754:	f2c0 814b 	blt.w	80099ee <_dtoa_r+0x6ee>
 8009758:	f1ba 0f0e 	cmp.w	sl, #14
 800975c:	f300 8147 	bgt.w	80099ee <_dtoa_r+0x6ee>
 8009760:	4b69      	ldr	r3, [pc, #420]	; (8009908 <_dtoa_r+0x608>)
 8009762:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800976e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009770:	2b00      	cmp	r3, #0
 8009772:	f280 80d7 	bge.w	8009924 <_dtoa_r+0x624>
 8009776:	f1b8 0f00 	cmp.w	r8, #0
 800977a:	f300 80d3 	bgt.w	8009924 <_dtoa_r+0x624>
 800977e:	f040 8257 	bne.w	8009c30 <_dtoa_r+0x930>
 8009782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009786:	2200      	movs	r2, #0
 8009788:	4b64      	ldr	r3, [pc, #400]	; (800991c <_dtoa_r+0x61c>)
 800978a:	f7f6 fea5 	bl	80004d8 <__aeabi_dmul>
 800978e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009792:	f7f7 f927 	bl	80009e4 <__aeabi_dcmpge>
 8009796:	4646      	mov	r6, r8
 8009798:	4647      	mov	r7, r8
 800979a:	2800      	cmp	r0, #0
 800979c:	f040 822d 	bne.w	8009bfa <_dtoa_r+0x8fa>
 80097a0:	9b06      	ldr	r3, [sp, #24]
 80097a2:	9a06      	ldr	r2, [sp, #24]
 80097a4:	1c5d      	adds	r5, r3, #1
 80097a6:	2331      	movs	r3, #49	; 0x31
 80097a8:	f10a 0a01 	add.w	sl, sl, #1
 80097ac:	7013      	strb	r3, [r2, #0]
 80097ae:	e228      	b.n	8009c02 <_dtoa_r+0x902>
 80097b0:	07f2      	lsls	r2, r6, #31
 80097b2:	d505      	bpl.n	80097c0 <_dtoa_r+0x4c0>
 80097b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097b8:	f7f6 fe8e 	bl	80004d8 <__aeabi_dmul>
 80097bc:	2301      	movs	r3, #1
 80097be:	3501      	adds	r5, #1
 80097c0:	1076      	asrs	r6, r6, #1
 80097c2:	3708      	adds	r7, #8
 80097c4:	e76e      	b.n	80096a4 <_dtoa_r+0x3a4>
 80097c6:	2502      	movs	r5, #2
 80097c8:	e771      	b.n	80096ae <_dtoa_r+0x3ae>
 80097ca:	4657      	mov	r7, sl
 80097cc:	4646      	mov	r6, r8
 80097ce:	e790      	b.n	80096f2 <_dtoa_r+0x3f2>
 80097d0:	4b4d      	ldr	r3, [pc, #308]	; (8009908 <_dtoa_r+0x608>)
 80097d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80097d6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80097da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d048      	beq.n	8009872 <_dtoa_r+0x572>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	2000      	movs	r0, #0
 80097e6:	494e      	ldr	r1, [pc, #312]	; (8009920 <_dtoa_r+0x620>)
 80097e8:	f7f6 ffa0 	bl	800072c <__aeabi_ddiv>
 80097ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80097f0:	f7f6 fcba 	bl	8000168 <__aeabi_dsub>
 80097f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80097f8:	9d06      	ldr	r5, [sp, #24]
 80097fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097fe:	f7f7 f91b 	bl	8000a38 <__aeabi_d2iz>
 8009802:	9011      	str	r0, [sp, #68]	; 0x44
 8009804:	f7f6 fdfe 	bl	8000404 <__aeabi_i2d>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009810:	f7f6 fcaa 	bl	8000168 <__aeabi_dsub>
 8009814:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009816:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800981a:	3330      	adds	r3, #48	; 0x30
 800981c:	f805 3b01 	strb.w	r3, [r5], #1
 8009820:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009824:	f7f7 f8ca 	bl	80009bc <__aeabi_dcmplt>
 8009828:	2800      	cmp	r0, #0
 800982a:	d163      	bne.n	80098f4 <_dtoa_r+0x5f4>
 800982c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009830:	2000      	movs	r0, #0
 8009832:	4937      	ldr	r1, [pc, #220]	; (8009910 <_dtoa_r+0x610>)
 8009834:	f7f6 fc98 	bl	8000168 <__aeabi_dsub>
 8009838:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800983c:	f7f7 f8be 	bl	80009bc <__aeabi_dcmplt>
 8009840:	2800      	cmp	r0, #0
 8009842:	f040 80b5 	bne.w	80099b0 <_dtoa_r+0x6b0>
 8009846:	9b06      	ldr	r3, [sp, #24]
 8009848:	1aeb      	subs	r3, r5, r3
 800984a:	429e      	cmp	r6, r3
 800984c:	f77f af7c 	ble.w	8009748 <_dtoa_r+0x448>
 8009850:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009854:	2200      	movs	r2, #0
 8009856:	4b2f      	ldr	r3, [pc, #188]	; (8009914 <_dtoa_r+0x614>)
 8009858:	f7f6 fe3e 	bl	80004d8 <__aeabi_dmul>
 800985c:	2200      	movs	r2, #0
 800985e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009866:	4b2b      	ldr	r3, [pc, #172]	; (8009914 <_dtoa_r+0x614>)
 8009868:	f7f6 fe36 	bl	80004d8 <__aeabi_dmul>
 800986c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009870:	e7c3      	b.n	80097fa <_dtoa_r+0x4fa>
 8009872:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009876:	f7f6 fe2f 	bl	80004d8 <__aeabi_dmul>
 800987a:	9b06      	ldr	r3, [sp, #24]
 800987c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009880:	199d      	adds	r5, r3, r6
 8009882:	461e      	mov	r6, r3
 8009884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009888:	f7f7 f8d6 	bl	8000a38 <__aeabi_d2iz>
 800988c:	9011      	str	r0, [sp, #68]	; 0x44
 800988e:	f7f6 fdb9 	bl	8000404 <__aeabi_i2d>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800989a:	f7f6 fc65 	bl	8000168 <__aeabi_dsub>
 800989e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098a4:	3330      	adds	r3, #48	; 0x30
 80098a6:	f806 3b01 	strb.w	r3, [r6], #1
 80098aa:	42ae      	cmp	r6, r5
 80098ac:	f04f 0200 	mov.w	r2, #0
 80098b0:	d124      	bne.n	80098fc <_dtoa_r+0x5fc>
 80098b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098b6:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <_dtoa_r+0x620>)
 80098b8:	f7f6 fc58 	bl	800016c <__adddf3>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098c4:	f7f7 f898 	bl	80009f8 <__aeabi_dcmpgt>
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d171      	bne.n	80099b0 <_dtoa_r+0x6b0>
 80098cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80098d0:	2000      	movs	r0, #0
 80098d2:	4913      	ldr	r1, [pc, #76]	; (8009920 <_dtoa_r+0x620>)
 80098d4:	f7f6 fc48 	bl	8000168 <__aeabi_dsub>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098e0:	f7f7 f86c 	bl	80009bc <__aeabi_dcmplt>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	f43f af2f 	beq.w	8009748 <_dtoa_r+0x448>
 80098ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80098ee:	1e6a      	subs	r2, r5, #1
 80098f0:	2b30      	cmp	r3, #48	; 0x30
 80098f2:	d001      	beq.n	80098f8 <_dtoa_r+0x5f8>
 80098f4:	46ba      	mov	sl, r7
 80098f6:	e04a      	b.n	800998e <_dtoa_r+0x68e>
 80098f8:	4615      	mov	r5, r2
 80098fa:	e7f6      	b.n	80098ea <_dtoa_r+0x5ea>
 80098fc:	4b05      	ldr	r3, [pc, #20]	; (8009914 <_dtoa_r+0x614>)
 80098fe:	f7f6 fdeb 	bl	80004d8 <__aeabi_dmul>
 8009902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009906:	e7bd      	b.n	8009884 <_dtoa_r+0x584>
 8009908:	0800b6d0 	.word	0x0800b6d0
 800990c:	0800b6a8 	.word	0x0800b6a8
 8009910:	3ff00000 	.word	0x3ff00000
 8009914:	40240000 	.word	0x40240000
 8009918:	401c0000 	.word	0x401c0000
 800991c:	40140000 	.word	0x40140000
 8009920:	3fe00000 	.word	0x3fe00000
 8009924:	9d06      	ldr	r5, [sp, #24]
 8009926:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800992a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800992e:	4630      	mov	r0, r6
 8009930:	4639      	mov	r1, r7
 8009932:	f7f6 fefb 	bl	800072c <__aeabi_ddiv>
 8009936:	f7f7 f87f 	bl	8000a38 <__aeabi_d2iz>
 800993a:	4681      	mov	r9, r0
 800993c:	f7f6 fd62 	bl	8000404 <__aeabi_i2d>
 8009940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009944:	f7f6 fdc8 	bl	80004d8 <__aeabi_dmul>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	4630      	mov	r0, r6
 800994e:	4639      	mov	r1, r7
 8009950:	f7f6 fc0a 	bl	8000168 <__aeabi_dsub>
 8009954:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009958:	f805 6b01 	strb.w	r6, [r5], #1
 800995c:	9e06      	ldr	r6, [sp, #24]
 800995e:	4602      	mov	r2, r0
 8009960:	1bae      	subs	r6, r5, r6
 8009962:	45b0      	cmp	r8, r6
 8009964:	460b      	mov	r3, r1
 8009966:	d135      	bne.n	80099d4 <_dtoa_r+0x6d4>
 8009968:	f7f6 fc00 	bl	800016c <__adddf3>
 800996c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009970:	4606      	mov	r6, r0
 8009972:	460f      	mov	r7, r1
 8009974:	f7f7 f840 	bl	80009f8 <__aeabi_dcmpgt>
 8009978:	b9c8      	cbnz	r0, 80099ae <_dtoa_r+0x6ae>
 800997a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800997e:	4630      	mov	r0, r6
 8009980:	4639      	mov	r1, r7
 8009982:	f7f7 f811 	bl	80009a8 <__aeabi_dcmpeq>
 8009986:	b110      	cbz	r0, 800998e <_dtoa_r+0x68e>
 8009988:	f019 0f01 	tst.w	r9, #1
 800998c:	d10f      	bne.n	80099ae <_dtoa_r+0x6ae>
 800998e:	4659      	mov	r1, fp
 8009990:	4620      	mov	r0, r4
 8009992:	f000 fcc0 	bl	800a316 <_Bfree>
 8009996:	2300      	movs	r3, #0
 8009998:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800999a:	702b      	strb	r3, [r5, #0]
 800999c:	f10a 0301 	add.w	r3, sl, #1
 80099a0:	6013      	str	r3, [r2, #0]
 80099a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f43f acf3 	beq.w	8009390 <_dtoa_r+0x90>
 80099aa:	601d      	str	r5, [r3, #0]
 80099ac:	e4f0      	b.n	8009390 <_dtoa_r+0x90>
 80099ae:	4657      	mov	r7, sl
 80099b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099b4:	1e6b      	subs	r3, r5, #1
 80099b6:	2a39      	cmp	r2, #57	; 0x39
 80099b8:	d106      	bne.n	80099c8 <_dtoa_r+0x6c8>
 80099ba:	9a06      	ldr	r2, [sp, #24]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d107      	bne.n	80099d0 <_dtoa_r+0x6d0>
 80099c0:	2330      	movs	r3, #48	; 0x30
 80099c2:	7013      	strb	r3, [r2, #0]
 80099c4:	4613      	mov	r3, r2
 80099c6:	3701      	adds	r7, #1
 80099c8:	781a      	ldrb	r2, [r3, #0]
 80099ca:	3201      	adds	r2, #1
 80099cc:	701a      	strb	r2, [r3, #0]
 80099ce:	e791      	b.n	80098f4 <_dtoa_r+0x5f4>
 80099d0:	461d      	mov	r5, r3
 80099d2:	e7ed      	b.n	80099b0 <_dtoa_r+0x6b0>
 80099d4:	2200      	movs	r2, #0
 80099d6:	4b99      	ldr	r3, [pc, #612]	; (8009c3c <_dtoa_r+0x93c>)
 80099d8:	f7f6 fd7e 	bl	80004d8 <__aeabi_dmul>
 80099dc:	2200      	movs	r2, #0
 80099de:	2300      	movs	r3, #0
 80099e0:	4606      	mov	r6, r0
 80099e2:	460f      	mov	r7, r1
 80099e4:	f7f6 ffe0 	bl	80009a8 <__aeabi_dcmpeq>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d09e      	beq.n	800992a <_dtoa_r+0x62a>
 80099ec:	e7cf      	b.n	800998e <_dtoa_r+0x68e>
 80099ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099f0:	2a00      	cmp	r2, #0
 80099f2:	f000 8088 	beq.w	8009b06 <_dtoa_r+0x806>
 80099f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80099f8:	2a01      	cmp	r2, #1
 80099fa:	dc6d      	bgt.n	8009ad8 <_dtoa_r+0x7d8>
 80099fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	d066      	beq.n	8009ad0 <_dtoa_r+0x7d0>
 8009a02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a06:	464d      	mov	r5, r9
 8009a08:	9e08      	ldr	r6, [sp, #32]
 8009a0a:	9a07      	ldr	r2, [sp, #28]
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	441a      	add	r2, r3
 8009a10:	4620      	mov	r0, r4
 8009a12:	4499      	add	r9, r3
 8009a14:	9207      	str	r2, [sp, #28]
 8009a16:	f000 fd1e 	bl	800a456 <__i2b>
 8009a1a:	4607      	mov	r7, r0
 8009a1c:	2d00      	cmp	r5, #0
 8009a1e:	dd0b      	ble.n	8009a38 <_dtoa_r+0x738>
 8009a20:	9b07      	ldr	r3, [sp, #28]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	dd08      	ble.n	8009a38 <_dtoa_r+0x738>
 8009a26:	42ab      	cmp	r3, r5
 8009a28:	bfa8      	it	ge
 8009a2a:	462b      	movge	r3, r5
 8009a2c:	9a07      	ldr	r2, [sp, #28]
 8009a2e:	eba9 0903 	sub.w	r9, r9, r3
 8009a32:	1aed      	subs	r5, r5, r3
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	9307      	str	r3, [sp, #28]
 8009a38:	9b08      	ldr	r3, [sp, #32]
 8009a3a:	b1eb      	cbz	r3, 8009a78 <_dtoa_r+0x778>
 8009a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d065      	beq.n	8009b0e <_dtoa_r+0x80e>
 8009a42:	b18e      	cbz	r6, 8009a68 <_dtoa_r+0x768>
 8009a44:	4639      	mov	r1, r7
 8009a46:	4632      	mov	r2, r6
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 fda3 	bl	800a594 <__pow5mult>
 8009a4e:	465a      	mov	r2, fp
 8009a50:	4601      	mov	r1, r0
 8009a52:	4607      	mov	r7, r0
 8009a54:	4620      	mov	r0, r4
 8009a56:	f000 fd07 	bl	800a468 <__multiply>
 8009a5a:	4659      	mov	r1, fp
 8009a5c:	900a      	str	r0, [sp, #40]	; 0x28
 8009a5e:	4620      	mov	r0, r4
 8009a60:	f000 fc59 	bl	800a316 <_Bfree>
 8009a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a66:	469b      	mov	fp, r3
 8009a68:	9b08      	ldr	r3, [sp, #32]
 8009a6a:	1b9a      	subs	r2, r3, r6
 8009a6c:	d004      	beq.n	8009a78 <_dtoa_r+0x778>
 8009a6e:	4659      	mov	r1, fp
 8009a70:	4620      	mov	r0, r4
 8009a72:	f000 fd8f 	bl	800a594 <__pow5mult>
 8009a76:	4683      	mov	fp, r0
 8009a78:	2101      	movs	r1, #1
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 fceb 	bl	800a456 <__i2b>
 8009a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a82:	4606      	mov	r6, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f000 81c6 	beq.w	8009e16 <_dtoa_r+0xb16>
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	4601      	mov	r1, r0
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f000 fd80 	bl	800a594 <__pow5mult>
 8009a94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a96:	4606      	mov	r6, r0
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	dc3e      	bgt.n	8009b1a <_dtoa_r+0x81a>
 8009a9c:	9b02      	ldr	r3, [sp, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d137      	bne.n	8009b12 <_dtoa_r+0x812>
 8009aa2:	9b03      	ldr	r3, [sp, #12]
 8009aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d134      	bne.n	8009b16 <_dtoa_r+0x816>
 8009aac:	9b03      	ldr	r3, [sp, #12]
 8009aae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ab2:	0d1b      	lsrs	r3, r3, #20
 8009ab4:	051b      	lsls	r3, r3, #20
 8009ab6:	b12b      	cbz	r3, 8009ac4 <_dtoa_r+0x7c4>
 8009ab8:	9b07      	ldr	r3, [sp, #28]
 8009aba:	f109 0901 	add.w	r9, r9, #1
 8009abe:	3301      	adds	r3, #1
 8009ac0:	9307      	str	r3, [sp, #28]
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	9308      	str	r3, [sp, #32]
 8009ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d128      	bne.n	8009b1e <_dtoa_r+0x81e>
 8009acc:	2001      	movs	r0, #1
 8009ace:	e02e      	b.n	8009b2e <_dtoa_r+0x82e>
 8009ad0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ad2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009ad6:	e796      	b.n	8009a06 <_dtoa_r+0x706>
 8009ad8:	9b08      	ldr	r3, [sp, #32]
 8009ada:	f108 36ff 	add.w	r6, r8, #4294967295
 8009ade:	42b3      	cmp	r3, r6
 8009ae0:	bfb7      	itett	lt
 8009ae2:	9b08      	ldrlt	r3, [sp, #32]
 8009ae4:	1b9e      	subge	r6, r3, r6
 8009ae6:	1af2      	sublt	r2, r6, r3
 8009ae8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8009aea:	bfbf      	itttt	lt
 8009aec:	9608      	strlt	r6, [sp, #32]
 8009aee:	189b      	addlt	r3, r3, r2
 8009af0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009af2:	2600      	movlt	r6, #0
 8009af4:	f1b8 0f00 	cmp.w	r8, #0
 8009af8:	bfb9      	ittee	lt
 8009afa:	eba9 0508 	sublt.w	r5, r9, r8
 8009afe:	2300      	movlt	r3, #0
 8009b00:	464d      	movge	r5, r9
 8009b02:	4643      	movge	r3, r8
 8009b04:	e781      	b.n	8009a0a <_dtoa_r+0x70a>
 8009b06:	9e08      	ldr	r6, [sp, #32]
 8009b08:	464d      	mov	r5, r9
 8009b0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009b0c:	e786      	b.n	8009a1c <_dtoa_r+0x71c>
 8009b0e:	9a08      	ldr	r2, [sp, #32]
 8009b10:	e7ad      	b.n	8009a6e <_dtoa_r+0x76e>
 8009b12:	2300      	movs	r3, #0
 8009b14:	e7d6      	b.n	8009ac4 <_dtoa_r+0x7c4>
 8009b16:	9b02      	ldr	r3, [sp, #8]
 8009b18:	e7d4      	b.n	8009ac4 <_dtoa_r+0x7c4>
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	9308      	str	r3, [sp, #32]
 8009b1e:	6933      	ldr	r3, [r6, #16]
 8009b20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b24:	6918      	ldr	r0, [r3, #16]
 8009b26:	f000 fc48 	bl	800a3ba <__hi0bits>
 8009b2a:	f1c0 0020 	rsb	r0, r0, #32
 8009b2e:	9b07      	ldr	r3, [sp, #28]
 8009b30:	4418      	add	r0, r3
 8009b32:	f010 001f 	ands.w	r0, r0, #31
 8009b36:	d047      	beq.n	8009bc8 <_dtoa_r+0x8c8>
 8009b38:	f1c0 0320 	rsb	r3, r0, #32
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	dd3b      	ble.n	8009bb8 <_dtoa_r+0x8b8>
 8009b40:	9b07      	ldr	r3, [sp, #28]
 8009b42:	f1c0 001c 	rsb	r0, r0, #28
 8009b46:	4481      	add	r9, r0
 8009b48:	4405      	add	r5, r0
 8009b4a:	4403      	add	r3, r0
 8009b4c:	9307      	str	r3, [sp, #28]
 8009b4e:	f1b9 0f00 	cmp.w	r9, #0
 8009b52:	dd05      	ble.n	8009b60 <_dtoa_r+0x860>
 8009b54:	4659      	mov	r1, fp
 8009b56:	464a      	mov	r2, r9
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f000 fd69 	bl	800a630 <__lshift>
 8009b5e:	4683      	mov	fp, r0
 8009b60:	9b07      	ldr	r3, [sp, #28]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	dd05      	ble.n	8009b72 <_dtoa_r+0x872>
 8009b66:	4631      	mov	r1, r6
 8009b68:	461a      	mov	r2, r3
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f000 fd60 	bl	800a630 <__lshift>
 8009b70:	4606      	mov	r6, r0
 8009b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b74:	b353      	cbz	r3, 8009bcc <_dtoa_r+0x8cc>
 8009b76:	4631      	mov	r1, r6
 8009b78:	4658      	mov	r0, fp
 8009b7a:	f000 fdad 	bl	800a6d8 <__mcmp>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	da24      	bge.n	8009bcc <_dtoa_r+0x8cc>
 8009b82:	2300      	movs	r3, #0
 8009b84:	4659      	mov	r1, fp
 8009b86:	220a      	movs	r2, #10
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f000 fbdb 	bl	800a344 <__multadd>
 8009b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b94:	4683      	mov	fp, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f000 8144 	beq.w	8009e24 <_dtoa_r+0xb24>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	220a      	movs	r2, #10
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f000 fbce 	bl	800a344 <__multadd>
 8009ba8:	9b04      	ldr	r3, [sp, #16]
 8009baa:	4607      	mov	r7, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	dc4d      	bgt.n	8009c4c <_dtoa_r+0x94c>
 8009bb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	dd4a      	ble.n	8009c4c <_dtoa_r+0x94c>
 8009bb6:	e011      	b.n	8009bdc <_dtoa_r+0x8dc>
 8009bb8:	d0c9      	beq.n	8009b4e <_dtoa_r+0x84e>
 8009bba:	9a07      	ldr	r2, [sp, #28]
 8009bbc:	331c      	adds	r3, #28
 8009bbe:	441a      	add	r2, r3
 8009bc0:	4499      	add	r9, r3
 8009bc2:	441d      	add	r5, r3
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	e7c1      	b.n	8009b4c <_dtoa_r+0x84c>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	e7f6      	b.n	8009bba <_dtoa_r+0x8ba>
 8009bcc:	f1b8 0f00 	cmp.w	r8, #0
 8009bd0:	dc36      	bgt.n	8009c40 <_dtoa_r+0x940>
 8009bd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	dd33      	ble.n	8009c40 <_dtoa_r+0x940>
 8009bd8:	f8cd 8010 	str.w	r8, [sp, #16]
 8009bdc:	9b04      	ldr	r3, [sp, #16]
 8009bde:	b963      	cbnz	r3, 8009bfa <_dtoa_r+0x8fa>
 8009be0:	4631      	mov	r1, r6
 8009be2:	2205      	movs	r2, #5
 8009be4:	4620      	mov	r0, r4
 8009be6:	f000 fbad 	bl	800a344 <__multadd>
 8009bea:	4601      	mov	r1, r0
 8009bec:	4606      	mov	r6, r0
 8009bee:	4658      	mov	r0, fp
 8009bf0:	f000 fd72 	bl	800a6d8 <__mcmp>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	f73f add3 	bgt.w	80097a0 <_dtoa_r+0x4a0>
 8009bfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009bfc:	9d06      	ldr	r5, [sp, #24]
 8009bfe:	ea6f 0a03 	mvn.w	sl, r3
 8009c02:	f04f 0900 	mov.w	r9, #0
 8009c06:	4631      	mov	r1, r6
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f000 fb84 	bl	800a316 <_Bfree>
 8009c0e:	2f00      	cmp	r7, #0
 8009c10:	f43f aebd 	beq.w	800998e <_dtoa_r+0x68e>
 8009c14:	f1b9 0f00 	cmp.w	r9, #0
 8009c18:	d005      	beq.n	8009c26 <_dtoa_r+0x926>
 8009c1a:	45b9      	cmp	r9, r7
 8009c1c:	d003      	beq.n	8009c26 <_dtoa_r+0x926>
 8009c1e:	4649      	mov	r1, r9
 8009c20:	4620      	mov	r0, r4
 8009c22:	f000 fb78 	bl	800a316 <_Bfree>
 8009c26:	4639      	mov	r1, r7
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 fb74 	bl	800a316 <_Bfree>
 8009c2e:	e6ae      	b.n	800998e <_dtoa_r+0x68e>
 8009c30:	2600      	movs	r6, #0
 8009c32:	4637      	mov	r7, r6
 8009c34:	e7e1      	b.n	8009bfa <_dtoa_r+0x8fa>
 8009c36:	46ba      	mov	sl, r7
 8009c38:	4637      	mov	r7, r6
 8009c3a:	e5b1      	b.n	80097a0 <_dtoa_r+0x4a0>
 8009c3c:	40240000 	.word	0x40240000
 8009c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c42:	f8cd 8010 	str.w	r8, [sp, #16]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f000 80f3 	beq.w	8009e32 <_dtoa_r+0xb32>
 8009c4c:	2d00      	cmp	r5, #0
 8009c4e:	dd05      	ble.n	8009c5c <_dtoa_r+0x95c>
 8009c50:	4639      	mov	r1, r7
 8009c52:	462a      	mov	r2, r5
 8009c54:	4620      	mov	r0, r4
 8009c56:	f000 fceb 	bl	800a630 <__lshift>
 8009c5a:	4607      	mov	r7, r0
 8009c5c:	9b08      	ldr	r3, [sp, #32]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d04c      	beq.n	8009cfc <_dtoa_r+0x9fc>
 8009c62:	6879      	ldr	r1, [r7, #4]
 8009c64:	4620      	mov	r0, r4
 8009c66:	f000 fb22 	bl	800a2ae <_Balloc>
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	f107 010c 	add.w	r1, r7, #12
 8009c72:	3202      	adds	r2, #2
 8009c74:	0092      	lsls	r2, r2, #2
 8009c76:	300c      	adds	r0, #12
 8009c78:	f000 fb0e 	bl	800a298 <memcpy>
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	4629      	mov	r1, r5
 8009c80:	4620      	mov	r0, r4
 8009c82:	f000 fcd5 	bl	800a630 <__lshift>
 8009c86:	46b9      	mov	r9, r7
 8009c88:	4607      	mov	r7, r0
 8009c8a:	9b06      	ldr	r3, [sp, #24]
 8009c8c:	9307      	str	r3, [sp, #28]
 8009c8e:	9b02      	ldr	r3, [sp, #8]
 8009c90:	f003 0301 	and.w	r3, r3, #1
 8009c94:	9308      	str	r3, [sp, #32]
 8009c96:	4631      	mov	r1, r6
 8009c98:	4658      	mov	r0, fp
 8009c9a:	f7ff faa1 	bl	80091e0 <quorem>
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009ca6:	4658      	mov	r0, fp
 8009ca8:	f000 fd16 	bl	800a6d8 <__mcmp>
 8009cac:	463a      	mov	r2, r7
 8009cae:	9002      	str	r0, [sp, #8]
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f000 fd2a 	bl	800a70c <__mdiff>
 8009cb8:	68c3      	ldr	r3, [r0, #12]
 8009cba:	4602      	mov	r2, r0
 8009cbc:	bb03      	cbnz	r3, 8009d00 <_dtoa_r+0xa00>
 8009cbe:	4601      	mov	r1, r0
 8009cc0:	9009      	str	r0, [sp, #36]	; 0x24
 8009cc2:	4658      	mov	r0, fp
 8009cc4:	f000 fd08 	bl	800a6d8 <__mcmp>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ccc:	4611      	mov	r1, r2
 8009cce:	4620      	mov	r0, r4
 8009cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd2:	f000 fb20 	bl	800a316 <_Bfree>
 8009cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd8:	b9a3      	cbnz	r3, 8009d04 <_dtoa_r+0xa04>
 8009cda:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009cdc:	b992      	cbnz	r2, 8009d04 <_dtoa_r+0xa04>
 8009cde:	9a08      	ldr	r2, [sp, #32]
 8009ce0:	b982      	cbnz	r2, 8009d04 <_dtoa_r+0xa04>
 8009ce2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009ce6:	d029      	beq.n	8009d3c <_dtoa_r+0xa3c>
 8009ce8:	9b02      	ldr	r3, [sp, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dd01      	ble.n	8009cf2 <_dtoa_r+0x9f2>
 8009cee:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009cf2:	9b07      	ldr	r3, [sp, #28]
 8009cf4:	1c5d      	adds	r5, r3, #1
 8009cf6:	f883 8000 	strb.w	r8, [r3]
 8009cfa:	e784      	b.n	8009c06 <_dtoa_r+0x906>
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	e7c2      	b.n	8009c86 <_dtoa_r+0x986>
 8009d00:	2301      	movs	r3, #1
 8009d02:	e7e3      	b.n	8009ccc <_dtoa_r+0x9cc>
 8009d04:	9a02      	ldr	r2, [sp, #8]
 8009d06:	2a00      	cmp	r2, #0
 8009d08:	db04      	blt.n	8009d14 <_dtoa_r+0xa14>
 8009d0a:	d123      	bne.n	8009d54 <_dtoa_r+0xa54>
 8009d0c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009d0e:	bb0a      	cbnz	r2, 8009d54 <_dtoa_r+0xa54>
 8009d10:	9a08      	ldr	r2, [sp, #32]
 8009d12:	b9fa      	cbnz	r2, 8009d54 <_dtoa_r+0xa54>
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	ddec      	ble.n	8009cf2 <_dtoa_r+0x9f2>
 8009d18:	4659      	mov	r1, fp
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	f000 fc87 	bl	800a630 <__lshift>
 8009d22:	4631      	mov	r1, r6
 8009d24:	4683      	mov	fp, r0
 8009d26:	f000 fcd7 	bl	800a6d8 <__mcmp>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	dc03      	bgt.n	8009d36 <_dtoa_r+0xa36>
 8009d2e:	d1e0      	bne.n	8009cf2 <_dtoa_r+0x9f2>
 8009d30:	f018 0f01 	tst.w	r8, #1
 8009d34:	d0dd      	beq.n	8009cf2 <_dtoa_r+0x9f2>
 8009d36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009d3a:	d1d8      	bne.n	8009cee <_dtoa_r+0x9ee>
 8009d3c:	9b07      	ldr	r3, [sp, #28]
 8009d3e:	9a07      	ldr	r2, [sp, #28]
 8009d40:	1c5d      	adds	r5, r3, #1
 8009d42:	2339      	movs	r3, #57	; 0x39
 8009d44:	7013      	strb	r3, [r2, #0]
 8009d46:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d4a:	1e6a      	subs	r2, r5, #1
 8009d4c:	2b39      	cmp	r3, #57	; 0x39
 8009d4e:	d04d      	beq.n	8009dec <_dtoa_r+0xaec>
 8009d50:	3301      	adds	r3, #1
 8009d52:	e052      	b.n	8009dfa <_dtoa_r+0xafa>
 8009d54:	9a07      	ldr	r2, [sp, #28]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f102 0501 	add.w	r5, r2, #1
 8009d5c:	dd06      	ble.n	8009d6c <_dtoa_r+0xa6c>
 8009d5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009d62:	d0eb      	beq.n	8009d3c <_dtoa_r+0xa3c>
 8009d64:	f108 0801 	add.w	r8, r8, #1
 8009d68:	9b07      	ldr	r3, [sp, #28]
 8009d6a:	e7c4      	b.n	8009cf6 <_dtoa_r+0x9f6>
 8009d6c:	9b06      	ldr	r3, [sp, #24]
 8009d6e:	9a04      	ldr	r2, [sp, #16]
 8009d70:	1aeb      	subs	r3, r5, r3
 8009d72:	4293      	cmp	r3, r2
 8009d74:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009d78:	d021      	beq.n	8009dbe <_dtoa_r+0xabe>
 8009d7a:	4659      	mov	r1, fp
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	220a      	movs	r2, #10
 8009d80:	4620      	mov	r0, r4
 8009d82:	f000 fadf 	bl	800a344 <__multadd>
 8009d86:	45b9      	cmp	r9, r7
 8009d88:	4683      	mov	fp, r0
 8009d8a:	f04f 0300 	mov.w	r3, #0
 8009d8e:	f04f 020a 	mov.w	r2, #10
 8009d92:	4649      	mov	r1, r9
 8009d94:	4620      	mov	r0, r4
 8009d96:	d105      	bne.n	8009da4 <_dtoa_r+0xaa4>
 8009d98:	f000 fad4 	bl	800a344 <__multadd>
 8009d9c:	4681      	mov	r9, r0
 8009d9e:	4607      	mov	r7, r0
 8009da0:	9507      	str	r5, [sp, #28]
 8009da2:	e778      	b.n	8009c96 <_dtoa_r+0x996>
 8009da4:	f000 face 	bl	800a344 <__multadd>
 8009da8:	4639      	mov	r1, r7
 8009daa:	4681      	mov	r9, r0
 8009dac:	2300      	movs	r3, #0
 8009dae:	220a      	movs	r2, #10
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 fac7 	bl	800a344 <__multadd>
 8009db6:	4607      	mov	r7, r0
 8009db8:	e7f2      	b.n	8009da0 <_dtoa_r+0xaa0>
 8009dba:	f04f 0900 	mov.w	r9, #0
 8009dbe:	4659      	mov	r1, fp
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f000 fc34 	bl	800a630 <__lshift>
 8009dc8:	4631      	mov	r1, r6
 8009dca:	4683      	mov	fp, r0
 8009dcc:	f000 fc84 	bl	800a6d8 <__mcmp>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	dcb8      	bgt.n	8009d46 <_dtoa_r+0xa46>
 8009dd4:	d102      	bne.n	8009ddc <_dtoa_r+0xadc>
 8009dd6:	f018 0f01 	tst.w	r8, #1
 8009dda:	d1b4      	bne.n	8009d46 <_dtoa_r+0xa46>
 8009ddc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009de0:	1e6a      	subs	r2, r5, #1
 8009de2:	2b30      	cmp	r3, #48	; 0x30
 8009de4:	f47f af0f 	bne.w	8009c06 <_dtoa_r+0x906>
 8009de8:	4615      	mov	r5, r2
 8009dea:	e7f7      	b.n	8009ddc <_dtoa_r+0xadc>
 8009dec:	9b06      	ldr	r3, [sp, #24]
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d105      	bne.n	8009dfe <_dtoa_r+0xafe>
 8009df2:	2331      	movs	r3, #49	; 0x31
 8009df4:	9a06      	ldr	r2, [sp, #24]
 8009df6:	f10a 0a01 	add.w	sl, sl, #1
 8009dfa:	7013      	strb	r3, [r2, #0]
 8009dfc:	e703      	b.n	8009c06 <_dtoa_r+0x906>
 8009dfe:	4615      	mov	r5, r2
 8009e00:	e7a1      	b.n	8009d46 <_dtoa_r+0xa46>
 8009e02:	4b17      	ldr	r3, [pc, #92]	; (8009e60 <_dtoa_r+0xb60>)
 8009e04:	f7ff bae1 	b.w	80093ca <_dtoa_r+0xca>
 8009e08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f47f aabb 	bne.w	8009386 <_dtoa_r+0x86>
 8009e10:	4b14      	ldr	r3, [pc, #80]	; (8009e64 <_dtoa_r+0xb64>)
 8009e12:	f7ff bada 	b.w	80093ca <_dtoa_r+0xca>
 8009e16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	f77f ae3f 	ble.w	8009a9c <_dtoa_r+0x79c>
 8009e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e20:	9308      	str	r3, [sp, #32]
 8009e22:	e653      	b.n	8009acc <_dtoa_r+0x7cc>
 8009e24:	9b04      	ldr	r3, [sp, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	dc03      	bgt.n	8009e32 <_dtoa_r+0xb32>
 8009e2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	f73f aed5 	bgt.w	8009bdc <_dtoa_r+0x8dc>
 8009e32:	9d06      	ldr	r5, [sp, #24]
 8009e34:	4631      	mov	r1, r6
 8009e36:	4658      	mov	r0, fp
 8009e38:	f7ff f9d2 	bl	80091e0 <quorem>
 8009e3c:	9b06      	ldr	r3, [sp, #24]
 8009e3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009e42:	f805 8b01 	strb.w	r8, [r5], #1
 8009e46:	9a04      	ldr	r2, [sp, #16]
 8009e48:	1aeb      	subs	r3, r5, r3
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	ddb5      	ble.n	8009dba <_dtoa_r+0xaba>
 8009e4e:	4659      	mov	r1, fp
 8009e50:	2300      	movs	r3, #0
 8009e52:	220a      	movs	r2, #10
 8009e54:	4620      	mov	r0, r4
 8009e56:	f000 fa75 	bl	800a344 <__multadd>
 8009e5a:	4683      	mov	fp, r0
 8009e5c:	e7ea      	b.n	8009e34 <_dtoa_r+0xb34>
 8009e5e:	bf00      	nop
 8009e60:	0800b608 	.word	0x0800b608
 8009e64:	0800b62c 	.word	0x0800b62c

08009e68 <__sflush_r>:
 8009e68:	898a      	ldrh	r2, [r1, #12]
 8009e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6e:	4605      	mov	r5, r0
 8009e70:	0710      	lsls	r0, r2, #28
 8009e72:	460c      	mov	r4, r1
 8009e74:	d458      	bmi.n	8009f28 <__sflush_r+0xc0>
 8009e76:	684b      	ldr	r3, [r1, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dc05      	bgt.n	8009e88 <__sflush_r+0x20>
 8009e7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	dc02      	bgt.n	8009e88 <__sflush_r+0x20>
 8009e82:	2000      	movs	r0, #0
 8009e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e8a:	2e00      	cmp	r6, #0
 8009e8c:	d0f9      	beq.n	8009e82 <__sflush_r+0x1a>
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e94:	682f      	ldr	r7, [r5, #0]
 8009e96:	6a21      	ldr	r1, [r4, #32]
 8009e98:	602b      	str	r3, [r5, #0]
 8009e9a:	d032      	beq.n	8009f02 <__sflush_r+0x9a>
 8009e9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e9e:	89a3      	ldrh	r3, [r4, #12]
 8009ea0:	075a      	lsls	r2, r3, #29
 8009ea2:	d505      	bpl.n	8009eb0 <__sflush_r+0x48>
 8009ea4:	6863      	ldr	r3, [r4, #4]
 8009ea6:	1ac0      	subs	r0, r0, r3
 8009ea8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009eaa:	b10b      	cbz	r3, 8009eb0 <__sflush_r+0x48>
 8009eac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009eae:	1ac0      	subs	r0, r0, r3
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eb6:	6a21      	ldr	r1, [r4, #32]
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b0      	blx	r6
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	d106      	bne.n	8009ed0 <__sflush_r+0x68>
 8009ec2:	6829      	ldr	r1, [r5, #0]
 8009ec4:	291d      	cmp	r1, #29
 8009ec6:	d848      	bhi.n	8009f5a <__sflush_r+0xf2>
 8009ec8:	4a29      	ldr	r2, [pc, #164]	; (8009f70 <__sflush_r+0x108>)
 8009eca:	40ca      	lsrs	r2, r1
 8009ecc:	07d6      	lsls	r6, r2, #31
 8009ece:	d544      	bpl.n	8009f5a <__sflush_r+0xf2>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	6062      	str	r2, [r4, #4]
 8009ed4:	6922      	ldr	r2, [r4, #16]
 8009ed6:	04d9      	lsls	r1, r3, #19
 8009ed8:	6022      	str	r2, [r4, #0]
 8009eda:	d504      	bpl.n	8009ee6 <__sflush_r+0x7e>
 8009edc:	1c42      	adds	r2, r0, #1
 8009ede:	d101      	bne.n	8009ee4 <__sflush_r+0x7c>
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	b903      	cbnz	r3, 8009ee6 <__sflush_r+0x7e>
 8009ee4:	6560      	str	r0, [r4, #84]	; 0x54
 8009ee6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ee8:	602f      	str	r7, [r5, #0]
 8009eea:	2900      	cmp	r1, #0
 8009eec:	d0c9      	beq.n	8009e82 <__sflush_r+0x1a>
 8009eee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ef2:	4299      	cmp	r1, r3
 8009ef4:	d002      	beq.n	8009efc <__sflush_r+0x94>
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f000 fcc4 	bl	800a884 <_free_r>
 8009efc:	2000      	movs	r0, #0
 8009efe:	6360      	str	r0, [r4, #52]	; 0x34
 8009f00:	e7c0      	b.n	8009e84 <__sflush_r+0x1c>
 8009f02:	2301      	movs	r3, #1
 8009f04:	4628      	mov	r0, r5
 8009f06:	47b0      	blx	r6
 8009f08:	1c41      	adds	r1, r0, #1
 8009f0a:	d1c8      	bne.n	8009e9e <__sflush_r+0x36>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d0c5      	beq.n	8009e9e <__sflush_r+0x36>
 8009f12:	2b1d      	cmp	r3, #29
 8009f14:	d001      	beq.n	8009f1a <__sflush_r+0xb2>
 8009f16:	2b16      	cmp	r3, #22
 8009f18:	d101      	bne.n	8009f1e <__sflush_r+0xb6>
 8009f1a:	602f      	str	r7, [r5, #0]
 8009f1c:	e7b1      	b.n	8009e82 <__sflush_r+0x1a>
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f24:	81a3      	strh	r3, [r4, #12]
 8009f26:	e7ad      	b.n	8009e84 <__sflush_r+0x1c>
 8009f28:	690f      	ldr	r7, [r1, #16]
 8009f2a:	2f00      	cmp	r7, #0
 8009f2c:	d0a9      	beq.n	8009e82 <__sflush_r+0x1a>
 8009f2e:	0793      	lsls	r3, r2, #30
 8009f30:	bf18      	it	ne
 8009f32:	2300      	movne	r3, #0
 8009f34:	680e      	ldr	r6, [r1, #0]
 8009f36:	bf08      	it	eq
 8009f38:	694b      	ldreq	r3, [r1, #20]
 8009f3a:	eba6 0807 	sub.w	r8, r6, r7
 8009f3e:	600f      	str	r7, [r1, #0]
 8009f40:	608b      	str	r3, [r1, #8]
 8009f42:	f1b8 0f00 	cmp.w	r8, #0
 8009f46:	dd9c      	ble.n	8009e82 <__sflush_r+0x1a>
 8009f48:	4643      	mov	r3, r8
 8009f4a:	463a      	mov	r2, r7
 8009f4c:	6a21      	ldr	r1, [r4, #32]
 8009f4e:	4628      	mov	r0, r5
 8009f50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f52:	47b0      	blx	r6
 8009f54:	2800      	cmp	r0, #0
 8009f56:	dc06      	bgt.n	8009f66 <__sflush_r+0xfe>
 8009f58:	89a3      	ldrh	r3, [r4, #12]
 8009f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f5e:	81a3      	strh	r3, [r4, #12]
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295
 8009f64:	e78e      	b.n	8009e84 <__sflush_r+0x1c>
 8009f66:	4407      	add	r7, r0
 8009f68:	eba8 0800 	sub.w	r8, r8, r0
 8009f6c:	e7e9      	b.n	8009f42 <__sflush_r+0xda>
 8009f6e:	bf00      	nop
 8009f70:	20400001 	.word	0x20400001

08009f74 <_fflush_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	690b      	ldr	r3, [r1, #16]
 8009f78:	4605      	mov	r5, r0
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	b1db      	cbz	r3, 8009fb6 <_fflush_r+0x42>
 8009f7e:	b118      	cbz	r0, 8009f88 <_fflush_r+0x14>
 8009f80:	6983      	ldr	r3, [r0, #24]
 8009f82:	b90b      	cbnz	r3, 8009f88 <_fflush_r+0x14>
 8009f84:	f000 f860 	bl	800a048 <__sinit>
 8009f88:	4b0c      	ldr	r3, [pc, #48]	; (8009fbc <_fflush_r+0x48>)
 8009f8a:	429c      	cmp	r4, r3
 8009f8c:	d109      	bne.n	8009fa2 <_fflush_r+0x2e>
 8009f8e:	686c      	ldr	r4, [r5, #4]
 8009f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f94:	b17b      	cbz	r3, 8009fb6 <_fflush_r+0x42>
 8009f96:	4621      	mov	r1, r4
 8009f98:	4628      	mov	r0, r5
 8009f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f9e:	f7ff bf63 	b.w	8009e68 <__sflush_r>
 8009fa2:	4b07      	ldr	r3, [pc, #28]	; (8009fc0 <_fflush_r+0x4c>)
 8009fa4:	429c      	cmp	r4, r3
 8009fa6:	d101      	bne.n	8009fac <_fflush_r+0x38>
 8009fa8:	68ac      	ldr	r4, [r5, #8]
 8009faa:	e7f1      	b.n	8009f90 <_fflush_r+0x1c>
 8009fac:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <_fflush_r+0x50>)
 8009fae:	429c      	cmp	r4, r3
 8009fb0:	bf08      	it	eq
 8009fb2:	68ec      	ldreq	r4, [r5, #12]
 8009fb4:	e7ec      	b.n	8009f90 <_fflush_r+0x1c>
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	bd38      	pop	{r3, r4, r5, pc}
 8009fba:	bf00      	nop
 8009fbc:	0800b65c 	.word	0x0800b65c
 8009fc0:	0800b67c 	.word	0x0800b67c
 8009fc4:	0800b63c 	.word	0x0800b63c

08009fc8 <std>:
 8009fc8:	2300      	movs	r3, #0
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	e9c0 3300 	strd	r3, r3, [r0]
 8009fd2:	6083      	str	r3, [r0, #8]
 8009fd4:	8181      	strh	r1, [r0, #12]
 8009fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8009fd8:	81c2      	strh	r2, [r0, #14]
 8009fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fde:	6183      	str	r3, [r0, #24]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	2208      	movs	r2, #8
 8009fe4:	305c      	adds	r0, #92	; 0x5c
 8009fe6:	f7fe faa1 	bl	800852c <memset>
 8009fea:	4b05      	ldr	r3, [pc, #20]	; (800a000 <std+0x38>)
 8009fec:	6224      	str	r4, [r4, #32]
 8009fee:	6263      	str	r3, [r4, #36]	; 0x24
 8009ff0:	4b04      	ldr	r3, [pc, #16]	; (800a004 <std+0x3c>)
 8009ff2:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ff4:	4b04      	ldr	r3, [pc, #16]	; (800a008 <std+0x40>)
 8009ff6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ff8:	4b04      	ldr	r3, [pc, #16]	; (800a00c <std+0x44>)
 8009ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	bf00      	nop
 800a000:	0800af7d 	.word	0x0800af7d
 800a004:	0800af9f 	.word	0x0800af9f
 800a008:	0800afd7 	.word	0x0800afd7
 800a00c:	0800affb 	.word	0x0800affb

0800a010 <_cleanup_r>:
 800a010:	4901      	ldr	r1, [pc, #4]	; (800a018 <_cleanup_r+0x8>)
 800a012:	f000 b885 	b.w	800a120 <_fwalk_reent>
 800a016:	bf00      	nop
 800a018:	08009f75 	.word	0x08009f75

0800a01c <__sfmoreglue>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	2568      	movs	r5, #104	; 0x68
 800a020:	1e4a      	subs	r2, r1, #1
 800a022:	4355      	muls	r5, r2
 800a024:	460e      	mov	r6, r1
 800a026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a02a:	f000 fc77 	bl	800a91c <_malloc_r>
 800a02e:	4604      	mov	r4, r0
 800a030:	b140      	cbz	r0, 800a044 <__sfmoreglue+0x28>
 800a032:	2100      	movs	r1, #0
 800a034:	e9c0 1600 	strd	r1, r6, [r0]
 800a038:	300c      	adds	r0, #12
 800a03a:	60a0      	str	r0, [r4, #8]
 800a03c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a040:	f7fe fa74 	bl	800852c <memset>
 800a044:	4620      	mov	r0, r4
 800a046:	bd70      	pop	{r4, r5, r6, pc}

0800a048 <__sinit>:
 800a048:	6983      	ldr	r3, [r0, #24]
 800a04a:	b510      	push	{r4, lr}
 800a04c:	4604      	mov	r4, r0
 800a04e:	bb33      	cbnz	r3, 800a09e <__sinit+0x56>
 800a050:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a054:	6503      	str	r3, [r0, #80]	; 0x50
 800a056:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <__sinit+0x58>)
 800a058:	4a12      	ldr	r2, [pc, #72]	; (800a0a4 <__sinit+0x5c>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6282      	str	r2, [r0, #40]	; 0x28
 800a05e:	4298      	cmp	r0, r3
 800a060:	bf04      	itt	eq
 800a062:	2301      	moveq	r3, #1
 800a064:	6183      	streq	r3, [r0, #24]
 800a066:	f000 f81f 	bl	800a0a8 <__sfp>
 800a06a:	6060      	str	r0, [r4, #4]
 800a06c:	4620      	mov	r0, r4
 800a06e:	f000 f81b 	bl	800a0a8 <__sfp>
 800a072:	60a0      	str	r0, [r4, #8]
 800a074:	4620      	mov	r0, r4
 800a076:	f000 f817 	bl	800a0a8 <__sfp>
 800a07a:	2200      	movs	r2, #0
 800a07c:	60e0      	str	r0, [r4, #12]
 800a07e:	2104      	movs	r1, #4
 800a080:	6860      	ldr	r0, [r4, #4]
 800a082:	f7ff ffa1 	bl	8009fc8 <std>
 800a086:	2201      	movs	r2, #1
 800a088:	2109      	movs	r1, #9
 800a08a:	68a0      	ldr	r0, [r4, #8]
 800a08c:	f7ff ff9c 	bl	8009fc8 <std>
 800a090:	2202      	movs	r2, #2
 800a092:	2112      	movs	r1, #18
 800a094:	68e0      	ldr	r0, [r4, #12]
 800a096:	f7ff ff97 	bl	8009fc8 <std>
 800a09a:	2301      	movs	r3, #1
 800a09c:	61a3      	str	r3, [r4, #24]
 800a09e:	bd10      	pop	{r4, pc}
 800a0a0:	0800b5f4 	.word	0x0800b5f4
 800a0a4:	0800a011 	.word	0x0800a011

0800a0a8 <__sfp>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	4b1b      	ldr	r3, [pc, #108]	; (800a118 <__sfp+0x70>)
 800a0ac:	4607      	mov	r7, r0
 800a0ae:	681e      	ldr	r6, [r3, #0]
 800a0b0:	69b3      	ldr	r3, [r6, #24]
 800a0b2:	b913      	cbnz	r3, 800a0ba <__sfp+0x12>
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	f7ff ffc7 	bl	800a048 <__sinit>
 800a0ba:	3648      	adds	r6, #72	; 0x48
 800a0bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	d503      	bpl.n	800a0cc <__sfp+0x24>
 800a0c4:	6833      	ldr	r3, [r6, #0]
 800a0c6:	b133      	cbz	r3, 800a0d6 <__sfp+0x2e>
 800a0c8:	6836      	ldr	r6, [r6, #0]
 800a0ca:	e7f7      	b.n	800a0bc <__sfp+0x14>
 800a0cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0d0:	b16d      	cbz	r5, 800a0ee <__sfp+0x46>
 800a0d2:	3468      	adds	r4, #104	; 0x68
 800a0d4:	e7f4      	b.n	800a0c0 <__sfp+0x18>
 800a0d6:	2104      	movs	r1, #4
 800a0d8:	4638      	mov	r0, r7
 800a0da:	f7ff ff9f 	bl	800a01c <__sfmoreglue>
 800a0de:	6030      	str	r0, [r6, #0]
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d1f1      	bne.n	800a0c8 <__sfp+0x20>
 800a0e4:	230c      	movs	r3, #12
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	603b      	str	r3, [r7, #0]
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ee:	4b0b      	ldr	r3, [pc, #44]	; (800a11c <__sfp+0x74>)
 800a0f0:	6665      	str	r5, [r4, #100]	; 0x64
 800a0f2:	e9c4 5500 	strd	r5, r5, [r4]
 800a0f6:	60a5      	str	r5, [r4, #8]
 800a0f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a0fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a100:	2208      	movs	r2, #8
 800a102:	4629      	mov	r1, r5
 800a104:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a108:	f7fe fa10 	bl	800852c <memset>
 800a10c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a110:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a114:	e7e9      	b.n	800a0ea <__sfp+0x42>
 800a116:	bf00      	nop
 800a118:	0800b5f4 	.word	0x0800b5f4
 800a11c:	ffff0001 	.word	0xffff0001

0800a120 <_fwalk_reent>:
 800a120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a124:	4680      	mov	r8, r0
 800a126:	4689      	mov	r9, r1
 800a128:	2600      	movs	r6, #0
 800a12a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a12e:	b914      	cbnz	r4, 800a136 <_fwalk_reent+0x16>
 800a130:	4630      	mov	r0, r6
 800a132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a136:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a13a:	3f01      	subs	r7, #1
 800a13c:	d501      	bpl.n	800a142 <_fwalk_reent+0x22>
 800a13e:	6824      	ldr	r4, [r4, #0]
 800a140:	e7f5      	b.n	800a12e <_fwalk_reent+0xe>
 800a142:	89ab      	ldrh	r3, [r5, #12]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d907      	bls.n	800a158 <_fwalk_reent+0x38>
 800a148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a14c:	3301      	adds	r3, #1
 800a14e:	d003      	beq.n	800a158 <_fwalk_reent+0x38>
 800a150:	4629      	mov	r1, r5
 800a152:	4640      	mov	r0, r8
 800a154:	47c8      	blx	r9
 800a156:	4306      	orrs	r6, r0
 800a158:	3568      	adds	r5, #104	; 0x68
 800a15a:	e7ee      	b.n	800a13a <_fwalk_reent+0x1a>

0800a15c <__locale_ctype_ptr_l>:
 800a15c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a160:	4770      	bx	lr
	...

0800a164 <_localeconv_r>:
 800a164:	4b04      	ldr	r3, [pc, #16]	; (800a178 <_localeconv_r+0x14>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6a18      	ldr	r0, [r3, #32]
 800a16a:	4b04      	ldr	r3, [pc, #16]	; (800a17c <_localeconv_r+0x18>)
 800a16c:	2800      	cmp	r0, #0
 800a16e:	bf08      	it	eq
 800a170:	4618      	moveq	r0, r3
 800a172:	30f0      	adds	r0, #240	; 0xf0
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	20000038 	.word	0x20000038
 800a17c:	2000009c 	.word	0x2000009c

0800a180 <__swhatbuf_r>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	460e      	mov	r6, r1
 800a184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a188:	b096      	sub	sp, #88	; 0x58
 800a18a:	2900      	cmp	r1, #0
 800a18c:	4614      	mov	r4, r2
 800a18e:	461d      	mov	r5, r3
 800a190:	da07      	bge.n	800a1a2 <__swhatbuf_r+0x22>
 800a192:	2300      	movs	r3, #0
 800a194:	602b      	str	r3, [r5, #0]
 800a196:	89b3      	ldrh	r3, [r6, #12]
 800a198:	061a      	lsls	r2, r3, #24
 800a19a:	d410      	bmi.n	800a1be <__swhatbuf_r+0x3e>
 800a19c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1a0:	e00e      	b.n	800a1c0 <__swhatbuf_r+0x40>
 800a1a2:	466a      	mov	r2, sp
 800a1a4:	f000 ff5c 	bl	800b060 <_fstat_r>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	dbf2      	blt.n	800a192 <__swhatbuf_r+0x12>
 800a1ac:	9a01      	ldr	r2, [sp, #4]
 800a1ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1b6:	425a      	negs	r2, r3
 800a1b8:	415a      	adcs	r2, r3
 800a1ba:	602a      	str	r2, [r5, #0]
 800a1bc:	e7ee      	b.n	800a19c <__swhatbuf_r+0x1c>
 800a1be:	2340      	movs	r3, #64	; 0x40
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	b016      	add	sp, #88	; 0x58
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}

0800a1c8 <__smakebuf_r>:
 800a1c8:	898b      	ldrh	r3, [r1, #12]
 800a1ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1cc:	079d      	lsls	r5, r3, #30
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	d507      	bpl.n	800a1e4 <__smakebuf_r+0x1c>
 800a1d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	6123      	str	r3, [r4, #16]
 800a1dc:	2301      	movs	r3, #1
 800a1de:	6163      	str	r3, [r4, #20]
 800a1e0:	b002      	add	sp, #8
 800a1e2:	bd70      	pop	{r4, r5, r6, pc}
 800a1e4:	ab01      	add	r3, sp, #4
 800a1e6:	466a      	mov	r2, sp
 800a1e8:	f7ff ffca 	bl	800a180 <__swhatbuf_r>
 800a1ec:	9900      	ldr	r1, [sp, #0]
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	f000 fb93 	bl	800a91c <_malloc_r>
 800a1f6:	b948      	cbnz	r0, 800a20c <__smakebuf_r+0x44>
 800a1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1fc:	059a      	lsls	r2, r3, #22
 800a1fe:	d4ef      	bmi.n	800a1e0 <__smakebuf_r+0x18>
 800a200:	f023 0303 	bic.w	r3, r3, #3
 800a204:	f043 0302 	orr.w	r3, r3, #2
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	e7e3      	b.n	800a1d4 <__smakebuf_r+0xc>
 800a20c:	4b0d      	ldr	r3, [pc, #52]	; (800a244 <__smakebuf_r+0x7c>)
 800a20e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	6020      	str	r0, [r4, #0]
 800a214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a218:	81a3      	strh	r3, [r4, #12]
 800a21a:	9b00      	ldr	r3, [sp, #0]
 800a21c:	6120      	str	r0, [r4, #16]
 800a21e:	6163      	str	r3, [r4, #20]
 800a220:	9b01      	ldr	r3, [sp, #4]
 800a222:	b15b      	cbz	r3, 800a23c <__smakebuf_r+0x74>
 800a224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a228:	4630      	mov	r0, r6
 800a22a:	f000 ff2b 	bl	800b084 <_isatty_r>
 800a22e:	b128      	cbz	r0, 800a23c <__smakebuf_r+0x74>
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	f023 0303 	bic.w	r3, r3, #3
 800a236:	f043 0301 	orr.w	r3, r3, #1
 800a23a:	81a3      	strh	r3, [r4, #12]
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	431d      	orrs	r5, r3
 800a240:	81a5      	strh	r5, [r4, #12]
 800a242:	e7cd      	b.n	800a1e0 <__smakebuf_r+0x18>
 800a244:	0800a011 	.word	0x0800a011

0800a248 <malloc>:
 800a248:	4b02      	ldr	r3, [pc, #8]	; (800a254 <malloc+0xc>)
 800a24a:	4601      	mov	r1, r0
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	f000 bb65 	b.w	800a91c <_malloc_r>
 800a252:	bf00      	nop
 800a254:	20000038 	.word	0x20000038

0800a258 <__ascii_mbtowc>:
 800a258:	b082      	sub	sp, #8
 800a25a:	b901      	cbnz	r1, 800a25e <__ascii_mbtowc+0x6>
 800a25c:	a901      	add	r1, sp, #4
 800a25e:	b142      	cbz	r2, 800a272 <__ascii_mbtowc+0x1a>
 800a260:	b14b      	cbz	r3, 800a276 <__ascii_mbtowc+0x1e>
 800a262:	7813      	ldrb	r3, [r2, #0]
 800a264:	600b      	str	r3, [r1, #0]
 800a266:	7812      	ldrb	r2, [r2, #0]
 800a268:	1c10      	adds	r0, r2, #0
 800a26a:	bf18      	it	ne
 800a26c:	2001      	movne	r0, #1
 800a26e:	b002      	add	sp, #8
 800a270:	4770      	bx	lr
 800a272:	4610      	mov	r0, r2
 800a274:	e7fb      	b.n	800a26e <__ascii_mbtowc+0x16>
 800a276:	f06f 0001 	mvn.w	r0, #1
 800a27a:	e7f8      	b.n	800a26e <__ascii_mbtowc+0x16>

0800a27c <memchr>:
 800a27c:	b510      	push	{r4, lr}
 800a27e:	b2c9      	uxtb	r1, r1
 800a280:	4402      	add	r2, r0
 800a282:	4290      	cmp	r0, r2
 800a284:	4603      	mov	r3, r0
 800a286:	d101      	bne.n	800a28c <memchr+0x10>
 800a288:	2300      	movs	r3, #0
 800a28a:	e003      	b.n	800a294 <memchr+0x18>
 800a28c:	781c      	ldrb	r4, [r3, #0]
 800a28e:	3001      	adds	r0, #1
 800a290:	428c      	cmp	r4, r1
 800a292:	d1f6      	bne.n	800a282 <memchr+0x6>
 800a294:	4618      	mov	r0, r3
 800a296:	bd10      	pop	{r4, pc}

0800a298 <memcpy>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	1e43      	subs	r3, r0, #1
 800a29c:	440a      	add	r2, r1
 800a29e:	4291      	cmp	r1, r2
 800a2a0:	d100      	bne.n	800a2a4 <memcpy+0xc>
 800a2a2:	bd10      	pop	{r4, pc}
 800a2a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2ac:	e7f7      	b.n	800a29e <memcpy+0x6>

0800a2ae <_Balloc>:
 800a2ae:	b570      	push	{r4, r5, r6, lr}
 800a2b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	460e      	mov	r6, r1
 800a2b6:	b93d      	cbnz	r5, 800a2c8 <_Balloc+0x1a>
 800a2b8:	2010      	movs	r0, #16
 800a2ba:	f7ff ffc5 	bl	800a248 <malloc>
 800a2be:	6260      	str	r0, [r4, #36]	; 0x24
 800a2c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2c4:	6005      	str	r5, [r0, #0]
 800a2c6:	60c5      	str	r5, [r0, #12]
 800a2c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a2ca:	68eb      	ldr	r3, [r5, #12]
 800a2cc:	b183      	cbz	r3, 800a2f0 <_Balloc+0x42>
 800a2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a2d6:	b9b8      	cbnz	r0, 800a308 <_Balloc+0x5a>
 800a2d8:	2101      	movs	r1, #1
 800a2da:	fa01 f506 	lsl.w	r5, r1, r6
 800a2de:	1d6a      	adds	r2, r5, #5
 800a2e0:	0092      	lsls	r2, r2, #2
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f000 fabf 	bl	800a866 <_calloc_r>
 800a2e8:	b160      	cbz	r0, 800a304 <_Balloc+0x56>
 800a2ea:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a2ee:	e00e      	b.n	800a30e <_Balloc+0x60>
 800a2f0:	2221      	movs	r2, #33	; 0x21
 800a2f2:	2104      	movs	r1, #4
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f000 fab6 	bl	800a866 <_calloc_r>
 800a2fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2fc:	60e8      	str	r0, [r5, #12]
 800a2fe:	68db      	ldr	r3, [r3, #12]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d1e4      	bne.n	800a2ce <_Balloc+0x20>
 800a304:	2000      	movs	r0, #0
 800a306:	bd70      	pop	{r4, r5, r6, pc}
 800a308:	6802      	ldr	r2, [r0, #0]
 800a30a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a30e:	2300      	movs	r3, #0
 800a310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a314:	e7f7      	b.n	800a306 <_Balloc+0x58>

0800a316 <_Bfree>:
 800a316:	b570      	push	{r4, r5, r6, lr}
 800a318:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a31a:	4606      	mov	r6, r0
 800a31c:	460d      	mov	r5, r1
 800a31e:	b93c      	cbnz	r4, 800a330 <_Bfree+0x1a>
 800a320:	2010      	movs	r0, #16
 800a322:	f7ff ff91 	bl	800a248 <malloc>
 800a326:	6270      	str	r0, [r6, #36]	; 0x24
 800a328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a32c:	6004      	str	r4, [r0, #0]
 800a32e:	60c4      	str	r4, [r0, #12]
 800a330:	b13d      	cbz	r5, 800a342 <_Bfree+0x2c>
 800a332:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a334:	686a      	ldr	r2, [r5, #4]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a33c:	6029      	str	r1, [r5, #0]
 800a33e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a342:	bd70      	pop	{r4, r5, r6, pc}

0800a344 <__multadd>:
 800a344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a348:	461f      	mov	r7, r3
 800a34a:	4606      	mov	r6, r0
 800a34c:	460c      	mov	r4, r1
 800a34e:	2300      	movs	r3, #0
 800a350:	690d      	ldr	r5, [r1, #16]
 800a352:	f101 0c14 	add.w	ip, r1, #20
 800a356:	f8dc 0000 	ldr.w	r0, [ip]
 800a35a:	3301      	adds	r3, #1
 800a35c:	b281      	uxth	r1, r0
 800a35e:	fb02 7101 	mla	r1, r2, r1, r7
 800a362:	0c00      	lsrs	r0, r0, #16
 800a364:	0c0f      	lsrs	r7, r1, #16
 800a366:	fb02 7000 	mla	r0, r2, r0, r7
 800a36a:	b289      	uxth	r1, r1
 800a36c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a370:	429d      	cmp	r5, r3
 800a372:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a376:	f84c 1b04 	str.w	r1, [ip], #4
 800a37a:	dcec      	bgt.n	800a356 <__multadd+0x12>
 800a37c:	b1d7      	cbz	r7, 800a3b4 <__multadd+0x70>
 800a37e:	68a3      	ldr	r3, [r4, #8]
 800a380:	42ab      	cmp	r3, r5
 800a382:	dc12      	bgt.n	800a3aa <__multadd+0x66>
 800a384:	6861      	ldr	r1, [r4, #4]
 800a386:	4630      	mov	r0, r6
 800a388:	3101      	adds	r1, #1
 800a38a:	f7ff ff90 	bl	800a2ae <_Balloc>
 800a38e:	4680      	mov	r8, r0
 800a390:	6922      	ldr	r2, [r4, #16]
 800a392:	f104 010c 	add.w	r1, r4, #12
 800a396:	3202      	adds	r2, #2
 800a398:	0092      	lsls	r2, r2, #2
 800a39a:	300c      	adds	r0, #12
 800a39c:	f7ff ff7c 	bl	800a298 <memcpy>
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f7ff ffb7 	bl	800a316 <_Bfree>
 800a3a8:	4644      	mov	r4, r8
 800a3aa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3ae:	3501      	adds	r5, #1
 800a3b0:	615f      	str	r7, [r3, #20]
 800a3b2:	6125      	str	r5, [r4, #16]
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a3ba <__hi0bits>:
 800a3ba:	0c02      	lsrs	r2, r0, #16
 800a3bc:	0412      	lsls	r2, r2, #16
 800a3be:	4603      	mov	r3, r0
 800a3c0:	b9b2      	cbnz	r2, 800a3f0 <__hi0bits+0x36>
 800a3c2:	0403      	lsls	r3, r0, #16
 800a3c4:	2010      	movs	r0, #16
 800a3c6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a3ca:	bf04      	itt	eq
 800a3cc:	021b      	lsleq	r3, r3, #8
 800a3ce:	3008      	addeq	r0, #8
 800a3d0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a3d4:	bf04      	itt	eq
 800a3d6:	011b      	lsleq	r3, r3, #4
 800a3d8:	3004      	addeq	r0, #4
 800a3da:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a3de:	bf04      	itt	eq
 800a3e0:	009b      	lsleq	r3, r3, #2
 800a3e2:	3002      	addeq	r0, #2
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	db06      	blt.n	800a3f6 <__hi0bits+0x3c>
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	d503      	bpl.n	800a3f4 <__hi0bits+0x3a>
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	4770      	bx	lr
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e7e8      	b.n	800a3c6 <__hi0bits+0xc>
 800a3f4:	2020      	movs	r0, #32
 800a3f6:	4770      	bx	lr

0800a3f8 <__lo0bits>:
 800a3f8:	6803      	ldr	r3, [r0, #0]
 800a3fa:	4601      	mov	r1, r0
 800a3fc:	f013 0207 	ands.w	r2, r3, #7
 800a400:	d00b      	beq.n	800a41a <__lo0bits+0x22>
 800a402:	07da      	lsls	r2, r3, #31
 800a404:	d423      	bmi.n	800a44e <__lo0bits+0x56>
 800a406:	0798      	lsls	r0, r3, #30
 800a408:	bf49      	itett	mi
 800a40a:	085b      	lsrmi	r3, r3, #1
 800a40c:	089b      	lsrpl	r3, r3, #2
 800a40e:	2001      	movmi	r0, #1
 800a410:	600b      	strmi	r3, [r1, #0]
 800a412:	bf5c      	itt	pl
 800a414:	600b      	strpl	r3, [r1, #0]
 800a416:	2002      	movpl	r0, #2
 800a418:	4770      	bx	lr
 800a41a:	b298      	uxth	r0, r3
 800a41c:	b9a8      	cbnz	r0, 800a44a <__lo0bits+0x52>
 800a41e:	2010      	movs	r0, #16
 800a420:	0c1b      	lsrs	r3, r3, #16
 800a422:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a426:	bf04      	itt	eq
 800a428:	0a1b      	lsreq	r3, r3, #8
 800a42a:	3008      	addeq	r0, #8
 800a42c:	071a      	lsls	r2, r3, #28
 800a42e:	bf04      	itt	eq
 800a430:	091b      	lsreq	r3, r3, #4
 800a432:	3004      	addeq	r0, #4
 800a434:	079a      	lsls	r2, r3, #30
 800a436:	bf04      	itt	eq
 800a438:	089b      	lsreq	r3, r3, #2
 800a43a:	3002      	addeq	r0, #2
 800a43c:	07da      	lsls	r2, r3, #31
 800a43e:	d402      	bmi.n	800a446 <__lo0bits+0x4e>
 800a440:	085b      	lsrs	r3, r3, #1
 800a442:	d006      	beq.n	800a452 <__lo0bits+0x5a>
 800a444:	3001      	adds	r0, #1
 800a446:	600b      	str	r3, [r1, #0]
 800a448:	4770      	bx	lr
 800a44a:	4610      	mov	r0, r2
 800a44c:	e7e9      	b.n	800a422 <__lo0bits+0x2a>
 800a44e:	2000      	movs	r0, #0
 800a450:	4770      	bx	lr
 800a452:	2020      	movs	r0, #32
 800a454:	4770      	bx	lr

0800a456 <__i2b>:
 800a456:	b510      	push	{r4, lr}
 800a458:	460c      	mov	r4, r1
 800a45a:	2101      	movs	r1, #1
 800a45c:	f7ff ff27 	bl	800a2ae <_Balloc>
 800a460:	2201      	movs	r2, #1
 800a462:	6144      	str	r4, [r0, #20]
 800a464:	6102      	str	r2, [r0, #16]
 800a466:	bd10      	pop	{r4, pc}

0800a468 <__multiply>:
 800a468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	4614      	mov	r4, r2
 800a46e:	690a      	ldr	r2, [r1, #16]
 800a470:	6923      	ldr	r3, [r4, #16]
 800a472:	4688      	mov	r8, r1
 800a474:	429a      	cmp	r2, r3
 800a476:	bfbe      	ittt	lt
 800a478:	460b      	movlt	r3, r1
 800a47a:	46a0      	movlt	r8, r4
 800a47c:	461c      	movlt	r4, r3
 800a47e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a482:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a486:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a48a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a48e:	eb07 0609 	add.w	r6, r7, r9
 800a492:	42b3      	cmp	r3, r6
 800a494:	bfb8      	it	lt
 800a496:	3101      	addlt	r1, #1
 800a498:	f7ff ff09 	bl	800a2ae <_Balloc>
 800a49c:	f100 0514 	add.w	r5, r0, #20
 800a4a0:	462b      	mov	r3, r5
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a4a8:	4573      	cmp	r3, lr
 800a4aa:	d316      	bcc.n	800a4da <__multiply+0x72>
 800a4ac:	f104 0214 	add.w	r2, r4, #20
 800a4b0:	f108 0114 	add.w	r1, r8, #20
 800a4b4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a4b8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	9b00      	ldr	r3, [sp, #0]
 800a4c0:	9201      	str	r2, [sp, #4]
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d80c      	bhi.n	800a4e0 <__multiply+0x78>
 800a4c6:	2e00      	cmp	r6, #0
 800a4c8:	dd03      	ble.n	800a4d2 <__multiply+0x6a>
 800a4ca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d05d      	beq.n	800a58e <__multiply+0x126>
 800a4d2:	6106      	str	r6, [r0, #16]
 800a4d4:	b003      	add	sp, #12
 800a4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4da:	f843 2b04 	str.w	r2, [r3], #4
 800a4de:	e7e3      	b.n	800a4a8 <__multiply+0x40>
 800a4e0:	f8b2 b000 	ldrh.w	fp, [r2]
 800a4e4:	f1bb 0f00 	cmp.w	fp, #0
 800a4e8:	d023      	beq.n	800a532 <__multiply+0xca>
 800a4ea:	4689      	mov	r9, r1
 800a4ec:	46ac      	mov	ip, r5
 800a4ee:	f04f 0800 	mov.w	r8, #0
 800a4f2:	f859 4b04 	ldr.w	r4, [r9], #4
 800a4f6:	f8dc a000 	ldr.w	sl, [ip]
 800a4fa:	b2a3      	uxth	r3, r4
 800a4fc:	fa1f fa8a 	uxth.w	sl, sl
 800a500:	fb0b a303 	mla	r3, fp, r3, sl
 800a504:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a508:	f8dc 4000 	ldr.w	r4, [ip]
 800a50c:	4443      	add	r3, r8
 800a50e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a512:	fb0b 840a 	mla	r4, fp, sl, r8
 800a516:	46e2      	mov	sl, ip
 800a518:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a522:	454f      	cmp	r7, r9
 800a524:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a528:	f84a 3b04 	str.w	r3, [sl], #4
 800a52c:	d82b      	bhi.n	800a586 <__multiply+0x11e>
 800a52e:	f8cc 8004 	str.w	r8, [ip, #4]
 800a532:	9b01      	ldr	r3, [sp, #4]
 800a534:	3204      	adds	r2, #4
 800a536:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a53a:	f1ba 0f00 	cmp.w	sl, #0
 800a53e:	d020      	beq.n	800a582 <__multiply+0x11a>
 800a540:	4689      	mov	r9, r1
 800a542:	46a8      	mov	r8, r5
 800a544:	f04f 0b00 	mov.w	fp, #0
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	f8b9 c000 	ldrh.w	ip, [r9]
 800a54e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a552:	b29b      	uxth	r3, r3
 800a554:	fb0a 440c 	mla	r4, sl, ip, r4
 800a558:	46c4      	mov	ip, r8
 800a55a:	445c      	add	r4, fp
 800a55c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a560:	f84c 3b04 	str.w	r3, [ip], #4
 800a564:	f859 3b04 	ldr.w	r3, [r9], #4
 800a568:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a56c:	0c1b      	lsrs	r3, r3, #16
 800a56e:	fb0a b303 	mla	r3, sl, r3, fp
 800a572:	454f      	cmp	r7, r9
 800a574:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a578:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a57c:	d805      	bhi.n	800a58a <__multiply+0x122>
 800a57e:	f8c8 3004 	str.w	r3, [r8, #4]
 800a582:	3504      	adds	r5, #4
 800a584:	e79b      	b.n	800a4be <__multiply+0x56>
 800a586:	46d4      	mov	ip, sl
 800a588:	e7b3      	b.n	800a4f2 <__multiply+0x8a>
 800a58a:	46e0      	mov	r8, ip
 800a58c:	e7dd      	b.n	800a54a <__multiply+0xe2>
 800a58e:	3e01      	subs	r6, #1
 800a590:	e799      	b.n	800a4c6 <__multiply+0x5e>
	...

0800a594 <__pow5mult>:
 800a594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a598:	4615      	mov	r5, r2
 800a59a:	f012 0203 	ands.w	r2, r2, #3
 800a59e:	4606      	mov	r6, r0
 800a5a0:	460f      	mov	r7, r1
 800a5a2:	d007      	beq.n	800a5b4 <__pow5mult+0x20>
 800a5a4:	4c21      	ldr	r4, [pc, #132]	; (800a62c <__pow5mult+0x98>)
 800a5a6:	3a01      	subs	r2, #1
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5ae:	f7ff fec9 	bl	800a344 <__multadd>
 800a5b2:	4607      	mov	r7, r0
 800a5b4:	10ad      	asrs	r5, r5, #2
 800a5b6:	d035      	beq.n	800a624 <__pow5mult+0x90>
 800a5b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a5ba:	b93c      	cbnz	r4, 800a5cc <__pow5mult+0x38>
 800a5bc:	2010      	movs	r0, #16
 800a5be:	f7ff fe43 	bl	800a248 <malloc>
 800a5c2:	6270      	str	r0, [r6, #36]	; 0x24
 800a5c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5c8:	6004      	str	r4, [r0, #0]
 800a5ca:	60c4      	str	r4, [r0, #12]
 800a5cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5d4:	b94c      	cbnz	r4, 800a5ea <__pow5mult+0x56>
 800a5d6:	f240 2171 	movw	r1, #625	; 0x271
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7ff ff3b 	bl	800a456 <__i2b>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5e8:	6003      	str	r3, [r0, #0]
 800a5ea:	f04f 0800 	mov.w	r8, #0
 800a5ee:	07eb      	lsls	r3, r5, #31
 800a5f0:	d50a      	bpl.n	800a608 <__pow5mult+0x74>
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	4622      	mov	r2, r4
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f7ff ff36 	bl	800a468 <__multiply>
 800a5fc:	4681      	mov	r9, r0
 800a5fe:	4639      	mov	r1, r7
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff fe88 	bl	800a316 <_Bfree>
 800a606:	464f      	mov	r7, r9
 800a608:	106d      	asrs	r5, r5, #1
 800a60a:	d00b      	beq.n	800a624 <__pow5mult+0x90>
 800a60c:	6820      	ldr	r0, [r4, #0]
 800a60e:	b938      	cbnz	r0, 800a620 <__pow5mult+0x8c>
 800a610:	4622      	mov	r2, r4
 800a612:	4621      	mov	r1, r4
 800a614:	4630      	mov	r0, r6
 800a616:	f7ff ff27 	bl	800a468 <__multiply>
 800a61a:	6020      	str	r0, [r4, #0]
 800a61c:	f8c0 8000 	str.w	r8, [r0]
 800a620:	4604      	mov	r4, r0
 800a622:	e7e4      	b.n	800a5ee <__pow5mult+0x5a>
 800a624:	4638      	mov	r0, r7
 800a626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a62a:	bf00      	nop
 800a62c:	0800b798 	.word	0x0800b798

0800a630 <__lshift>:
 800a630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a634:	460c      	mov	r4, r1
 800a636:	4607      	mov	r7, r0
 800a638:	4616      	mov	r6, r2
 800a63a:	6923      	ldr	r3, [r4, #16]
 800a63c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a640:	eb0a 0903 	add.w	r9, sl, r3
 800a644:	6849      	ldr	r1, [r1, #4]
 800a646:	68a3      	ldr	r3, [r4, #8]
 800a648:	f109 0501 	add.w	r5, r9, #1
 800a64c:	42ab      	cmp	r3, r5
 800a64e:	db32      	blt.n	800a6b6 <__lshift+0x86>
 800a650:	4638      	mov	r0, r7
 800a652:	f7ff fe2c 	bl	800a2ae <_Balloc>
 800a656:	2300      	movs	r3, #0
 800a658:	4680      	mov	r8, r0
 800a65a:	461a      	mov	r2, r3
 800a65c:	f100 0114 	add.w	r1, r0, #20
 800a660:	4553      	cmp	r3, sl
 800a662:	db2b      	blt.n	800a6bc <__lshift+0x8c>
 800a664:	6920      	ldr	r0, [r4, #16]
 800a666:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a66a:	f104 0314 	add.w	r3, r4, #20
 800a66e:	f016 021f 	ands.w	r2, r6, #31
 800a672:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a676:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a67a:	d025      	beq.n	800a6c8 <__lshift+0x98>
 800a67c:	2000      	movs	r0, #0
 800a67e:	f1c2 0e20 	rsb	lr, r2, #32
 800a682:	468a      	mov	sl, r1
 800a684:	681e      	ldr	r6, [r3, #0]
 800a686:	4096      	lsls	r6, r2
 800a688:	4330      	orrs	r0, r6
 800a68a:	f84a 0b04 	str.w	r0, [sl], #4
 800a68e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a692:	459c      	cmp	ip, r3
 800a694:	fa20 f00e 	lsr.w	r0, r0, lr
 800a698:	d814      	bhi.n	800a6c4 <__lshift+0x94>
 800a69a:	6048      	str	r0, [r1, #4]
 800a69c:	b108      	cbz	r0, 800a6a2 <__lshift+0x72>
 800a69e:	f109 0502 	add.w	r5, r9, #2
 800a6a2:	3d01      	subs	r5, #1
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	f8c8 5010 	str.w	r5, [r8, #16]
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	f7ff fe33 	bl	800a316 <_Bfree>
 800a6b0:	4640      	mov	r0, r8
 800a6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b6:	3101      	adds	r1, #1
 800a6b8:	005b      	lsls	r3, r3, #1
 800a6ba:	e7c7      	b.n	800a64c <__lshift+0x1c>
 800a6bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	e7cd      	b.n	800a660 <__lshift+0x30>
 800a6c4:	4651      	mov	r1, sl
 800a6c6:	e7dc      	b.n	800a682 <__lshift+0x52>
 800a6c8:	3904      	subs	r1, #4
 800a6ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ce:	459c      	cmp	ip, r3
 800a6d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6d4:	d8f9      	bhi.n	800a6ca <__lshift+0x9a>
 800a6d6:	e7e4      	b.n	800a6a2 <__lshift+0x72>

0800a6d8 <__mcmp>:
 800a6d8:	6903      	ldr	r3, [r0, #16]
 800a6da:	690a      	ldr	r2, [r1, #16]
 800a6dc:	b530      	push	{r4, r5, lr}
 800a6de:	1a9b      	subs	r3, r3, r2
 800a6e0:	d10c      	bne.n	800a6fc <__mcmp+0x24>
 800a6e2:	0092      	lsls	r2, r2, #2
 800a6e4:	3014      	adds	r0, #20
 800a6e6:	3114      	adds	r1, #20
 800a6e8:	1884      	adds	r4, r0, r2
 800a6ea:	4411      	add	r1, r2
 800a6ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6f4:	4295      	cmp	r5, r2
 800a6f6:	d003      	beq.n	800a700 <__mcmp+0x28>
 800a6f8:	d305      	bcc.n	800a706 <__mcmp+0x2e>
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	bd30      	pop	{r4, r5, pc}
 800a700:	42a0      	cmp	r0, r4
 800a702:	d3f3      	bcc.n	800a6ec <__mcmp+0x14>
 800a704:	e7fa      	b.n	800a6fc <__mcmp+0x24>
 800a706:	f04f 33ff 	mov.w	r3, #4294967295
 800a70a:	e7f7      	b.n	800a6fc <__mcmp+0x24>

0800a70c <__mdiff>:
 800a70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a710:	460d      	mov	r5, r1
 800a712:	4607      	mov	r7, r0
 800a714:	4611      	mov	r1, r2
 800a716:	4628      	mov	r0, r5
 800a718:	4614      	mov	r4, r2
 800a71a:	f7ff ffdd 	bl	800a6d8 <__mcmp>
 800a71e:	1e06      	subs	r6, r0, #0
 800a720:	d108      	bne.n	800a734 <__mdiff+0x28>
 800a722:	4631      	mov	r1, r6
 800a724:	4638      	mov	r0, r7
 800a726:	f7ff fdc2 	bl	800a2ae <_Balloc>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a734:	bfa4      	itt	ge
 800a736:	4623      	movge	r3, r4
 800a738:	462c      	movge	r4, r5
 800a73a:	4638      	mov	r0, r7
 800a73c:	6861      	ldr	r1, [r4, #4]
 800a73e:	bfa6      	itte	ge
 800a740:	461d      	movge	r5, r3
 800a742:	2600      	movge	r6, #0
 800a744:	2601      	movlt	r6, #1
 800a746:	f7ff fdb2 	bl	800a2ae <_Balloc>
 800a74a:	f04f 0e00 	mov.w	lr, #0
 800a74e:	60c6      	str	r6, [r0, #12]
 800a750:	692b      	ldr	r3, [r5, #16]
 800a752:	6926      	ldr	r6, [r4, #16]
 800a754:	f104 0214 	add.w	r2, r4, #20
 800a758:	f105 0914 	add.w	r9, r5, #20
 800a75c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a760:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a764:	f100 0114 	add.w	r1, r0, #20
 800a768:	f852 ab04 	ldr.w	sl, [r2], #4
 800a76c:	f859 5b04 	ldr.w	r5, [r9], #4
 800a770:	fa1f f38a 	uxth.w	r3, sl
 800a774:	4473      	add	r3, lr
 800a776:	b2ac      	uxth	r4, r5
 800a778:	1b1b      	subs	r3, r3, r4
 800a77a:	0c2c      	lsrs	r4, r5, #16
 800a77c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a780:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a784:	b29b      	uxth	r3, r3
 800a786:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a78a:	45c8      	cmp	r8, r9
 800a78c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a790:	4694      	mov	ip, r2
 800a792:	f841 4b04 	str.w	r4, [r1], #4
 800a796:	d8e7      	bhi.n	800a768 <__mdiff+0x5c>
 800a798:	45bc      	cmp	ip, r7
 800a79a:	d304      	bcc.n	800a7a6 <__mdiff+0x9a>
 800a79c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a7a0:	b183      	cbz	r3, 800a7c4 <__mdiff+0xb8>
 800a7a2:	6106      	str	r6, [r0, #16]
 800a7a4:	e7c4      	b.n	800a730 <__mdiff+0x24>
 800a7a6:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a7aa:	b2a2      	uxth	r2, r4
 800a7ac:	4472      	add	r2, lr
 800a7ae:	1413      	asrs	r3, r2, #16
 800a7b0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a7b4:	b292      	uxth	r2, r2
 800a7b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a7ba:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a7be:	f841 2b04 	str.w	r2, [r1], #4
 800a7c2:	e7e9      	b.n	800a798 <__mdiff+0x8c>
 800a7c4:	3e01      	subs	r6, #1
 800a7c6:	e7e9      	b.n	800a79c <__mdiff+0x90>

0800a7c8 <__d2b>:
 800a7c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a7cc:	461c      	mov	r4, r3
 800a7ce:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	4690      	mov	r8, r2
 800a7d6:	f7ff fd6a 	bl	800a2ae <_Balloc>
 800a7da:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800a7de:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a7e2:	4607      	mov	r7, r0
 800a7e4:	bb34      	cbnz	r4, 800a834 <__d2b+0x6c>
 800a7e6:	9201      	str	r2, [sp, #4]
 800a7e8:	f1b8 0200 	subs.w	r2, r8, #0
 800a7ec:	d027      	beq.n	800a83e <__d2b+0x76>
 800a7ee:	a802      	add	r0, sp, #8
 800a7f0:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a7f4:	f7ff fe00 	bl	800a3f8 <__lo0bits>
 800a7f8:	9900      	ldr	r1, [sp, #0]
 800a7fa:	b1f0      	cbz	r0, 800a83a <__d2b+0x72>
 800a7fc:	9a01      	ldr	r2, [sp, #4]
 800a7fe:	f1c0 0320 	rsb	r3, r0, #32
 800a802:	fa02 f303 	lsl.w	r3, r2, r3
 800a806:	430b      	orrs	r3, r1
 800a808:	40c2      	lsrs	r2, r0
 800a80a:	617b      	str	r3, [r7, #20]
 800a80c:	9201      	str	r2, [sp, #4]
 800a80e:	9b01      	ldr	r3, [sp, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	bf14      	ite	ne
 800a814:	2102      	movne	r1, #2
 800a816:	2101      	moveq	r1, #1
 800a818:	61bb      	str	r3, [r7, #24]
 800a81a:	6139      	str	r1, [r7, #16]
 800a81c:	b1c4      	cbz	r4, 800a850 <__d2b+0x88>
 800a81e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a822:	4404      	add	r4, r0
 800a824:	6034      	str	r4, [r6, #0]
 800a826:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a82a:	6028      	str	r0, [r5, #0]
 800a82c:	4638      	mov	r0, r7
 800a82e:	b002      	add	sp, #8
 800a830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a834:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a838:	e7d5      	b.n	800a7e6 <__d2b+0x1e>
 800a83a:	6179      	str	r1, [r7, #20]
 800a83c:	e7e7      	b.n	800a80e <__d2b+0x46>
 800a83e:	a801      	add	r0, sp, #4
 800a840:	f7ff fdda 	bl	800a3f8 <__lo0bits>
 800a844:	2101      	movs	r1, #1
 800a846:	9b01      	ldr	r3, [sp, #4]
 800a848:	6139      	str	r1, [r7, #16]
 800a84a:	617b      	str	r3, [r7, #20]
 800a84c:	3020      	adds	r0, #32
 800a84e:	e7e5      	b.n	800a81c <__d2b+0x54>
 800a850:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a854:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a858:	6030      	str	r0, [r6, #0]
 800a85a:	6918      	ldr	r0, [r3, #16]
 800a85c:	f7ff fdad 	bl	800a3ba <__hi0bits>
 800a860:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a864:	e7e1      	b.n	800a82a <__d2b+0x62>

0800a866 <_calloc_r>:
 800a866:	b538      	push	{r3, r4, r5, lr}
 800a868:	fb02 f401 	mul.w	r4, r2, r1
 800a86c:	4621      	mov	r1, r4
 800a86e:	f000 f855 	bl	800a91c <_malloc_r>
 800a872:	4605      	mov	r5, r0
 800a874:	b118      	cbz	r0, 800a87e <_calloc_r+0x18>
 800a876:	4622      	mov	r2, r4
 800a878:	2100      	movs	r1, #0
 800a87a:	f7fd fe57 	bl	800852c <memset>
 800a87e:	4628      	mov	r0, r5
 800a880:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a884 <_free_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	4605      	mov	r5, r0
 800a888:	2900      	cmp	r1, #0
 800a88a:	d043      	beq.n	800a914 <_free_r+0x90>
 800a88c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a890:	1f0c      	subs	r4, r1, #4
 800a892:	2b00      	cmp	r3, #0
 800a894:	bfb8      	it	lt
 800a896:	18e4      	addlt	r4, r4, r3
 800a898:	f000 fc2f 	bl	800b0fa <__malloc_lock>
 800a89c:	4a1e      	ldr	r2, [pc, #120]	; (800a918 <_free_r+0x94>)
 800a89e:	6813      	ldr	r3, [r2, #0]
 800a8a0:	4610      	mov	r0, r2
 800a8a2:	b933      	cbnz	r3, 800a8b2 <_free_r+0x2e>
 800a8a4:	6063      	str	r3, [r4, #4]
 800a8a6:	6014      	str	r4, [r2, #0]
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ae:	f000 bc25 	b.w	800b0fc <__malloc_unlock>
 800a8b2:	42a3      	cmp	r3, r4
 800a8b4:	d90b      	bls.n	800a8ce <_free_r+0x4a>
 800a8b6:	6821      	ldr	r1, [r4, #0]
 800a8b8:	1862      	adds	r2, r4, r1
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	bf01      	itttt	eq
 800a8be:	681a      	ldreq	r2, [r3, #0]
 800a8c0:	685b      	ldreq	r3, [r3, #4]
 800a8c2:	1852      	addeq	r2, r2, r1
 800a8c4:	6022      	streq	r2, [r4, #0]
 800a8c6:	6063      	str	r3, [r4, #4]
 800a8c8:	6004      	str	r4, [r0, #0]
 800a8ca:	e7ed      	b.n	800a8a8 <_free_r+0x24>
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	b10a      	cbz	r2, 800a8d6 <_free_r+0x52>
 800a8d2:	42a2      	cmp	r2, r4
 800a8d4:	d9fa      	bls.n	800a8cc <_free_r+0x48>
 800a8d6:	6819      	ldr	r1, [r3, #0]
 800a8d8:	1858      	adds	r0, r3, r1
 800a8da:	42a0      	cmp	r0, r4
 800a8dc:	d10b      	bne.n	800a8f6 <_free_r+0x72>
 800a8de:	6820      	ldr	r0, [r4, #0]
 800a8e0:	4401      	add	r1, r0
 800a8e2:	1858      	adds	r0, r3, r1
 800a8e4:	4282      	cmp	r2, r0
 800a8e6:	6019      	str	r1, [r3, #0]
 800a8e8:	d1de      	bne.n	800a8a8 <_free_r+0x24>
 800a8ea:	6810      	ldr	r0, [r2, #0]
 800a8ec:	6852      	ldr	r2, [r2, #4]
 800a8ee:	4401      	add	r1, r0
 800a8f0:	6019      	str	r1, [r3, #0]
 800a8f2:	605a      	str	r2, [r3, #4]
 800a8f4:	e7d8      	b.n	800a8a8 <_free_r+0x24>
 800a8f6:	d902      	bls.n	800a8fe <_free_r+0x7a>
 800a8f8:	230c      	movs	r3, #12
 800a8fa:	602b      	str	r3, [r5, #0]
 800a8fc:	e7d4      	b.n	800a8a8 <_free_r+0x24>
 800a8fe:	6820      	ldr	r0, [r4, #0]
 800a900:	1821      	adds	r1, r4, r0
 800a902:	428a      	cmp	r2, r1
 800a904:	bf01      	itttt	eq
 800a906:	6811      	ldreq	r1, [r2, #0]
 800a908:	6852      	ldreq	r2, [r2, #4]
 800a90a:	1809      	addeq	r1, r1, r0
 800a90c:	6021      	streq	r1, [r4, #0]
 800a90e:	6062      	str	r2, [r4, #4]
 800a910:	605c      	str	r4, [r3, #4]
 800a912:	e7c9      	b.n	800a8a8 <_free_r+0x24>
 800a914:	bd38      	pop	{r3, r4, r5, pc}
 800a916:	bf00      	nop
 800a918:	20000294 	.word	0x20000294

0800a91c <_malloc_r>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	1ccd      	adds	r5, r1, #3
 800a920:	f025 0503 	bic.w	r5, r5, #3
 800a924:	3508      	adds	r5, #8
 800a926:	2d0c      	cmp	r5, #12
 800a928:	bf38      	it	cc
 800a92a:	250c      	movcc	r5, #12
 800a92c:	2d00      	cmp	r5, #0
 800a92e:	4606      	mov	r6, r0
 800a930:	db01      	blt.n	800a936 <_malloc_r+0x1a>
 800a932:	42a9      	cmp	r1, r5
 800a934:	d903      	bls.n	800a93e <_malloc_r+0x22>
 800a936:	230c      	movs	r3, #12
 800a938:	6033      	str	r3, [r6, #0]
 800a93a:	2000      	movs	r0, #0
 800a93c:	bd70      	pop	{r4, r5, r6, pc}
 800a93e:	f000 fbdc 	bl	800b0fa <__malloc_lock>
 800a942:	4a21      	ldr	r2, [pc, #132]	; (800a9c8 <_malloc_r+0xac>)
 800a944:	6814      	ldr	r4, [r2, #0]
 800a946:	4621      	mov	r1, r4
 800a948:	b991      	cbnz	r1, 800a970 <_malloc_r+0x54>
 800a94a:	4c20      	ldr	r4, [pc, #128]	; (800a9cc <_malloc_r+0xb0>)
 800a94c:	6823      	ldr	r3, [r4, #0]
 800a94e:	b91b      	cbnz	r3, 800a958 <_malloc_r+0x3c>
 800a950:	4630      	mov	r0, r6
 800a952:	f000 fb03 	bl	800af5c <_sbrk_r>
 800a956:	6020      	str	r0, [r4, #0]
 800a958:	4629      	mov	r1, r5
 800a95a:	4630      	mov	r0, r6
 800a95c:	f000 fafe 	bl	800af5c <_sbrk_r>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d124      	bne.n	800a9ae <_malloc_r+0x92>
 800a964:	230c      	movs	r3, #12
 800a966:	4630      	mov	r0, r6
 800a968:	6033      	str	r3, [r6, #0]
 800a96a:	f000 fbc7 	bl	800b0fc <__malloc_unlock>
 800a96e:	e7e4      	b.n	800a93a <_malloc_r+0x1e>
 800a970:	680b      	ldr	r3, [r1, #0]
 800a972:	1b5b      	subs	r3, r3, r5
 800a974:	d418      	bmi.n	800a9a8 <_malloc_r+0x8c>
 800a976:	2b0b      	cmp	r3, #11
 800a978:	d90f      	bls.n	800a99a <_malloc_r+0x7e>
 800a97a:	600b      	str	r3, [r1, #0]
 800a97c:	18cc      	adds	r4, r1, r3
 800a97e:	50cd      	str	r5, [r1, r3]
 800a980:	4630      	mov	r0, r6
 800a982:	f000 fbbb 	bl	800b0fc <__malloc_unlock>
 800a986:	f104 000b 	add.w	r0, r4, #11
 800a98a:	1d23      	adds	r3, r4, #4
 800a98c:	f020 0007 	bic.w	r0, r0, #7
 800a990:	1ac3      	subs	r3, r0, r3
 800a992:	d0d3      	beq.n	800a93c <_malloc_r+0x20>
 800a994:	425a      	negs	r2, r3
 800a996:	50e2      	str	r2, [r4, r3]
 800a998:	e7d0      	b.n	800a93c <_malloc_r+0x20>
 800a99a:	684b      	ldr	r3, [r1, #4]
 800a99c:	428c      	cmp	r4, r1
 800a99e:	bf16      	itet	ne
 800a9a0:	6063      	strne	r3, [r4, #4]
 800a9a2:	6013      	streq	r3, [r2, #0]
 800a9a4:	460c      	movne	r4, r1
 800a9a6:	e7eb      	b.n	800a980 <_malloc_r+0x64>
 800a9a8:	460c      	mov	r4, r1
 800a9aa:	6849      	ldr	r1, [r1, #4]
 800a9ac:	e7cc      	b.n	800a948 <_malloc_r+0x2c>
 800a9ae:	1cc4      	adds	r4, r0, #3
 800a9b0:	f024 0403 	bic.w	r4, r4, #3
 800a9b4:	42a0      	cmp	r0, r4
 800a9b6:	d005      	beq.n	800a9c4 <_malloc_r+0xa8>
 800a9b8:	1a21      	subs	r1, r4, r0
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f000 face 	bl	800af5c <_sbrk_r>
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	d0cf      	beq.n	800a964 <_malloc_r+0x48>
 800a9c4:	6025      	str	r5, [r4, #0]
 800a9c6:	e7db      	b.n	800a980 <_malloc_r+0x64>
 800a9c8:	20000294 	.word	0x20000294
 800a9cc:	20000298 	.word	0x20000298

0800a9d0 <__ssputs_r>:
 800a9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d4:	688e      	ldr	r6, [r1, #8]
 800a9d6:	4682      	mov	sl, r0
 800a9d8:	429e      	cmp	r6, r3
 800a9da:	460c      	mov	r4, r1
 800a9dc:	4690      	mov	r8, r2
 800a9de:	4699      	mov	r9, r3
 800a9e0:	d837      	bhi.n	800aa52 <__ssputs_r+0x82>
 800a9e2:	898a      	ldrh	r2, [r1, #12]
 800a9e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9e8:	d031      	beq.n	800aa4e <__ssputs_r+0x7e>
 800a9ea:	2302      	movs	r3, #2
 800a9ec:	6825      	ldr	r5, [r4, #0]
 800a9ee:	6909      	ldr	r1, [r1, #16]
 800a9f0:	1a6f      	subs	r7, r5, r1
 800a9f2:	6965      	ldr	r5, [r4, #20]
 800a9f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9f8:	fb95 f5f3 	sdiv	r5, r5, r3
 800a9fc:	f109 0301 	add.w	r3, r9, #1
 800aa00:	443b      	add	r3, r7
 800aa02:	429d      	cmp	r5, r3
 800aa04:	bf38      	it	cc
 800aa06:	461d      	movcc	r5, r3
 800aa08:	0553      	lsls	r3, r2, #21
 800aa0a:	d530      	bpl.n	800aa6e <__ssputs_r+0x9e>
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	f7ff ff85 	bl	800a91c <_malloc_r>
 800aa12:	4606      	mov	r6, r0
 800aa14:	b950      	cbnz	r0, 800aa2c <__ssputs_r+0x5c>
 800aa16:	230c      	movs	r3, #12
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1c:	f8ca 3000 	str.w	r3, [sl]
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa26:	81a3      	strh	r3, [r4, #12]
 800aa28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa2c:	463a      	mov	r2, r7
 800aa2e:	6921      	ldr	r1, [r4, #16]
 800aa30:	f7ff fc32 	bl	800a298 <memcpy>
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa3e:	81a3      	strh	r3, [r4, #12]
 800aa40:	6126      	str	r6, [r4, #16]
 800aa42:	443e      	add	r6, r7
 800aa44:	6026      	str	r6, [r4, #0]
 800aa46:	464e      	mov	r6, r9
 800aa48:	6165      	str	r5, [r4, #20]
 800aa4a:	1bed      	subs	r5, r5, r7
 800aa4c:	60a5      	str	r5, [r4, #8]
 800aa4e:	454e      	cmp	r6, r9
 800aa50:	d900      	bls.n	800aa54 <__ssputs_r+0x84>
 800aa52:	464e      	mov	r6, r9
 800aa54:	4632      	mov	r2, r6
 800aa56:	4641      	mov	r1, r8
 800aa58:	6820      	ldr	r0, [r4, #0]
 800aa5a:	f000 fb35 	bl	800b0c8 <memmove>
 800aa5e:	68a3      	ldr	r3, [r4, #8]
 800aa60:	2000      	movs	r0, #0
 800aa62:	1b9b      	subs	r3, r3, r6
 800aa64:	60a3      	str	r3, [r4, #8]
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	441e      	add	r6, r3
 800aa6a:	6026      	str	r6, [r4, #0]
 800aa6c:	e7dc      	b.n	800aa28 <__ssputs_r+0x58>
 800aa6e:	462a      	mov	r2, r5
 800aa70:	f000 fb45 	bl	800b0fe <_realloc_r>
 800aa74:	4606      	mov	r6, r0
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d1e2      	bne.n	800aa40 <__ssputs_r+0x70>
 800aa7a:	6921      	ldr	r1, [r4, #16]
 800aa7c:	4650      	mov	r0, sl
 800aa7e:	f7ff ff01 	bl	800a884 <_free_r>
 800aa82:	e7c8      	b.n	800aa16 <__ssputs_r+0x46>

0800aa84 <_svfiprintf_r>:
 800aa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa88:	461d      	mov	r5, r3
 800aa8a:	898b      	ldrh	r3, [r1, #12]
 800aa8c:	b09d      	sub	sp, #116	; 0x74
 800aa8e:	061f      	lsls	r7, r3, #24
 800aa90:	4680      	mov	r8, r0
 800aa92:	460c      	mov	r4, r1
 800aa94:	4616      	mov	r6, r2
 800aa96:	d50f      	bpl.n	800aab8 <_svfiprintf_r+0x34>
 800aa98:	690b      	ldr	r3, [r1, #16]
 800aa9a:	b96b      	cbnz	r3, 800aab8 <_svfiprintf_r+0x34>
 800aa9c:	2140      	movs	r1, #64	; 0x40
 800aa9e:	f7ff ff3d 	bl	800a91c <_malloc_r>
 800aaa2:	6020      	str	r0, [r4, #0]
 800aaa4:	6120      	str	r0, [r4, #16]
 800aaa6:	b928      	cbnz	r0, 800aab4 <_svfiprintf_r+0x30>
 800aaa8:	230c      	movs	r3, #12
 800aaaa:	f8c8 3000 	str.w	r3, [r8]
 800aaae:	f04f 30ff 	mov.w	r0, #4294967295
 800aab2:	e0c8      	b.n	800ac46 <_svfiprintf_r+0x1c2>
 800aab4:	2340      	movs	r3, #64	; 0x40
 800aab6:	6163      	str	r3, [r4, #20]
 800aab8:	2300      	movs	r3, #0
 800aaba:	9309      	str	r3, [sp, #36]	; 0x24
 800aabc:	2320      	movs	r3, #32
 800aabe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aac2:	2330      	movs	r3, #48	; 0x30
 800aac4:	f04f 0b01 	mov.w	fp, #1
 800aac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aacc:	9503      	str	r5, [sp, #12]
 800aace:	4637      	mov	r7, r6
 800aad0:	463d      	mov	r5, r7
 800aad2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aad6:	b10b      	cbz	r3, 800aadc <_svfiprintf_r+0x58>
 800aad8:	2b25      	cmp	r3, #37	; 0x25
 800aada:	d13e      	bne.n	800ab5a <_svfiprintf_r+0xd6>
 800aadc:	ebb7 0a06 	subs.w	sl, r7, r6
 800aae0:	d00b      	beq.n	800aafa <_svfiprintf_r+0x76>
 800aae2:	4653      	mov	r3, sl
 800aae4:	4632      	mov	r2, r6
 800aae6:	4621      	mov	r1, r4
 800aae8:	4640      	mov	r0, r8
 800aaea:	f7ff ff71 	bl	800a9d0 <__ssputs_r>
 800aaee:	3001      	adds	r0, #1
 800aaf0:	f000 80a4 	beq.w	800ac3c <_svfiprintf_r+0x1b8>
 800aaf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf6:	4453      	add	r3, sl
 800aaf8:	9309      	str	r3, [sp, #36]	; 0x24
 800aafa:	783b      	ldrb	r3, [r7, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 809d 	beq.w	800ac3c <_svfiprintf_r+0x1b8>
 800ab02:	2300      	movs	r3, #0
 800ab04:	f04f 32ff 	mov.w	r2, #4294967295
 800ab08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab0c:	9304      	str	r3, [sp, #16]
 800ab0e:	9307      	str	r3, [sp, #28]
 800ab10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab14:	931a      	str	r3, [sp, #104]	; 0x68
 800ab16:	462f      	mov	r7, r5
 800ab18:	2205      	movs	r2, #5
 800ab1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ab1e:	4850      	ldr	r0, [pc, #320]	; (800ac60 <_svfiprintf_r+0x1dc>)
 800ab20:	f7ff fbac 	bl	800a27c <memchr>
 800ab24:	9b04      	ldr	r3, [sp, #16]
 800ab26:	b9d0      	cbnz	r0, 800ab5e <_svfiprintf_r+0xda>
 800ab28:	06d9      	lsls	r1, r3, #27
 800ab2a:	bf44      	itt	mi
 800ab2c:	2220      	movmi	r2, #32
 800ab2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab32:	071a      	lsls	r2, r3, #28
 800ab34:	bf44      	itt	mi
 800ab36:	222b      	movmi	r2, #43	; 0x2b
 800ab38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ab3c:	782a      	ldrb	r2, [r5, #0]
 800ab3e:	2a2a      	cmp	r2, #42	; 0x2a
 800ab40:	d015      	beq.n	800ab6e <_svfiprintf_r+0xea>
 800ab42:	462f      	mov	r7, r5
 800ab44:	2000      	movs	r0, #0
 800ab46:	250a      	movs	r5, #10
 800ab48:	9a07      	ldr	r2, [sp, #28]
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab50:	3b30      	subs	r3, #48	; 0x30
 800ab52:	2b09      	cmp	r3, #9
 800ab54:	d94d      	bls.n	800abf2 <_svfiprintf_r+0x16e>
 800ab56:	b1b8      	cbz	r0, 800ab88 <_svfiprintf_r+0x104>
 800ab58:	e00f      	b.n	800ab7a <_svfiprintf_r+0xf6>
 800ab5a:	462f      	mov	r7, r5
 800ab5c:	e7b8      	b.n	800aad0 <_svfiprintf_r+0x4c>
 800ab5e:	4a40      	ldr	r2, [pc, #256]	; (800ac60 <_svfiprintf_r+0x1dc>)
 800ab60:	463d      	mov	r5, r7
 800ab62:	1a80      	subs	r0, r0, r2
 800ab64:	fa0b f000 	lsl.w	r0, fp, r0
 800ab68:	4318      	orrs	r0, r3
 800ab6a:	9004      	str	r0, [sp, #16]
 800ab6c:	e7d3      	b.n	800ab16 <_svfiprintf_r+0x92>
 800ab6e:	9a03      	ldr	r2, [sp, #12]
 800ab70:	1d11      	adds	r1, r2, #4
 800ab72:	6812      	ldr	r2, [r2, #0]
 800ab74:	9103      	str	r1, [sp, #12]
 800ab76:	2a00      	cmp	r2, #0
 800ab78:	db01      	blt.n	800ab7e <_svfiprintf_r+0xfa>
 800ab7a:	9207      	str	r2, [sp, #28]
 800ab7c:	e004      	b.n	800ab88 <_svfiprintf_r+0x104>
 800ab7e:	4252      	negs	r2, r2
 800ab80:	f043 0302 	orr.w	r3, r3, #2
 800ab84:	9207      	str	r2, [sp, #28]
 800ab86:	9304      	str	r3, [sp, #16]
 800ab88:	783b      	ldrb	r3, [r7, #0]
 800ab8a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab8c:	d10c      	bne.n	800aba8 <_svfiprintf_r+0x124>
 800ab8e:	787b      	ldrb	r3, [r7, #1]
 800ab90:	2b2a      	cmp	r3, #42	; 0x2a
 800ab92:	d133      	bne.n	800abfc <_svfiprintf_r+0x178>
 800ab94:	9b03      	ldr	r3, [sp, #12]
 800ab96:	3702      	adds	r7, #2
 800ab98:	1d1a      	adds	r2, r3, #4
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	9203      	str	r2, [sp, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	bfb8      	it	lt
 800aba2:	f04f 33ff 	movlt.w	r3, #4294967295
 800aba6:	9305      	str	r3, [sp, #20]
 800aba8:	4d2e      	ldr	r5, [pc, #184]	; (800ac64 <_svfiprintf_r+0x1e0>)
 800abaa:	2203      	movs	r2, #3
 800abac:	7839      	ldrb	r1, [r7, #0]
 800abae:	4628      	mov	r0, r5
 800abb0:	f7ff fb64 	bl	800a27c <memchr>
 800abb4:	b138      	cbz	r0, 800abc6 <_svfiprintf_r+0x142>
 800abb6:	2340      	movs	r3, #64	; 0x40
 800abb8:	1b40      	subs	r0, r0, r5
 800abba:	fa03 f000 	lsl.w	r0, r3, r0
 800abbe:	9b04      	ldr	r3, [sp, #16]
 800abc0:	3701      	adds	r7, #1
 800abc2:	4303      	orrs	r3, r0
 800abc4:	9304      	str	r3, [sp, #16]
 800abc6:	7839      	ldrb	r1, [r7, #0]
 800abc8:	2206      	movs	r2, #6
 800abca:	4827      	ldr	r0, [pc, #156]	; (800ac68 <_svfiprintf_r+0x1e4>)
 800abcc:	1c7e      	adds	r6, r7, #1
 800abce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abd2:	f7ff fb53 	bl	800a27c <memchr>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d038      	beq.n	800ac4c <_svfiprintf_r+0x1c8>
 800abda:	4b24      	ldr	r3, [pc, #144]	; (800ac6c <_svfiprintf_r+0x1e8>)
 800abdc:	bb13      	cbnz	r3, 800ac24 <_svfiprintf_r+0x1a0>
 800abde:	9b03      	ldr	r3, [sp, #12]
 800abe0:	3307      	adds	r3, #7
 800abe2:	f023 0307 	bic.w	r3, r3, #7
 800abe6:	3308      	adds	r3, #8
 800abe8:	9303      	str	r3, [sp, #12]
 800abea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abec:	444b      	add	r3, r9
 800abee:	9309      	str	r3, [sp, #36]	; 0x24
 800abf0:	e76d      	b.n	800aace <_svfiprintf_r+0x4a>
 800abf2:	fb05 3202 	mla	r2, r5, r2, r3
 800abf6:	2001      	movs	r0, #1
 800abf8:	460f      	mov	r7, r1
 800abfa:	e7a6      	b.n	800ab4a <_svfiprintf_r+0xc6>
 800abfc:	2300      	movs	r3, #0
 800abfe:	250a      	movs	r5, #10
 800ac00:	4619      	mov	r1, r3
 800ac02:	3701      	adds	r7, #1
 800ac04:	9305      	str	r3, [sp, #20]
 800ac06:	4638      	mov	r0, r7
 800ac08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac0c:	3a30      	subs	r2, #48	; 0x30
 800ac0e:	2a09      	cmp	r2, #9
 800ac10:	d903      	bls.n	800ac1a <_svfiprintf_r+0x196>
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d0c8      	beq.n	800aba8 <_svfiprintf_r+0x124>
 800ac16:	9105      	str	r1, [sp, #20]
 800ac18:	e7c6      	b.n	800aba8 <_svfiprintf_r+0x124>
 800ac1a:	fb05 2101 	mla	r1, r5, r1, r2
 800ac1e:	2301      	movs	r3, #1
 800ac20:	4607      	mov	r7, r0
 800ac22:	e7f0      	b.n	800ac06 <_svfiprintf_r+0x182>
 800ac24:	ab03      	add	r3, sp, #12
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	4622      	mov	r2, r4
 800ac2a:	4b11      	ldr	r3, [pc, #68]	; (800ac70 <_svfiprintf_r+0x1ec>)
 800ac2c:	a904      	add	r1, sp, #16
 800ac2e:	4640      	mov	r0, r8
 800ac30:	f7fd fd16 	bl	8008660 <_printf_float>
 800ac34:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ac38:	4681      	mov	r9, r0
 800ac3a:	d1d6      	bne.n	800abea <_svfiprintf_r+0x166>
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	065b      	lsls	r3, r3, #25
 800ac40:	f53f af35 	bmi.w	800aaae <_svfiprintf_r+0x2a>
 800ac44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac46:	b01d      	add	sp, #116	; 0x74
 800ac48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac4c:	ab03      	add	r3, sp, #12
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	4622      	mov	r2, r4
 800ac52:	4b07      	ldr	r3, [pc, #28]	; (800ac70 <_svfiprintf_r+0x1ec>)
 800ac54:	a904      	add	r1, sp, #16
 800ac56:	4640      	mov	r0, r8
 800ac58:	f7fd ffae 	bl	8008bb8 <_printf_i>
 800ac5c:	e7ea      	b.n	800ac34 <_svfiprintf_r+0x1b0>
 800ac5e:	bf00      	nop
 800ac60:	0800b7a4 	.word	0x0800b7a4
 800ac64:	0800b7aa 	.word	0x0800b7aa
 800ac68:	0800b7ae 	.word	0x0800b7ae
 800ac6c:	08008661 	.word	0x08008661
 800ac70:	0800a9d1 	.word	0x0800a9d1

0800ac74 <__sfputc_r>:
 800ac74:	6893      	ldr	r3, [r2, #8]
 800ac76:	b410      	push	{r4}
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	6093      	str	r3, [r2, #8]
 800ac7e:	da07      	bge.n	800ac90 <__sfputc_r+0x1c>
 800ac80:	6994      	ldr	r4, [r2, #24]
 800ac82:	42a3      	cmp	r3, r4
 800ac84:	db01      	blt.n	800ac8a <__sfputc_r+0x16>
 800ac86:	290a      	cmp	r1, #10
 800ac88:	d102      	bne.n	800ac90 <__sfputc_r+0x1c>
 800ac8a:	bc10      	pop	{r4}
 800ac8c:	f7fe b9e8 	b.w	8009060 <__swbuf_r>
 800ac90:	6813      	ldr	r3, [r2, #0]
 800ac92:	1c58      	adds	r0, r3, #1
 800ac94:	6010      	str	r0, [r2, #0]
 800ac96:	7019      	strb	r1, [r3, #0]
 800ac98:	4608      	mov	r0, r1
 800ac9a:	bc10      	pop	{r4}
 800ac9c:	4770      	bx	lr

0800ac9e <__sfputs_r>:
 800ac9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca0:	4606      	mov	r6, r0
 800aca2:	460f      	mov	r7, r1
 800aca4:	4614      	mov	r4, r2
 800aca6:	18d5      	adds	r5, r2, r3
 800aca8:	42ac      	cmp	r4, r5
 800acaa:	d101      	bne.n	800acb0 <__sfputs_r+0x12>
 800acac:	2000      	movs	r0, #0
 800acae:	e007      	b.n	800acc0 <__sfputs_r+0x22>
 800acb0:	463a      	mov	r2, r7
 800acb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb6:	4630      	mov	r0, r6
 800acb8:	f7ff ffdc 	bl	800ac74 <__sfputc_r>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d1f3      	bne.n	800aca8 <__sfputs_r+0xa>
 800acc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acc4 <_vfiprintf_r>:
 800acc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc8:	460c      	mov	r4, r1
 800acca:	b09d      	sub	sp, #116	; 0x74
 800accc:	4617      	mov	r7, r2
 800acce:	461d      	mov	r5, r3
 800acd0:	4606      	mov	r6, r0
 800acd2:	b118      	cbz	r0, 800acdc <_vfiprintf_r+0x18>
 800acd4:	6983      	ldr	r3, [r0, #24]
 800acd6:	b90b      	cbnz	r3, 800acdc <_vfiprintf_r+0x18>
 800acd8:	f7ff f9b6 	bl	800a048 <__sinit>
 800acdc:	4b7c      	ldr	r3, [pc, #496]	; (800aed0 <_vfiprintf_r+0x20c>)
 800acde:	429c      	cmp	r4, r3
 800ace0:	d158      	bne.n	800ad94 <_vfiprintf_r+0xd0>
 800ace2:	6874      	ldr	r4, [r6, #4]
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	0718      	lsls	r0, r3, #28
 800ace8:	d55e      	bpl.n	800ada8 <_vfiprintf_r+0xe4>
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d05b      	beq.n	800ada8 <_vfiprintf_r+0xe4>
 800acf0:	2300      	movs	r3, #0
 800acf2:	9309      	str	r3, [sp, #36]	; 0x24
 800acf4:	2320      	movs	r3, #32
 800acf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acfa:	2330      	movs	r3, #48	; 0x30
 800acfc:	f04f 0b01 	mov.w	fp, #1
 800ad00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad04:	9503      	str	r5, [sp, #12]
 800ad06:	46b8      	mov	r8, r7
 800ad08:	4645      	mov	r5, r8
 800ad0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ad0e:	b10b      	cbz	r3, 800ad14 <_vfiprintf_r+0x50>
 800ad10:	2b25      	cmp	r3, #37	; 0x25
 800ad12:	d154      	bne.n	800adbe <_vfiprintf_r+0xfa>
 800ad14:	ebb8 0a07 	subs.w	sl, r8, r7
 800ad18:	d00b      	beq.n	800ad32 <_vfiprintf_r+0x6e>
 800ad1a:	4653      	mov	r3, sl
 800ad1c:	463a      	mov	r2, r7
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7ff ffbc 	bl	800ac9e <__sfputs_r>
 800ad26:	3001      	adds	r0, #1
 800ad28:	f000 80c2 	beq.w	800aeb0 <_vfiprintf_r+0x1ec>
 800ad2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad2e:	4453      	add	r3, sl
 800ad30:	9309      	str	r3, [sp, #36]	; 0x24
 800ad32:	f898 3000 	ldrb.w	r3, [r8]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 80ba 	beq.w	800aeb0 <_vfiprintf_r+0x1ec>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad46:	9304      	str	r3, [sp, #16]
 800ad48:	9307      	str	r3, [sp, #28]
 800ad4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad4e:	931a      	str	r3, [sp, #104]	; 0x68
 800ad50:	46a8      	mov	r8, r5
 800ad52:	2205      	movs	r2, #5
 800ad54:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ad58:	485e      	ldr	r0, [pc, #376]	; (800aed4 <_vfiprintf_r+0x210>)
 800ad5a:	f7ff fa8f 	bl	800a27c <memchr>
 800ad5e:	9b04      	ldr	r3, [sp, #16]
 800ad60:	bb78      	cbnz	r0, 800adc2 <_vfiprintf_r+0xfe>
 800ad62:	06d9      	lsls	r1, r3, #27
 800ad64:	bf44      	itt	mi
 800ad66:	2220      	movmi	r2, #32
 800ad68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ad6c:	071a      	lsls	r2, r3, #28
 800ad6e:	bf44      	itt	mi
 800ad70:	222b      	movmi	r2, #43	; 0x2b
 800ad72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ad76:	782a      	ldrb	r2, [r5, #0]
 800ad78:	2a2a      	cmp	r2, #42	; 0x2a
 800ad7a:	d02a      	beq.n	800add2 <_vfiprintf_r+0x10e>
 800ad7c:	46a8      	mov	r8, r5
 800ad7e:	2000      	movs	r0, #0
 800ad80:	250a      	movs	r5, #10
 800ad82:	9a07      	ldr	r2, [sp, #28]
 800ad84:	4641      	mov	r1, r8
 800ad86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad8a:	3b30      	subs	r3, #48	; 0x30
 800ad8c:	2b09      	cmp	r3, #9
 800ad8e:	d969      	bls.n	800ae64 <_vfiprintf_r+0x1a0>
 800ad90:	b360      	cbz	r0, 800adec <_vfiprintf_r+0x128>
 800ad92:	e024      	b.n	800adde <_vfiprintf_r+0x11a>
 800ad94:	4b50      	ldr	r3, [pc, #320]	; (800aed8 <_vfiprintf_r+0x214>)
 800ad96:	429c      	cmp	r4, r3
 800ad98:	d101      	bne.n	800ad9e <_vfiprintf_r+0xda>
 800ad9a:	68b4      	ldr	r4, [r6, #8]
 800ad9c:	e7a2      	b.n	800ace4 <_vfiprintf_r+0x20>
 800ad9e:	4b4f      	ldr	r3, [pc, #316]	; (800aedc <_vfiprintf_r+0x218>)
 800ada0:	429c      	cmp	r4, r3
 800ada2:	bf08      	it	eq
 800ada4:	68f4      	ldreq	r4, [r6, #12]
 800ada6:	e79d      	b.n	800ace4 <_vfiprintf_r+0x20>
 800ada8:	4621      	mov	r1, r4
 800adaa:	4630      	mov	r0, r6
 800adac:	f7fe f9aa 	bl	8009104 <__swsetup_r>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d09d      	beq.n	800acf0 <_vfiprintf_r+0x2c>
 800adb4:	f04f 30ff 	mov.w	r0, #4294967295
 800adb8:	b01d      	add	sp, #116	; 0x74
 800adba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adbe:	46a8      	mov	r8, r5
 800adc0:	e7a2      	b.n	800ad08 <_vfiprintf_r+0x44>
 800adc2:	4a44      	ldr	r2, [pc, #272]	; (800aed4 <_vfiprintf_r+0x210>)
 800adc4:	4645      	mov	r5, r8
 800adc6:	1a80      	subs	r0, r0, r2
 800adc8:	fa0b f000 	lsl.w	r0, fp, r0
 800adcc:	4318      	orrs	r0, r3
 800adce:	9004      	str	r0, [sp, #16]
 800add0:	e7be      	b.n	800ad50 <_vfiprintf_r+0x8c>
 800add2:	9a03      	ldr	r2, [sp, #12]
 800add4:	1d11      	adds	r1, r2, #4
 800add6:	6812      	ldr	r2, [r2, #0]
 800add8:	9103      	str	r1, [sp, #12]
 800adda:	2a00      	cmp	r2, #0
 800addc:	db01      	blt.n	800ade2 <_vfiprintf_r+0x11e>
 800adde:	9207      	str	r2, [sp, #28]
 800ade0:	e004      	b.n	800adec <_vfiprintf_r+0x128>
 800ade2:	4252      	negs	r2, r2
 800ade4:	f043 0302 	orr.w	r3, r3, #2
 800ade8:	9207      	str	r2, [sp, #28]
 800adea:	9304      	str	r3, [sp, #16]
 800adec:	f898 3000 	ldrb.w	r3, [r8]
 800adf0:	2b2e      	cmp	r3, #46	; 0x2e
 800adf2:	d10e      	bne.n	800ae12 <_vfiprintf_r+0x14e>
 800adf4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800adf8:	2b2a      	cmp	r3, #42	; 0x2a
 800adfa:	d138      	bne.n	800ae6e <_vfiprintf_r+0x1aa>
 800adfc:	9b03      	ldr	r3, [sp, #12]
 800adfe:	f108 0802 	add.w	r8, r8, #2
 800ae02:	1d1a      	adds	r2, r3, #4
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	9203      	str	r2, [sp, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bfb8      	it	lt
 800ae0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae10:	9305      	str	r3, [sp, #20]
 800ae12:	4d33      	ldr	r5, [pc, #204]	; (800aee0 <_vfiprintf_r+0x21c>)
 800ae14:	2203      	movs	r2, #3
 800ae16:	f898 1000 	ldrb.w	r1, [r8]
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	f7ff fa2e 	bl	800a27c <memchr>
 800ae20:	b140      	cbz	r0, 800ae34 <_vfiprintf_r+0x170>
 800ae22:	2340      	movs	r3, #64	; 0x40
 800ae24:	1b40      	subs	r0, r0, r5
 800ae26:	fa03 f000 	lsl.w	r0, r3, r0
 800ae2a:	9b04      	ldr	r3, [sp, #16]
 800ae2c:	f108 0801 	add.w	r8, r8, #1
 800ae30:	4303      	orrs	r3, r0
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	f898 1000 	ldrb.w	r1, [r8]
 800ae38:	2206      	movs	r2, #6
 800ae3a:	482a      	ldr	r0, [pc, #168]	; (800aee4 <_vfiprintf_r+0x220>)
 800ae3c:	f108 0701 	add.w	r7, r8, #1
 800ae40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae44:	f7ff fa1a 	bl	800a27c <memchr>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	d037      	beq.n	800aebc <_vfiprintf_r+0x1f8>
 800ae4c:	4b26      	ldr	r3, [pc, #152]	; (800aee8 <_vfiprintf_r+0x224>)
 800ae4e:	bb1b      	cbnz	r3, 800ae98 <_vfiprintf_r+0x1d4>
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	3307      	adds	r3, #7
 800ae54:	f023 0307 	bic.w	r3, r3, #7
 800ae58:	3308      	adds	r3, #8
 800ae5a:	9303      	str	r3, [sp, #12]
 800ae5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae5e:	444b      	add	r3, r9
 800ae60:	9309      	str	r3, [sp, #36]	; 0x24
 800ae62:	e750      	b.n	800ad06 <_vfiprintf_r+0x42>
 800ae64:	fb05 3202 	mla	r2, r5, r2, r3
 800ae68:	2001      	movs	r0, #1
 800ae6a:	4688      	mov	r8, r1
 800ae6c:	e78a      	b.n	800ad84 <_vfiprintf_r+0xc0>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	250a      	movs	r5, #10
 800ae72:	4619      	mov	r1, r3
 800ae74:	f108 0801 	add.w	r8, r8, #1
 800ae78:	9305      	str	r3, [sp, #20]
 800ae7a:	4640      	mov	r0, r8
 800ae7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae80:	3a30      	subs	r2, #48	; 0x30
 800ae82:	2a09      	cmp	r2, #9
 800ae84:	d903      	bls.n	800ae8e <_vfiprintf_r+0x1ca>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0c3      	beq.n	800ae12 <_vfiprintf_r+0x14e>
 800ae8a:	9105      	str	r1, [sp, #20]
 800ae8c:	e7c1      	b.n	800ae12 <_vfiprintf_r+0x14e>
 800ae8e:	fb05 2101 	mla	r1, r5, r1, r2
 800ae92:	2301      	movs	r3, #1
 800ae94:	4680      	mov	r8, r0
 800ae96:	e7f0      	b.n	800ae7a <_vfiprintf_r+0x1b6>
 800ae98:	ab03      	add	r3, sp, #12
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	4b13      	ldr	r3, [pc, #76]	; (800aeec <_vfiprintf_r+0x228>)
 800aea0:	a904      	add	r1, sp, #16
 800aea2:	4630      	mov	r0, r6
 800aea4:	f7fd fbdc 	bl	8008660 <_printf_float>
 800aea8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aeac:	4681      	mov	r9, r0
 800aeae:	d1d5      	bne.n	800ae5c <_vfiprintf_r+0x198>
 800aeb0:	89a3      	ldrh	r3, [r4, #12]
 800aeb2:	065b      	lsls	r3, r3, #25
 800aeb4:	f53f af7e 	bmi.w	800adb4 <_vfiprintf_r+0xf0>
 800aeb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeba:	e77d      	b.n	800adb8 <_vfiprintf_r+0xf4>
 800aebc:	ab03      	add	r3, sp, #12
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	4622      	mov	r2, r4
 800aec2:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <_vfiprintf_r+0x228>)
 800aec4:	a904      	add	r1, sp, #16
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7fd fe76 	bl	8008bb8 <_printf_i>
 800aecc:	e7ec      	b.n	800aea8 <_vfiprintf_r+0x1e4>
 800aece:	bf00      	nop
 800aed0:	0800b65c 	.word	0x0800b65c
 800aed4:	0800b7a4 	.word	0x0800b7a4
 800aed8:	0800b67c 	.word	0x0800b67c
 800aedc:	0800b63c 	.word	0x0800b63c
 800aee0:	0800b7aa 	.word	0x0800b7aa
 800aee4:	0800b7ae 	.word	0x0800b7ae
 800aee8:	08008661 	.word	0x08008661
 800aeec:	0800ac9f 	.word	0x0800ac9f

0800aef0 <_putc_r>:
 800aef0:	b570      	push	{r4, r5, r6, lr}
 800aef2:	460d      	mov	r5, r1
 800aef4:	4614      	mov	r4, r2
 800aef6:	4606      	mov	r6, r0
 800aef8:	b118      	cbz	r0, 800af02 <_putc_r+0x12>
 800aefa:	6983      	ldr	r3, [r0, #24]
 800aefc:	b90b      	cbnz	r3, 800af02 <_putc_r+0x12>
 800aefe:	f7ff f8a3 	bl	800a048 <__sinit>
 800af02:	4b13      	ldr	r3, [pc, #76]	; (800af50 <_putc_r+0x60>)
 800af04:	429c      	cmp	r4, r3
 800af06:	d112      	bne.n	800af2e <_putc_r+0x3e>
 800af08:	6874      	ldr	r4, [r6, #4]
 800af0a:	68a3      	ldr	r3, [r4, #8]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	2b00      	cmp	r3, #0
 800af10:	60a3      	str	r3, [r4, #8]
 800af12:	da16      	bge.n	800af42 <_putc_r+0x52>
 800af14:	69a2      	ldr	r2, [r4, #24]
 800af16:	4293      	cmp	r3, r2
 800af18:	db02      	blt.n	800af20 <_putc_r+0x30>
 800af1a:	b2eb      	uxtb	r3, r5
 800af1c:	2b0a      	cmp	r3, #10
 800af1e:	d110      	bne.n	800af42 <_putc_r+0x52>
 800af20:	4622      	mov	r2, r4
 800af22:	4629      	mov	r1, r5
 800af24:	4630      	mov	r0, r6
 800af26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af2a:	f7fe b899 	b.w	8009060 <__swbuf_r>
 800af2e:	4b09      	ldr	r3, [pc, #36]	; (800af54 <_putc_r+0x64>)
 800af30:	429c      	cmp	r4, r3
 800af32:	d101      	bne.n	800af38 <_putc_r+0x48>
 800af34:	68b4      	ldr	r4, [r6, #8]
 800af36:	e7e8      	b.n	800af0a <_putc_r+0x1a>
 800af38:	4b07      	ldr	r3, [pc, #28]	; (800af58 <_putc_r+0x68>)
 800af3a:	429c      	cmp	r4, r3
 800af3c:	bf08      	it	eq
 800af3e:	68f4      	ldreq	r4, [r6, #12]
 800af40:	e7e3      	b.n	800af0a <_putc_r+0x1a>
 800af42:	6823      	ldr	r3, [r4, #0]
 800af44:	b2e8      	uxtb	r0, r5
 800af46:	1c5a      	adds	r2, r3, #1
 800af48:	6022      	str	r2, [r4, #0]
 800af4a:	701d      	strb	r5, [r3, #0]
 800af4c:	bd70      	pop	{r4, r5, r6, pc}
 800af4e:	bf00      	nop
 800af50:	0800b65c 	.word	0x0800b65c
 800af54:	0800b67c 	.word	0x0800b67c
 800af58:	0800b63c 	.word	0x0800b63c

0800af5c <_sbrk_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	2300      	movs	r3, #0
 800af60:	4c05      	ldr	r4, [pc, #20]	; (800af78 <_sbrk_r+0x1c>)
 800af62:	4605      	mov	r5, r0
 800af64:	4608      	mov	r0, r1
 800af66:	6023      	str	r3, [r4, #0]
 800af68:	f7f9 f9f2 	bl	8004350 <_sbrk>
 800af6c:	1c43      	adds	r3, r0, #1
 800af6e:	d102      	bne.n	800af76 <_sbrk_r+0x1a>
 800af70:	6823      	ldr	r3, [r4, #0]
 800af72:	b103      	cbz	r3, 800af76 <_sbrk_r+0x1a>
 800af74:	602b      	str	r3, [r5, #0]
 800af76:	bd38      	pop	{r3, r4, r5, pc}
 800af78:	20000770 	.word	0x20000770

0800af7c <__sread>:
 800af7c:	b510      	push	{r4, lr}
 800af7e:	460c      	mov	r4, r1
 800af80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af84:	f000 f8e2 	bl	800b14c <_read_r>
 800af88:	2800      	cmp	r0, #0
 800af8a:	bfab      	itete	ge
 800af8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af8e:	89a3      	ldrhlt	r3, [r4, #12]
 800af90:	181b      	addge	r3, r3, r0
 800af92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af96:	bfac      	ite	ge
 800af98:	6563      	strge	r3, [r4, #84]	; 0x54
 800af9a:	81a3      	strhlt	r3, [r4, #12]
 800af9c:	bd10      	pop	{r4, pc}

0800af9e <__swrite>:
 800af9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa2:	461f      	mov	r7, r3
 800afa4:	898b      	ldrh	r3, [r1, #12]
 800afa6:	4605      	mov	r5, r0
 800afa8:	05db      	lsls	r3, r3, #23
 800afaa:	460c      	mov	r4, r1
 800afac:	4616      	mov	r6, r2
 800afae:	d505      	bpl.n	800afbc <__swrite+0x1e>
 800afb0:	2302      	movs	r3, #2
 800afb2:	2200      	movs	r2, #0
 800afb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afb8:	f000 f874 	bl	800b0a4 <_lseek_r>
 800afbc:	89a3      	ldrh	r3, [r4, #12]
 800afbe:	4632      	mov	r2, r6
 800afc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afc4:	81a3      	strh	r3, [r4, #12]
 800afc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afca:	463b      	mov	r3, r7
 800afcc:	4628      	mov	r0, r5
 800afce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afd2:	f000 b823 	b.w	800b01c <_write_r>

0800afd6 <__sseek>:
 800afd6:	b510      	push	{r4, lr}
 800afd8:	460c      	mov	r4, r1
 800afda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afde:	f000 f861 	bl	800b0a4 <_lseek_r>
 800afe2:	1c43      	adds	r3, r0, #1
 800afe4:	89a3      	ldrh	r3, [r4, #12]
 800afe6:	bf15      	itete	ne
 800afe8:	6560      	strne	r0, [r4, #84]	; 0x54
 800afea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aff2:	81a3      	strheq	r3, [r4, #12]
 800aff4:	bf18      	it	ne
 800aff6:	81a3      	strhne	r3, [r4, #12]
 800aff8:	bd10      	pop	{r4, pc}

0800affa <__sclose>:
 800affa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800affe:	f000 b81f 	b.w	800b040 <_close_r>

0800b002 <__ascii_wctomb>:
 800b002:	b149      	cbz	r1, 800b018 <__ascii_wctomb+0x16>
 800b004:	2aff      	cmp	r2, #255	; 0xff
 800b006:	bf8b      	itete	hi
 800b008:	238a      	movhi	r3, #138	; 0x8a
 800b00a:	700a      	strbls	r2, [r1, #0]
 800b00c:	6003      	strhi	r3, [r0, #0]
 800b00e:	2001      	movls	r0, #1
 800b010:	bf88      	it	hi
 800b012:	f04f 30ff 	movhi.w	r0, #4294967295
 800b016:	4770      	bx	lr
 800b018:	4608      	mov	r0, r1
 800b01a:	4770      	bx	lr

0800b01c <_write_r>:
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4605      	mov	r5, r0
 800b020:	4608      	mov	r0, r1
 800b022:	4611      	mov	r1, r2
 800b024:	2200      	movs	r2, #0
 800b026:	4c05      	ldr	r4, [pc, #20]	; (800b03c <_write_r+0x20>)
 800b028:	6022      	str	r2, [r4, #0]
 800b02a:	461a      	mov	r2, r3
 800b02c:	f7f9 f943 	bl	80042b6 <_write>
 800b030:	1c43      	adds	r3, r0, #1
 800b032:	d102      	bne.n	800b03a <_write_r+0x1e>
 800b034:	6823      	ldr	r3, [r4, #0]
 800b036:	b103      	cbz	r3, 800b03a <_write_r+0x1e>
 800b038:	602b      	str	r3, [r5, #0]
 800b03a:	bd38      	pop	{r3, r4, r5, pc}
 800b03c:	20000770 	.word	0x20000770

0800b040 <_close_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	2300      	movs	r3, #0
 800b044:	4c05      	ldr	r4, [pc, #20]	; (800b05c <_close_r+0x1c>)
 800b046:	4605      	mov	r5, r0
 800b048:	4608      	mov	r0, r1
 800b04a:	6023      	str	r3, [r4, #0]
 800b04c:	f7f9 f94f 	bl	80042ee <_close>
 800b050:	1c43      	adds	r3, r0, #1
 800b052:	d102      	bne.n	800b05a <_close_r+0x1a>
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	b103      	cbz	r3, 800b05a <_close_r+0x1a>
 800b058:	602b      	str	r3, [r5, #0]
 800b05a:	bd38      	pop	{r3, r4, r5, pc}
 800b05c:	20000770 	.word	0x20000770

0800b060 <_fstat_r>:
 800b060:	b538      	push	{r3, r4, r5, lr}
 800b062:	2300      	movs	r3, #0
 800b064:	4c06      	ldr	r4, [pc, #24]	; (800b080 <_fstat_r+0x20>)
 800b066:	4605      	mov	r5, r0
 800b068:	4608      	mov	r0, r1
 800b06a:	4611      	mov	r1, r2
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	f7f9 f949 	bl	8004304 <_fstat>
 800b072:	1c43      	adds	r3, r0, #1
 800b074:	d102      	bne.n	800b07c <_fstat_r+0x1c>
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	b103      	cbz	r3, 800b07c <_fstat_r+0x1c>
 800b07a:	602b      	str	r3, [r5, #0]
 800b07c:	bd38      	pop	{r3, r4, r5, pc}
 800b07e:	bf00      	nop
 800b080:	20000770 	.word	0x20000770

0800b084 <_isatty_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	2300      	movs	r3, #0
 800b088:	4c05      	ldr	r4, [pc, #20]	; (800b0a0 <_isatty_r+0x1c>)
 800b08a:	4605      	mov	r5, r0
 800b08c:	4608      	mov	r0, r1
 800b08e:	6023      	str	r3, [r4, #0]
 800b090:	f7f9 f947 	bl	8004322 <_isatty>
 800b094:	1c43      	adds	r3, r0, #1
 800b096:	d102      	bne.n	800b09e <_isatty_r+0x1a>
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	b103      	cbz	r3, 800b09e <_isatty_r+0x1a>
 800b09c:	602b      	str	r3, [r5, #0]
 800b09e:	bd38      	pop	{r3, r4, r5, pc}
 800b0a0:	20000770 	.word	0x20000770

0800b0a4 <_lseek_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	4c05      	ldr	r4, [pc, #20]	; (800b0c4 <_lseek_r+0x20>)
 800b0b0:	6022      	str	r2, [r4, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	f7f9 f93f 	bl	8004336 <_lseek>
 800b0b8:	1c43      	adds	r3, r0, #1
 800b0ba:	d102      	bne.n	800b0c2 <_lseek_r+0x1e>
 800b0bc:	6823      	ldr	r3, [r4, #0]
 800b0be:	b103      	cbz	r3, 800b0c2 <_lseek_r+0x1e>
 800b0c0:	602b      	str	r3, [r5, #0]
 800b0c2:	bd38      	pop	{r3, r4, r5, pc}
 800b0c4:	20000770 	.word	0x20000770

0800b0c8 <memmove>:
 800b0c8:	4288      	cmp	r0, r1
 800b0ca:	b510      	push	{r4, lr}
 800b0cc:	eb01 0302 	add.w	r3, r1, r2
 800b0d0:	d807      	bhi.n	800b0e2 <memmove+0x1a>
 800b0d2:	1e42      	subs	r2, r0, #1
 800b0d4:	4299      	cmp	r1, r3
 800b0d6:	d00a      	beq.n	800b0ee <memmove+0x26>
 800b0d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b0e0:	e7f8      	b.n	800b0d4 <memmove+0xc>
 800b0e2:	4283      	cmp	r3, r0
 800b0e4:	d9f5      	bls.n	800b0d2 <memmove+0xa>
 800b0e6:	1881      	adds	r1, r0, r2
 800b0e8:	1ad2      	subs	r2, r2, r3
 800b0ea:	42d3      	cmn	r3, r2
 800b0ec:	d100      	bne.n	800b0f0 <memmove+0x28>
 800b0ee:	bd10      	pop	{r4, pc}
 800b0f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b0f8:	e7f7      	b.n	800b0ea <memmove+0x22>

0800b0fa <__malloc_lock>:
 800b0fa:	4770      	bx	lr

0800b0fc <__malloc_unlock>:
 800b0fc:	4770      	bx	lr

0800b0fe <_realloc_r>:
 800b0fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b100:	4607      	mov	r7, r0
 800b102:	4614      	mov	r4, r2
 800b104:	460e      	mov	r6, r1
 800b106:	b921      	cbnz	r1, 800b112 <_realloc_r+0x14>
 800b108:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b10c:	4611      	mov	r1, r2
 800b10e:	f7ff bc05 	b.w	800a91c <_malloc_r>
 800b112:	b922      	cbnz	r2, 800b11e <_realloc_r+0x20>
 800b114:	f7ff fbb6 	bl	800a884 <_free_r>
 800b118:	4625      	mov	r5, r4
 800b11a:	4628      	mov	r0, r5
 800b11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b11e:	f000 f827 	bl	800b170 <_malloc_usable_size_r>
 800b122:	42a0      	cmp	r0, r4
 800b124:	d20f      	bcs.n	800b146 <_realloc_r+0x48>
 800b126:	4621      	mov	r1, r4
 800b128:	4638      	mov	r0, r7
 800b12a:	f7ff fbf7 	bl	800a91c <_malloc_r>
 800b12e:	4605      	mov	r5, r0
 800b130:	2800      	cmp	r0, #0
 800b132:	d0f2      	beq.n	800b11a <_realloc_r+0x1c>
 800b134:	4631      	mov	r1, r6
 800b136:	4622      	mov	r2, r4
 800b138:	f7ff f8ae 	bl	800a298 <memcpy>
 800b13c:	4631      	mov	r1, r6
 800b13e:	4638      	mov	r0, r7
 800b140:	f7ff fba0 	bl	800a884 <_free_r>
 800b144:	e7e9      	b.n	800b11a <_realloc_r+0x1c>
 800b146:	4635      	mov	r5, r6
 800b148:	e7e7      	b.n	800b11a <_realloc_r+0x1c>
	...

0800b14c <_read_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	4605      	mov	r5, r0
 800b150:	4608      	mov	r0, r1
 800b152:	4611      	mov	r1, r2
 800b154:	2200      	movs	r2, #0
 800b156:	4c05      	ldr	r4, [pc, #20]	; (800b16c <_read_r+0x20>)
 800b158:	6022      	str	r2, [r4, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	f7f9 f88e 	bl	800427c <_read>
 800b160:	1c43      	adds	r3, r0, #1
 800b162:	d102      	bne.n	800b16a <_read_r+0x1e>
 800b164:	6823      	ldr	r3, [r4, #0]
 800b166:	b103      	cbz	r3, 800b16a <_read_r+0x1e>
 800b168:	602b      	str	r3, [r5, #0]
 800b16a:	bd38      	pop	{r3, r4, r5, pc}
 800b16c:	20000770 	.word	0x20000770

0800b170 <_malloc_usable_size_r>:
 800b170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b174:	1f18      	subs	r0, r3, #4
 800b176:	2b00      	cmp	r3, #0
 800b178:	bfbc      	itt	lt
 800b17a:	580b      	ldrlt	r3, [r1, r0]
 800b17c:	18c0      	addlt	r0, r0, r3
 800b17e:	4770      	bx	lr

0800b180 <_init>:
 800b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b182:	bf00      	nop
 800b184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b186:	bc08      	pop	{r3}
 800b188:	469e      	mov	lr, r3
 800b18a:	4770      	bx	lr

0800b18c <_fini>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	bf00      	nop
 800b190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b192:	bc08      	pop	{r3}
 800b194:	469e      	mov	lr, r3
 800b196:	4770      	bx	lr
